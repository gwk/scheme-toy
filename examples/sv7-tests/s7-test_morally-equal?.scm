(test (morally-equal? 'a 3) #f)
(test (morally-equal? #t 't) #f)
(test (morally-equal? "abs" 'abc) #f)
(test (morally-equal? "hi" '(hi)) #f)
(test (morally-equal? "()" '()) #f)
(test (morally-equal? '(1) '(1)) #t)
(test (morally-equal? '(#f) '(#f)) #t)
(test (morally-equal? '(()) '(() . ())) #t)
(test (morally-equal? #\a #\b) #f)
(test (morally-equal? #\a #\a) #t)
(test (let ((x (string-ref "hi" 0))) (morally-equal? x x)) #t)
(test (morally-equal? #t #t) #t)
(test (morally-equal? #f #f) #t)
(test (morally-equal? #f #t) #f)
(test (morally-equal? (null? '()) #t) #t)
(test (morally-equal? (null? '(a)) #f) #t)
(test (morally-equal? (cdr '(a)) '()) #t)
(test (morally-equal? 'a 'a) #t)
(test (morally-equal? 'a 'b) #f)
(test (morally-equal? 'a (string->symbol "a")) #t)
(test (morally-equal? '(a) '(b)) #f)
(test (morally-equal? '(a) '(a)) #t)
(test (let ((x '(a . b))) (morally-equal? x x)) #t)
(test (let ((x (cons 'a 'b))) (morally-equal? x x)) #t)
(test (morally-equal? (cons 'a 'b) (cons 'a 'b)) #t)
(test (morally-equal?(cons 'a 'b)(cons 'a 'b)) #t) ; no space
(test (morally-equal? "abc" "cba") #f)
(test (morally-equal? "abc" "abc") #t)
(test (let ((x "hi")) (morally-equal? x x)) #t)
(test (morally-equal? (string #\h #\i) (string #\h #\i)) #t)
(test (morally-equal? '#(a) '#(b)) #f)
(test (morally-equal? '#(a) '#(a)) #t)
(test (let ((x (vector 'a))) (morally-equal? x x)) #t)
(test (morally-equal? (vector 'a) (vector 'a)) #t)
(test (morally-equal? '#(1 2) (vector 1 2)) #t)
(test (morally-equal? '#(1.0 2/3) (vector 1.0 2/3)) #t)
(test (morally-equal? '#(1 2) (vector 1 2.0)) #t)
(test (morally-equal? '(1 . 2) (cons 1 2)) #t)
(test (morally-equal? '(1 #||# . #||# 2) (cons 1 2)) #t)
(test (- '#||#1) -1) ; hmm
(test (morally-equal? '#(1 "hi" #\a) (vector 1 "hi" #\a)) #t)
(test (morally-equal? '#((1 . 2)) (vector (cons 1 2))) #t)
(test (morally-equal? '#(1 "hi" #\a (1 . 2)) (vector 1 "hi" #\a (cons 1 2))) #t)
(test (morally-equal? '#(#f hi (1 2) 1 "hi" #\a (1 . 2)) (vector #f 'hi (list 1 2) 1 "hi" #\a (cons 1 2))) #t)
(test (morally-equal? '#(#(1) #(1)) (vector (vector 1) (vector 1))) #t)
(test (morally-equal? '#(()) (vector '())) #t)
(test (morally-equal? '#("hi" "ho") (vector "hi" '"ho")) #t)
(test (morally-equal? `#(1) '#(1)) #t)
(test (morally-equal? ``#(1) #(1)) #t)
(test (morally-equal? '`#(1) #(1)) #t)
(test (morally-equal? ''#(1) #(1)) #f)
(test (morally-equal? ''#(1) '#(1)) #f)
(test (morally-equal? (list 1 "hi" #\a) '(1 "hi" #\a)) #t)
(test (morally-equal? (list 1.0 2/3) '(1.0 2/3)) #t)
(test (morally-equal? (list 1 2) '(1 2.0)) #t)
(test (morally-equal? '#(1.0+1.0i) (vector 1.0+1.0i)) #t)
(test (morally-equal? (list 1.0+1.0i) '(1.0+1.0i)) #t)
(test (morally-equal? '((())) (list (list (list)))) #t)
(test (morally-equal? car car) #t)
(test (morally-equal? car cdr) #f)
(test (let ((x (lambda () 1))) (morally-equal? x x)) #t)
(test (morally-equal? (lambda () 1) (lambda () 1)) #t)
(test (morally-equal? 9/2 9/2) #t)
(test (morally-equal? #((())) #((()))) #t)
(test (morally-equal? "123""123") #t);no space
(test (morally-equal? """") #t)#|nospace|#
(test (morally-equal? #()#()) #t)
(test (morally-equal? #()()) #f)
(test (morally-equal? ()"") #f)
(test (morally-equal? "hi""hi") #t)
(test (morally-equal? #<eof> #<eof>) #t)
(test (morally-equal? #<undefined> #<undefined>) #t)
(test (morally-equal? #<unspecified> #<unspecified>) #t)
(test (morally-equal? (if #f #f) #<unspecified>) #t)
(test (morally-equal? #<eof> #<undefined>) #f)
(test (morally-equal? #<eof> '()) #f)
(test (morally-equal? (values) #<eof>) #f)
(test (morally-equal? #<eof> (values)) #f)
(test (morally-equal? (values) (values)) #t)
(test (morally-equal? #<eof> #<unspecified>) #f)
(test (morally-equal? (values) #<unspecified>) #t)
(test (morally-equal? #<unspecified> (values)) #t)
(test (let () (define-macro (hi a) `(+ 1 ,a)) (morally-equal? hi hi)) #t)
(test (let () (define (hi a) (+ 1 a)) (morally-equal? hi hi)) #t)
(test (let ((x (lambda* (hi (a 1)) (+ 1 a)))) (morally-equal? x x)) #t)
(test (morally-equal? ``"" '"") #t)
(test (let ((pws (make-procedure-with-setter (lambda () 1) (lambda (x) x)))) (morally-equal? pws pws)) #t)
(test (morally-equal? if :if) #f)
(test (morally-equal? (list 'abs 'cons) '(abs cons)) #t)

(let ()
  (define-macro (mac a) `(+ 1 ,a))
  (define-macro (mac1 a) `(+ 1 ,a))
  (define-macro (mac2 a) `(+ 2 ,a))
  (define-macro (mac3 a b) `(+ ,b ,a))
  (test (morally-equal? mac mac1) #t)
  (test (morally-equal? mac mac2) #f)
  (test (morally-equal? mac1 mac3) #f)
  (test (morally-equal? mac3 mac3) #t)
  (let ()
    (define-macro (mac4 a) `(+ 1 ,a))
    (test (morally-equal? mac mac4) #f))
  (define-bacro (mac5 a) `(+ 1 ,a))
  (test (morally-equal? mac mac5) #f)
  (define-bacro (mac6 a) `(+ 1 ,a))
  (test (morally-equal? mac5 mac6) #t))

(test (morally-equal? most-positive-fixnum most-positive-fixnum) #t)
(test (morally-equal? most-positive-fixnum most-negative-fixnum) #f)
(test (morally-equal? pi pi) #t)
(test (morally-equal? 9223372036854775807 9223372036854775806) #f)
(test (morally-equal? 9223372036854775807 -9223372036854775808) #f)
(test (morally-equal? -9223372036854775808 -9223372036854775808) #t)
(test (morally-equal? 123456789/2 123456789/2) #t)
(test (morally-equal? 123456789/2 123456787/2) #f)
(test (morally-equal? -123456789/2 -123456789/2) #t)
(test (morally-equal? 2/123456789 2/123456789) #t)
(test (morally-equal? -2/123456789 -2/123456789) #t)
(test (morally-equal? 2147483647/2147483646 2147483647/2147483646) #t)
(test (morally-equal? 3/4 12/16) #t)
(test (morally-equal? 1/1 1) #t)
(test (morally-equal? 312689/99532 833719/265381) #f)
(test (let ((x 3.141)) (morally-equal? x x)) #t)
(test (let ((x 1+i)) (morally-equal? x x)) #t)
(test (let* ((x 3.141) (y x)) (morally-equal? x y)) #t)
(test (let* ((x 1+i) (y x)) (morally-equal? x y)) #t)
(test (let* ((x 3/4) (y x)) (morally-equal? x y)) #t)
(test (morally-equal? .1 1/10) #t)

(test (let ((x 3.141)) (morally-equal? x x)) #t)
(test (morally-equal? 3 3) #t)
(test (morally-equal? 3 3.0) #t)
(test (morally-equal? 3.0 3.0) #t)
(test (morally-equal? 3-4i 3-4i) #t)
(test (morally-equal? 1/0 0/0) #t)
(test (morally-equal? (log 0) (log 0)) #t)
(test (morally-equal? 0/0+i 0/0+i) #t)
(test (morally-equal? 0/0+i 0/0-i) #f)

(test (morally-equal? (list 3) (list 3.0)) #t)
(test (morally-equal? (list 3.0) (list 3.0)) #t)
(test (morally-equal? (list 3-4i) (list 3-4i)) #t)
(test (morally-equal? (list 1/0) (list 0/0)) #t)
(test (morally-equal? (list (log 0)) (list (log 0))) #t)
(test (morally-equal? (list 0/0+i) (list 0/0+i)) #t)

(test (morally-equal? (vector 3) (vector 3.0)) #t)
(test (morally-equal? (vector 3.0) (vector 3.0)) #t)
(test (morally-equal? (vector 3-4i) (vector 3-4i)) #t)
(test (morally-equal? (vector 1/0) (vector 0/0)) #t)
(test (morally-equal? (vector (log 0)) (vector (log 0))) #t)
(test (morally-equal? (vector 0/0+i) (vector 0/0+i)) #t)

(test (morally-equal? (string #\c) "c") #t)
(test (morally-equal? morally-equal? morally-equal?) #t)
(test (morally-equal? (cons 1 (cons 2 3)) '(1 2 . 3)) #t)
(test (morally-equal? '() '()) #t)
(test (morally-equal? '() (list)) #t)
(test (morally-equal? (cdr '   ''0) '((quote 0))) #t)
(test (morally-equal? "\n" "\n") #t)
(test (morally-equal? #f ((lambda () #f))) #t)
(test (morally-equal? (+) 0) #t)
(test (morally-equal? (recompose 32 list '(1)) (recompose 32 list (list 1))) #t)
(test (morally-equal? (recompose 100 list '(1)) (recompose 100 list (list 1))) #t)
(test (morally-equal? (recompose 32 vector 1) (recompose 32 vector 1)) #t)
(test (morally-equal? (reinvert 32 list vector 1) (reinvert 32 list vector 1)) #t)
(test (morally-equal? (recompose 32 (lambda (a) (cons 1 a)) '()) (recompose 32 (lambda (a) (cons 1 a)) '())) #t)
(test (morally-equal? (recompose 32 (lambda (a) (list 1 a)) '()) (recompose 32 (lambda (a) (list 1 a)) '())) #t)

(test (morally-equal? "asd""asd") #t) ; is this the norm?
(let ((streq (lambda (a b) (morally-equal? a b)))) (test (streq "asd""asd") #t))

(let ((things (vector #t #f #\space '() "" 0 1 3/4 1+i 1.5 '(1 .2) '#() (vector 1) (list 1) 'f 't #\t)))
  (do ((i 0 (+ i 1)))
      ((= i (- (vector-length things) 1)))
    (do ((j (+ i 1) (+ j 1)))
	((= j (vector-length things)))
      (if (morally-equal? (vector-ref things i) (vector-ref things j))
	  (format #t ";(morally-equal? ~A ~A) -> #t?~%" (vector-ref things i) (vector-ref things j))))))

(test (morally-equal?) 'error)
(test (morally-equal? #t) 'error)
(test (morally-equal? #t #t #t) 'error)
(test (equal #t #t) 'error)

(test (call-with-exit (lambda (return) (return (morally-equal? return return)))) #t)
(test (call-with-exit (lambda (return) (call-with-exit (lambda (quit) (return (morally-equal? return quit)))))) #f)
(test (call/cc (lambda (return) (return (morally-equal? return return)))) #t)
(test (let hiho ((i 0)) (morally-equal? hiho hiho)) #t)
(test (let hiho ((i 0)) (let hoho ((i 0)) (morally-equal? hiho hoho))) #f)
(test (morally-equal? + *) #f)
(test (morally-equal? lambda lambda) #t)
(test (morally-equal? lambda lambda*) #f)
(test (morally-equal? let let) #t)
(test (morally-equal? let letrec) #f)
(test (morally-equal? define define) #t)
(test (morally-equal? + ((lambda (a) a) +)) #t)
(test (let ((x "hi")) (define (hi) x) (morally-equal? (hi) (hi))) #t)

(test (morally-equal? 
       (list "hi" (integer->char 65) 1 'a-symbol (make-vector 3) (list) (cons 1 2) abs quasiquote 3 3/4 1.0+1.0i #\f (if #f #f) #<eof> #<undefined>)
       (list "hi" (integer->char 65) 1 'a-symbol (make-vector 3) (list) (cons 1 2) abs quasiquote 3 3/4 1.0+1.0i #\f (if #f #f) #<eof> #<undefined>))
      #t)
(test (morally-equal? 
       (vector "hi" (integer->char 65) 1 'a-symbol (make-vector 3) abs quasiquote 3 3/4 1.0+1.0i #\f (if #f #f) #<eof> #<undefined>)
       (vector "hi" (integer->char 65) 1 'a-symbol (make-vector 3) abs quasiquote 3 3/4 1.0+1.0i #\f (if #f #f) #<eof> #<undefined>))
      #t)
(test (morally-equal? (make-string 3) (make-string 3)) #t)
(test (morally-equal? (make-list 3) (make-list 3)) #t)
(test (morally-equal? (make-vector 3) (make-vector 3)) #t)
(test (morally-equal? (make-random-state 100) (make-random-state 100)) #t)

(test (morally-equal? (current-input-port) (current-input-port)) #t)
(test (morally-equal? (current-input-port) (current-output-port)) #f)
(test (morally-equal? *stdin* *stderr*) #f)

(test (morally-equal? 
 (let () 
   (define-macro* (a_func (an_arg (lambda () #t))) 
     `,an_arg) 
   (a_func)) 
 (let () 
   (define-macro (a_func an_arg) 
     `,an_arg) 
   (a_func (lambda () #t))))
      #f)

(if (not with-bignums) 
    (begin
      (test (morally-equal? 0 (+ 0 5e-16)) #t)
      (test (morally-equal? 0 (- 0 1/1428571428571429)) #t)
      (test (morally-equal? 0 (+ 0 0+5e-16i)) #t)
      (test (morally-equal? 0 (+ 0 0-1/1428571428571429i)) #t)
      (test (morally-equal? 0 (+ 0 1e-11)) #f)
      (test (morally-equal? 0 0) #t)
      (test (morally-equal? 0 1/1000) #f)
      (test (morally-equal? 0 0.0) #t)
      (test (morally-equal? 0 1e-16) #t)
      (test (morally-equal? 0 0+i) #f)
      (test (morally-equal? 0 1e-16+i) #f)
      (test (morally-equal? 0 0+1e-16i) #t)
      (test (morally-equal? 0 1e-300) #t)
      (test (morally-equal? 0 0+1e-300i) #t)
      (test (morally-equal? 0 1/0) #f)
      (test (morally-equal? 0 (- 0/0)) #f)
      (test (morally-equal? 0 (log 0)) #f)
      (test (morally-equal? 1 (+ 1 5e-16)) #t)
      (test (morally-equal? 1 (- 1 1/1428571428571429)) #t)
      (test (morally-equal? 1 (+ 1 0+5e-16i)) #t)
      (test (morally-equal? 1 (+ 1 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1 (+ 1 1e-11)) #f)
      (test (morally-equal? 1 1) #t)
      (test (morally-equal? 1 1.0) #t)
      (test (morally-equal? 1 1e-16) #f)
      (test (morally-equal? 1 1e4) #f)
      (test (morally-equal? 1 0+i) #f)
      (test (morally-equal? 1 1e-16+i) #f)
      (test (morally-equal? 1 (make-rectangular 1 1/0)) #f)
      (test (morally-equal? 1 (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? 1 (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? 1000 (+ 1000 5e-16)) #t)
      (test (morally-equal? 1000 (- 1000 1/1428571428571429)) #t)
      (test (morally-equal? 1000 (+ 1000 0+5e-16i)) #t)
      (test (morally-equal? 1000 (+ 1000 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1000 (+ 1000 1e-11)) #f)
      (test (morally-equal? 1000 1000) #t)
      (test (morally-equal? 1000 1/1000) #f)
      (test (morally-equal? 1000 1e4) #f)
      (test (morally-equal? 1/1000 (+ 1/1000 5e-16)) #t)
      (test (morally-equal? 1/1000 (- 1/1000 1/1428571428571429)) #t)
      (test (morally-equal? 1/1000 (+ 1/1000 0+5e-16i)) #t)
      (test (morally-equal? 1/1000 (+ 1/1000 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1/1000 (+ 1/1000 1e-11)) #f)
      (test (morally-equal? 1/1000 0) #f)
      (test (morally-equal? 1/1000 1/1000) #t)
      (test (morally-equal? 1/1000 0.0) #f)
      (test (morally-equal? 1/1000 1e-16) #f)
      (test (morally-equal? 1/1000 1e-16+i) #f)
      (test (morally-equal? 1/1000 0+1e-16i) #f)
      (test (morally-equal? 1/1000 1e-300) #f)
      (test (morally-equal? 1/1000 0+1e-300i) #f)
      (test (morally-equal? 1/1000 1/0) #f)
      (test (morally-equal? 0.0 (+ 0.0 5e-16)) #t)
      (test (morally-equal? 0.0 (- 0.0 1/1428571428571429)) #t)
      (test (morally-equal? 0.0 (+ 0.0 0+5e-16i)) #t)
      (test (morally-equal? 0.0 (+ 0.0 0-1/1428571428571429i)) #t)
      (test (morally-equal? 0.0 (+ 0.0 1e-11)) #f)
      (test (morally-equal? 0.0 0) #t)
      (test (morally-equal? 0.0 1/1000) #f)
      (test (morally-equal? 0.0 0.0) #t)
      (test (morally-equal? 0.0 1e-16) #t)
      (test (morally-equal? 0.0 0+i) #f)
      (test (morally-equal? 0.0 1+i) #f)
      (test (morally-equal? 0.0 1e-16+i) #f)
      (test (morally-equal? 0.0 0+1e-16i) #t)
      (test (morally-equal? 0.0 1e-300) #t)
      (test (morally-equal? 0.0 0+1e-300i) #t)
      (test (morally-equal? 0.0 1/0) #f)
      (test (morally-equal? 0.0 (real-part (log 0))) #f)
      (test (morally-equal? 0.0 (- (real-part (log 0)))) #f)
      (test (morally-equal? 0.0 (- 0/0)) #f)
      (test (morally-equal? 0.0 (log 0)) #f)
      (test (morally-equal? 1.0 (+ 1.0 5e-16)) #t)
      (test (morally-equal? 1.0 (- 1.0 1/1428571428571429)) #t)
      (test (morally-equal? 1.0 (+ 1.0 0+5e-16i)) #t)
      (test (morally-equal? 1.0 (+ 1.0 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1.0 (+ 1.0 1e-11)) #f)
      (test (morally-equal? 1.0 1) #t)
      (test (morally-equal? 1.0 1.0) #t)
      (test (morally-equal? 1.0 1e-16+i) #f)
      (test (morally-equal? 1.0 0+1e-16i) #f)
      (test (morally-equal? 1.0 1e-300) #f)
      (test (morally-equal? 1.0 0+1e-300i) #f)
      (test (morally-equal? 1.0 1/0) #f)
      (test (morally-equal? 1.0 (- 0/0)) #f)
      (test (morally-equal? 1.0 (make-rectangular 1/0 1)) #f)
      (test (morally-equal? 1.0 (make-rectangular 1 1/0)) #f)
      (test (morally-equal? 1.0 (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? 1e-16 (+ 1e-16 5e-16)) #t)
      (test (morally-equal? 1e-16 (- 1e-16 1/1428571428571429)) #t)
      (test (morally-equal? 1e-16 (+ 1e-16 0+5e-16i)) #t)
      (test (morally-equal? 1e-16 (+ 1e-16 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1e-16 (+ 1e-16 1e-11)) #f)
      (test (morally-equal? 1e-16 0) #t)
      (test (morally-equal? 1e-16 1/1000) #f)
      (test (morally-equal? 1e-16 0.0) #t)
      (test (morally-equal? 1e-16 1e-16) #t)
      (test (morally-equal? 1e-16 1e-16+i) #f)
      (test (morally-equal? 1e-16 0+1e-16i) #t)
      (test (morally-equal? 1e-16 1e-300) #t)
      (test (morally-equal? 1e-16 0+1e-300i) #t)
      (test (morally-equal? 1e-16 1/0) #f)
      (test (morally-equal? 1e4 (+ 1e4 5e-16)) #t)
      (test (morally-equal? 1e4 (- 1e4 1/1428571428571429)) #t)
      (test (morally-equal? 1e4 (+ 1e4 0+5e-16i)) #t)
      (test (morally-equal? 1e4 (+ 1e4 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1e4 (+ 1e4 1e-11)) #f)
      (test (morally-equal? 1e4 1000) #f)
      (test (morally-equal? 1e4 1/1000) #f)
      (test (morally-equal? 1e4 1e-16) #f)
      (test (morally-equal? 1e4 1e4) #t)
      (test (morally-equal? 1e4 1e-16+i) #f)
      (test (morally-equal? 1e4 0+1e-16i) #f)
      (test (morally-equal? 1e4 1e-300) #f)
      (test (morally-equal? 1e4 0+1e-300i) #f)
      (test (morally-equal? 1e4 1/0) #f)
      (test (morally-equal? 0+i (+ 0+i 5e-16)) #t)
      (test (morally-equal? 0+i (- 0+i 1/1428571428571429)) #t)
      (test (morally-equal? 0+i (+ 0+i 0+5e-16i)) #t)
      (test (morally-equal? 0+i (+ 0+i 0-1/1428571428571429i)) #t)
      (test (morally-equal? 0+i (+ 0+i 1e-11)) #f)
      (test (morally-equal? 0+i 0) #f)
      (test (morally-equal? 0+i 1/1000) #f)
      (test (morally-equal? 0+i 0.0) #f)
      (test (morally-equal? 0+i 1e-16) #f)
      (test (morally-equal? 0+i 0+i) #t)
      (test (morally-equal? 0+i 1+i) #f)
      (test (morally-equal? 0+i 1e-16+i) #t)
      (test (morally-equal? 0+i 0+1e-16i) #f)
      (test (morally-equal? 0+i 1e-300) #f)
      (test (morally-equal? 0+i 0+1e-300i) #f)
      (test (morally-equal? 0+i 1/0) #f)
      (test (morally-equal? 0+i (real-part (log 0))) #f)
      (test (morally-equal? 0+i (- (real-part (log 0)))) #f)
      (test (morally-equal? 0+i (- 0/0)) #f)
      (test (morally-equal? 0+i (log 0)) #f)
      (test (morally-equal? 0+i (make-rectangular 1/0 1)) #f)
      (test (morally-equal? 0+i (make-rectangular 1 1/0)) #f)
      (test (morally-equal? 0+i (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? 0+i (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? 1+i (+ 1+i 5e-16)) #t)
      (test (morally-equal? 1+i (- 1+i 1/1428571428571429)) #t)
      (test (morally-equal? 1+i (+ 1+i 0+5e-16i)) #t)
      (test (morally-equal? 1+i (+ 1+i 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1+i (+ 1+i 1e-11)) #f)
      (test (morally-equal? 1+i 0+i) #f)
      (test (morally-equal? 1+i 1+i) #t)
      (test (morally-equal? 1+i 1e-16+i) #f)
      (test (morally-equal? 1+i 0+1e-16i) #f)
      (test (morally-equal? 1+i 1e-300) #f)
      (test (morally-equal? 1+i 0+1e-300i) #f)
      (test (morally-equal? 1e-16+i (+ 1e-16+i 5e-16)) #t)
      (test (morally-equal? 1e-16+i (- 1e-16+i 1/1428571428571429)) #t)
      (test (morally-equal? 1e-16+i (+ 1e-16+i 0+5e-16i)) #t)
      (test (morally-equal? 1e-16+i (+ 1e-16+i 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1e-16+i (+ 1e-16+i 1e-11)) #f)
      (test (morally-equal? 1e-16+i 0) #f)
      (test (morally-equal? 1e-16+i 1e-16) #f)
      (test (morally-equal? 1e-16+i 1e4) #f)
      (test (morally-equal? 1e-16+i 0+i) #t)
      (test (morally-equal? 1e-16+i 1+i) #f)
      (test (morally-equal? 1e-16+i 1e-16+i) #t)
      (test (morally-equal? 1e-16+i 0+1e-16i) #f)
      (test (morally-equal? 1e-16+i 1e-300) #f)
      (test (morally-equal? 1e-16+i 0+1e-300i) #f)
      (test (morally-equal? 1e-16+i 1/0) #f)
      (test (morally-equal? 1e-16+i (real-part (log 0))) #f)
      (test (morally-equal? 1e-16+i (- (real-part (log 0)))) #f)
      (test (morally-equal? 1e-16+i (- 0/0)) #f)
      (test (morally-equal? 1e-16+i (log 0)) #f)
      (test (morally-equal? 1e-16+i (make-rectangular 1/0 1)) #f)
      (test (morally-equal? 1e-16+i (make-rectangular 1 1/0)) #f)
      (test (morally-equal? 1e-16+i (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? 1e-16+i (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? 0+1e-16i (+ 0+1e-16i 5e-16)) #t)
      (test (morally-equal? 0+1e-16i (- 0+1e-16i 1/1428571428571429)) #t)
      (test (morally-equal? 0+1e-16i (+ 0+1e-16i 0+5e-16i)) #t)
      (test (morally-equal? 0+1e-16i (+ 0+1e-16i 0-1/1428571428571429i)) #t)
      (test (morally-equal? 0+1e-16i (+ 0+1e-16i 1e-11)) #f)
      (test (morally-equal? 0+1e-16i 0) #t)
      (test (morally-equal? 0+1e-16i 1/1000) #f)
      (test (morally-equal? 0+1e-16i 0.0) #t)
      (test (morally-equal? 0+1e-16i 1e-16) #t)
      (test (morally-equal? 0+1e-16i 0+i) #f)
      (test (morally-equal? 0+1e-16i 1+i) #f)
      (test (morally-equal? 0+1e-16i 1e-16+i) #f)
      (test (morally-equal? 0+1e-16i 0+1e-16i) #t)
      (test (morally-equal? 0+1e-16i 1e-300) #t)
      (test (morally-equal? 0+1e-16i 0+1e-300i) #t)
      (test (morally-equal? 0+1e-16i 1/0) #f)
      (test (morally-equal? 0+1e-16i (real-part (log 0))) #f)
      (test (morally-equal? 0+1e-16i (- (real-part (log 0)))) #f)
      (test (morally-equal? 0+1e-16i (- 0/0)) #f)
      (test (morally-equal? 0+1e-16i (log 0)) #f)
      (test (morally-equal? 1e-300 (+ 1e-300 5e-16)) #t)
      (test (morally-equal? 1e-300 (- 1e-300 1/1428571428571429)) #t)
      (test (morally-equal? 1e-300 (+ 1e-300 0+5e-16i)) #t)
      (test (morally-equal? 1e-300 (+ 1e-300 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1e-300 (+ 1e-300 1e-11)) #f)
      (test (morally-equal? 1e-300 0) #t)
      (test (morally-equal? 1e-300 1/1000) #f)
      (test (morally-equal? 1e-300 0.0) #t)
      (test (morally-equal? 1e-300 1e-16) #t)
      (test (morally-equal? 1e-300 1e-16+i) #f)
      (test (morally-equal? 1e-300 0+1e-16i) #t)
      (test (morally-equal? 1e-300 1e-300) #t)
      (test (morally-equal? 1e-300 0+1e-300i) #t)
      (test (morally-equal? 1e-300 1/0) #f)
      (test (morally-equal? 1e-300 (- 0/0)) #f)
      (test (morally-equal? 1e-300 (log 0)) #f)
      (test (morally-equal? 0+1e-300i (+ 0+1e-300i 5e-16)) #t)
      (test (morally-equal? 0+1e-300i (- 0+1e-300i 1/1428571428571429)) #t)
      (test (morally-equal? 0+1e-300i (+ 0+1e-300i 0+5e-16i)) #t)
      (test (morally-equal? 0+1e-300i (+ 0+1e-300i 0-1/1428571428571429i)) #t)
      (test (morally-equal? 0+1e-300i (+ 0+1e-300i 1e-11)) #f)
      (test (morally-equal? 0+1e-300i 0) #t)
      (test (morally-equal? 0+1e-300i 1000) #f)
      (test (morally-equal? 0+1e-300i 1/1000) #f)
      (test (morally-equal? 0+1e-300i 0.0) #t)
      (test (morally-equal? 0+1e-300i 1e-16) #t)
      (test (morally-equal? 0+1e-300i 0+i) #f)
      (test (morally-equal? 0+1e-300i 1e-16+i) #f)
      (test (morally-equal? 0+1e-300i 0+1e-16i) #t)
      (test (morally-equal? 0+1e-300i 1e-300) #t)
      (test (morally-equal? 0+1e-300i 0+1e-300i) #t)
      (test (morally-equal? 0+1e-300i 1/0) #f)
      (test (morally-equal? 0+1e-300i (- 0/0)) #f)
      (test (morally-equal? 1/0 (+ 1/0 5e-16)) #t)
      (test (morally-equal? 1/0 (- 1/0 1/1428571428571429)) #t)
      (test (morally-equal? 1/0 (+ 1/0 0+5e-16i)) #t)
      (test (morally-equal? 1/0 (+ 1/0 0-1/1428571428571429i)) #t)
      (test (morally-equal? 1/0 0) #f)
      (test (morally-equal? 1/0 1/0) #t)
      (test (morally-equal? 1/0 (real-part (log 0))) #f)
      (test (morally-equal? 1/0 (- (real-part (log 0)))) #f)
      (test (morally-equal? 1/0 (- 0/0)) #t)
      (test (morally-equal? 1/0 (log 0)) #f)
      (test (morally-equal? 1/0 (make-rectangular 1/0 1)) #f)
      (test (morally-equal? 1/0 (make-rectangular 1 1/0)) #f)
      (test (morally-equal? 1/0 (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? 1/0 (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? 1/0 (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? 1/0 (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? 1/0 (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? 1/0 (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (real-part (log 0)) (+ (real-part (log 0)) 5e-16)) #t)
      (test (morally-equal? (real-part (log 0)) (- (real-part (log 0)) 1/1428571428571429)) #t)
      (test (morally-equal? (real-part (log 0)) (+ (real-part (log 0)) 0+5e-16i)) #t)
      (test (morally-equal? (real-part (log 0)) (+ (real-part (log 0)) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (real-part (log 0)) 0) #f)
      (test (morally-equal? (real-part (log 0)) 1e-16+i) #f)
      (test (morally-equal? (real-part (log 0)) 0+1e-16i) #f)
      (test (morally-equal? (real-part (log 0)) 1e-300) #f)
      (test (morally-equal? (real-part (log 0)) 0+1e-300i) #f)
      (test (morally-equal? (real-part (log 0)) 1/0) #f)
      (test (morally-equal? (real-part (log 0)) (real-part (log 0))) #t)
      (test (morally-equal? (real-part (log 0)) (- (real-part (log 0)))) #f)
      (test (morally-equal? (real-part (log 0)) (- 0/0)) #f)
      (test (morally-equal? (real-part (log 0)) (log 0)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (real-part (log 0)) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (- (real-part (log 0))) (+ (- (real-part (log 0))) 5e-16)) #t)
      (test (morally-equal? (- (real-part (log 0))) (- (- (real-part (log 0))) 1/1428571428571429)) #t)
      (test (morally-equal? (- (real-part (log 0))) (+ (- (real-part (log 0))) 0+5e-16i)) #t)
      (test (morally-equal? (- (real-part (log 0))) (+ (- (real-part (log 0))) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (- (real-part (log 0))) 1e-16+i) #f)
      (test (morally-equal? (- (real-part (log 0))) 0+1e-16i) #f)
      (test (morally-equal? (- (real-part (log 0))) 1e-300) #f)
      (test (morally-equal? (- (real-part (log 0))) 0+1e-300i) #f)
      (test (morally-equal? (- (real-part (log 0))) 1/0) #f)
      (test (morally-equal? (- (real-part (log 0))) (real-part (log 0))) #f)
      (test (morally-equal? (- (real-part (log 0))) (- (real-part (log 0)))) #t)
      (test (morally-equal? (- (real-part (log 0))) (- 0/0)) #f)
      (test (morally-equal? (- (real-part (log 0))) (log 0)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (- (real-part (log 0))) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (- 0/0) (+ (- 0/0) 5e-16)) #t)
      (test (morally-equal? (- 0/0) (- (- 0/0) 1/1428571428571429)) #t)
      (test (morally-equal? (- 0/0) (+ (- 0/0) 0+5e-16i)) #t)
      (test (morally-equal? (- 0/0) (+ (- 0/0) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (- 0/0) 0) #f)
      (test (morally-equal? (- 0/0) 1e-300) #f)
      (test (morally-equal? (- 0/0) 0+1e-300i) #f)
      (test (morally-equal? (- 0/0) 1/0) #t)
      (test (morally-equal? (- 0/0) (real-part (log 0))) #f)
      (test (morally-equal? (- 0/0) (- (real-part (log 0)))) #f)
      (test (morally-equal? (- 0/0) (- 0/0)) #t)
      (test (morally-equal? (- 0/0) (log 0)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (- 0/0) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (- 0/0) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (- 0/0) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (log 0) (+ (log 0) 5e-16)) #t)
      (test (morally-equal? (log 0) (- (log 0) 1/1428571428571429)) #t)
      (test (morally-equal? (log 0) (+ (log 0) 0+5e-16i)) #t)
      (test (morally-equal? (log 0) (+ (log 0) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (log 0) 0) #f)
      (test (morally-equal? (log 0) 1/0) #f)
      (test (morally-equal? (log 0) (real-part (log 0))) #f)
      (test (morally-equal? (log 0) (- (real-part (log 0)))) #f)
      (test (morally-equal? (log 0) (- 0/0)) #f)
      (test (morally-equal? (log 0) (log 0)) #t)
      (test (morally-equal? (log 0) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (log 0) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (log 0) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (log 0) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (log 0) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (log 0) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (log 0) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (log 0) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (+ (make-rectangular 1/0 1) 5e-16)) #t)
      (test (morally-equal? (make-rectangular 1/0 1) (- (make-rectangular 1/0 1) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular 1/0 1) (+ (make-rectangular 1/0 1) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular 1/0 1) (+ (make-rectangular 1/0 1) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular 1/0 1) 0) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 1) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 1e-16+i) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 0+1e-16i) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 1e-300) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 0+1e-300i) #f)
      (test (morally-equal? (make-rectangular 1/0 1) 1/0) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (log 0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular 1/0 1)) #t)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular 1/0 1) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (+ (make-rectangular 1 1/0) 5e-16)) #t)
      (test (morally-equal? (make-rectangular 1 1/0) (- (make-rectangular 1 1/0) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular 1 1/0) (+ (make-rectangular 1 1/0) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular 1 1/0) (+ (make-rectangular 1 1/0) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular 1 1/0) 0) #f)
      (test (morally-equal? (make-rectangular 1 1/0) 1) #f)
      (test (morally-equal? (make-rectangular 1 1/0) 1e-300) #f)
      (test (morally-equal? (make-rectangular 1 1/0) 0+1e-300i) #f)
      (test (morally-equal? (make-rectangular 1 1/0) 1/0) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (log 0)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular 1 1/0)) #t)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular 1 1/0) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (+ (make-rectangular 1/0 1/0) 5e-16)) #t)
      (test (morally-equal? (make-rectangular 1/0 1/0) (- (make-rectangular 1/0 1/0) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular 1/0 1/0) (+ (make-rectangular 1/0 1/0) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular 1/0 1/0) (+ (make-rectangular 1/0 1/0) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular 1/0 1/0) 0) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) 1/0) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (log 0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular 1/0 1/0)) #t)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular 1/0 1/0) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (+ (make-rectangular (real-part (log 0)) 1/0) 5e-16)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (- (make-rectangular (real-part (log 0)) 1/0) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (+ (make-rectangular (real-part (log 0)) 1/0) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (+ (make-rectangular (real-part (log 0)) 1/0) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1000) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1/1000) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 0.0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1.0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1e-16) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1e4) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) 1/0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (log 0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular (real-part (log 0)) 1/0)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1/0) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (+ (make-rectangular 1/0 (real-part (log 0))) 5e-16)) #t)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (- (make-rectangular 1/0 (real-part (log 0))) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (+ (make-rectangular 1/0 (real-part (log 0))) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (+ (make-rectangular 1/0 (real-part (log 0))) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (log 0)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular 1/0 (real-part (log 0)))) #t)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular 1/0 (real-part (log 0))) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (+ (make-rectangular (real-part (log 0)) (real-part (log 0))) 5e-16)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (- (make-rectangular (real-part (log 0)) (real-part (log 0))) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (+ (make-rectangular (real-part (log 0)) (real-part (log 0))) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (+ (make-rectangular (real-part (log 0)) (real-part (log 0))) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) 0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) 1/0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (log 0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) (real-part (log 0))) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (+ (make-rectangular (real-part (log 0)) 1) 5e-16)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (- (make-rectangular (real-part (log 0)) 1) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (+ (make-rectangular (real-part (log 0)) 1) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (+ (make-rectangular (real-part (log 0)) 1) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) 0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) 1) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) 0+1e-300i) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) 1/0) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (log 0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular (real-part (log 0)) 1)) #t)
      (test (morally-equal? (make-rectangular (real-part (log 0)) 1) (make-rectangular 1 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (+ (make-rectangular 1 (real-part (log 0))) 5e-16)) #t)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (- (make-rectangular 1 (real-part (log 0))) 1/1428571428571429)) #t)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (+ (make-rectangular 1 (real-part (log 0))) 0+5e-16i)) #t)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (+ (make-rectangular 1 (real-part (log 0))) 0-1/1428571428571429i)) #t)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (real-part (log 0))) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (- (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (- 0/0)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (log 0)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular 1/0 1)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular 1 1/0)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular 1/0 1/0)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular (real-part (log 0)) 1/0)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular 1/0 (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular (real-part (log 0)) (real-part (log 0)))) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular (real-part (log 0)) 1)) #f)
      (test (morally-equal? (make-rectangular 1 (real-part (log 0))) (make-rectangular 1 (real-part (log 0)))) #t)
      )) ; end with-bignums


;;; ----------------
;;; try a bunch of combinations
(define old-readers *#readers*)

(set! *#readers* 
      (cons (cons #\_ (lambda (str)
			(if (string=? str "__line__")
			    (port-line-number)
			    #f)))
	    *#readers*))

(let ((lst1 '())
      (lst2 '()))
  (if (not (eq? lst1 lst2)) (format #t ";~A: nils are not eq?~%" #__line__))
  (if (not (eqv? lst1 lst2)) (format #t ";~A: nils are not eqv?~%" #__line__))
  (if (not (equal? lst1 lst2)) (format #t ";~A: nils are not equal?~%" #__line__))

  (let ((v1 (make-vector 100 #f))
	(v2 (make-vector 100 #f)))
    (if (not (equal? v1 v2)) (format #t ";~A: base vectors are not equal?~%" #__line__))

    (let ((h1 (make-hash-table))
	  (h2 (make-hash-table)))
      (if (not (equal? h1 h2)) (format #t ";~A: base hash-tables are not equal?~%" #__line__))

      (let ((e1 (augment-environment (current-environment)))
	    (e2 (augment-environment (current-environment))))
	(if (not (equal? e1 e2)) (format #t ";~A: base environments are not equal?~%" #__line__))

	(let ((ctr 0))
	  (for-each
	   (lambda (arg1 arg2)
	     ;; make sure the args are eq? to themselves
	     ;; if equal? and equal to copy place in lst1, place copy in lst2, check that they are still equal
	     ;;     similarly for vector, hash-table, envs
	   (let ((a1 arg1)
		 (a2 arg2))
	     (if (not (eq? a1 arg1)) 
		 (format #t ";~A: ~A is not eq? to itself? ~A~%" #__line__ arg1 a1))
	     (if (and (eq? a1 a2) (not (eqv? a1 a2)))
		 (format #t ";~A: ~A is eq? but not eqv? ~A~%" #__line__ a1 a2))

	     (if (equal? a1 a2)
		 (begin
		   (if (and (eq? a1 a2) (not (eqv? a1 a2))) 
		       (format #t ";~A: ~A is eq? and equal? but not eqv?? ~A~%" #__line__ a1 a2))
		   (if (not (morally-equal? a1 a2))
		       (format #t ";~A: ~A is equal? but not morally-equal? ~A~%" #__line__ a1 a2))
		   (set! lst1 (cons a1 lst1))
		   (set! lst2 (cons a2 lst2))
		   (set! (v1 ctr) a1)
		   (set! (v2 ctr) a2)
		   (let* ((sym1 (string->symbol (string-append "symbol-" (number->string ctr))))
			  (sym2 (copy sym1)))
		     (set! (h1 sym1) a1)
		     (set! (h2 sym2) a2)
		     (augment-environment! e1 (cons sym1 a1))
		     (augment-environment! e2 (cons sym2 a2))

		     (if (not (equal? lst1 lst2))
			 (begin
			   (format #t ";~A: add ~A to lists, now not equal?~%" #__line__ a1)
			   (set! lst1 (cdr lst1))
			   (set! lst2 (cdr lst2))))
		     (if (not (equal? v1 v2))
			 (begin
			   (format #t ";~A: add ~A to vectors, now not equal?~%" #__line__ a1)
			   (set! (v1 ctr) #f)
			   (set! (v2 ctr) #f)))
		     (if (not (equal? h1 h2))
			 (begin
			   (format #t ";~A: add ~A to hash-tables, now not equal?~%" #__line__ a1)
			   (set! (h1 sym1) #f)
			   (set! (h2 sym2) #f)))
		     (if (not (equal? e1 e2))
			 (begin
			   (format #t ";~A: add ~A to environments, now not equal?~%" #__line__ a1)
			   (eval `(set! ,sym1 #f) e1)
			   (eval `(set! ,sym2 #f) e2)))
		     ))
		 (begin
		   (if (eq? a1 arg1) (format #t ";~A: ~A is eq? but not equal? ~A~%" #__line__ a1 a2))
		   (if (eqv? a1 arg1) (format #t ";~A: ~A is eqv? but not equal? ~A~%" #__line__ a1 a2))
		   (format #t ";~A: ~A is not equal to ~A~%" #__line__ a1 a2)))

	     (set! ctr (+ ctr 1))))

	 (list "hi" ""
	       (integer->char 65) #\space #\newline #\null
	       1 3/4 
	       ;; 1.0 1+i pi (real-part (log 0)) 1e18
	       most-negative-fixnum most-positive-fixnum 
	       'a-symbol 
	       (make-vector 3 #f) #() #2d((1 2) (3 4))
	       abs quasiquote macroexpand (log 0) 
	       (hash-table '(a . 1) '(b . 2)) (hash-table)
	       (augment-environment (current-environment) '(a . 1)) (global-environment)
	       #f #t :hi 
	       #<eof> #<undefined> #<unspecified>
	       (make-random-state 1234)
	       (cons 1 2) '() '(1) (list (cons 1 2)) '(1 2 . 3) 
	       (let ((lst (cons 1 2))) (set-cdr! lst lst) lst)
	       )
	 (list (string #\h #\i) (string)
	       #\A #\space #\newline (integer->char 0)
	       (- 2 1) (/ 3 4) 
	       ;; 1.0 1+i pi (real-part (log 0)) 1e18
	       -9223372036854775808 9223372036854775807 
	       (string->symbol "a-symbol")
	       (vector #f #f #f) (vector)  #2d((1 2) (3 4))
	       abs quasiquote macroexpand (log 0) 
	       (let ((h (make-hash-table 31))) (set! (h 'a) 1) (set! (h 'b) 2) h) (make-hash-table 123)
	       (augment-environment (current-environment) '(a . 1)) (global-environment)
	       #f #t :hi 
	       #<eof> #<undefined> (if #f #f)
	       (make-random-state 1234)
	       '(1 . 2) (list) (list 1) (list (cons 1 2)) '(1 2 . 3) 
	       (let ((lst (cons 1 2))) (set-cdr! lst lst) lst)
	       ))
	  
	  (set! (v1 ctr) lst1)
	  (set! (v2 ctr) lst2)
	  (set! ctr (+ ctr 1))
	  (if (not (equal? v1 v2))
	      (format #t ";~A: add lists to vectors, now vectors not equal?~%" #__line__)
	      (begin
		(set! lst1 (cons v1 lst1))
		(set! lst2 (cons v2 lst2)) 
		(if (not (equal? lst1 lst2))
		    (begin
		      (format #t ";~A: add vectors to lists, now lists not equal?~%" #__line__)
		      (set! (h1 'lst1) lst1)
		      (set! (h2 'lst2) lst2)
		      (if (not (equal? h1 h2))
			  (format #t ";~A: add lists to hash-tables, not hash-tables not equal?~%" #__line__)
			  (begin
			    (set! (v1 ctr) v1)
			    (set! (v2 ctr) v2)
			    (set! ctr (+ ctr 1))
			    (if (not (equal? v1 v2))
				(format #t ";~A: add vectors to themselves, now vectors not equal?~%" #__line__))
			    (if (not (equal? lst1 lst2))
				(format #t ";~A: add vectors to themselves, now lists not equal?~%" #__line__))
			    (set! (h1 'h1) h1)
			    (set! (h2 'h2) h2)
			    (if (not (equal? h1 h2))
				(format #t ";~A: add hash-tables to themselves, not hash-tables not equal?~%" #__line__))
			    )))))))))))
(set! *#readers* old-readers)
