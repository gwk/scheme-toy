(num-test (ash #b-1100 -2) -3)
(num-test (ash #b-1100 2) -48)
(num-test (ash (ash 1 31) -31) 1)
(num-test (ash (expt 2 31) (- (expt 2 31))) 0)
(num-test (ash -0 -10) 0)
(num-test (ash -1 -12)  -1)
(num-test (ash -1 -3) -1)
(num-test (ash -1 -8) -1)
(num-test (ash -1 0) -1)
(num-test (ash -1 30) -1073741824)
(num-test (ash -1 8) -256)
(num-test (ash -129876 -1026) -1)
(num-test (ash -2 -3) -1)
(num-test (ash -3 -3) -1)
(num-test (ash -3 3) -24)
(num-test (ash -31 -100) -1)
(num-test (ash -31 -20) -1)
(num-test (ash -31 -60) -1)
(num-test (ash -31 -70) -1)
(num-test (ash -31 most-negative-fixnum) -1)
(num-test (ash 0 (expt 2 32)) 0)
(num-test (ash 0 -10) 0)
(num-test (ash 0 0) 0)
(num-test (ash 0 1) 0)
(num-test (ash 0 100) 0)
(num-test (ash 1 (- (expt 2 31))) 0)
(num-test (ash 1 (- (expt 2 32))) 0)
(num-test (ash 1 -1) 0)
(num-test (ash 1 -100) 0)
(num-test (ash 1 10) 1024)
(num-test (ash 1 31) 2147483648)
(num-test (ash 1 32) 4294967296)
(num-test (ash 1/1 10) 1024)
(num-test (ash 1024 -8) 4)
(num-test (ash 123 0) 123)
(num-test (ash 1234 -6) 19)
(num-test (ash 1234 6) 78976)
(num-test (ash 12341234 -16) 188)
(num-test (ash 12341234 6) 789838976)
(num-test (ash 2 -1) 1)
(num-test (ash 2 -2) 0)
(test (> (ash 1 30) 1) #t)
(test (> (ash 1 62) 1) #t)
(test (ash most-positive-fixnum -2) 2305843009213693951)
(test (ash most-positive-fixnum -62) 1)
(test (ash (ash most-negative-fixnum -2) 2) most-negative-fixnum)
;; (test (ash most-positive-fixnum 2) 'error) if not bignums?

(do ((i 0 (+ i 1))) 
    ((= i 15)) 
  (test (= (expt (ash 1 i) 2)
	   (ash 1 (* 2 i)) 
	   (expt 2 (* 2 i))
	   (* (- (expt 2 i)) (- (ash 1 i)))
	   (ash 2 (- (* i 2) 1)))
	#t))

(if with-bignums
    (begin
      (num-test (ash 1 48) 281474976710656)
      (num-test (ash most-positive-fixnum 2) 36893488147419103228)
      (num-test (ash 281474976710656 -48) 1)
      (num-test (ash -100000000000000000000000000000000 -100) -79)
      ;; (floor (/ -100000000000000000000000000000000 (expt 2 100))) = -79
      (num-test (ash -100000000000000000000000000000000 -200) -1)
      (num-test (ash 1 63) 9223372036854775808)
      (num-test (ash 1 64) 18446744073709551616)
      (num-test (ash 1 100) 1267650600228229401496703205376)
      (num-test (ash 18446744073709551616 -63) 2)
      (num-test (ash 1267650600228229401496703205376 -100) 1)
      (test (ash 1 89) (expt 2 89))
      (test (ash 1 0+92233720368547758081.0i) 'error)
      (test (ash 1 92233720368547758081.0) 'error)
      (test (ash 0+92233720368547758081.0i -1) 'error)
      (test (ash 92233720368547758081.0 1) 'error)
      (num-test (ash 9223372036854775807 1) 18446744073709551614)
      (num-test (ash -9223372036854775807 1) -18446744073709551614)
      ))

(test (ash 1 (expt 2 32)) 'error)
(test (ash) 'error)
(test (ash 1) 'error)
(test (ash 1 2 3) 'error)

(for-each
 (lambda (arg)
   (test (ash 1 arg) 'error)
   (test (ash arg 1) 'error))
 (list #\a #f _ht_ '#(1 2 3) 3.14 2/3 1.5+0.3i 1+i '() 'hi abs "hi" '#(()) (list 1 2 3) '(1 . 2) (lambda () 1)))

(let ()
  ;; fails if x=0: (define (2^n? x) (zero? (logand x (- x 1))))
  (define (2^n? x) (and (not (zero? x)) (zero? (logand x (- x 1)))))
  (define (2^n-1? x) (zero? (logand x (+ x 1))))
  (define (x+y x y) (- x (lognot y) 1))
  (define (0? x) (negative? (logand (lognot x) (- x 1))))
  (define (<=0? x) (negative? (logior x (- x 1))))
  (define (>=0? x) (negative? (lognot x)))
  (define (>0? x) (negative? (logand (- x) (lognot x))))
  (define-macro (<=> x y) `(begin (set! ,x (logxor ,x ,y)) (set! ,y (logxor ,y ,x)) (set! ,x (logxor ,x ,y))))
  
  (test (2^n? 32) #t)
  (test (2^n? 0) #f)
  (test (2^n? 2305843009213693952) #t)
  (test (2^n? 2305843009213693950) #f)
  (test (2^n? 17) #f)
  (test (2^n? 1) #t)
  (test (2^n-1? 31) #t)
  (test (2^n-1? 32) #f)
  (test (2^n-1? 18014398509481985) #f)
  (test (2^n-1? 18014398509481983) #t)
  (test (x+y 41 3) 44)
  (test (0? 0) #t)
  (test (0? 123) #f)
  (test (<=0? 0) #t)
  (test (<=0? -2) #t)
  (test (<=0? 2) #f)
  (test (>=0? -1) #f)
  (test (>0? 1) #t)
  (test (let ((x 1) (y 321)) (<=> x y) (list x y)) (list 321 1))
  )

(let ()

  (define (bit-reverse int)
    ;; from "Hacker's Delight" Henry Warren p101, but 64 bit
    (let ((x int))
      (set! x (logior (ash (logand x #x5555555555555555) 1)
		      (ash (logand x #xAAAAAAAAAAAAAAAA) -1)))
      (set! x (logior (ash (logand x #x3333333333333333) 2)
		      (ash (logand x #xCCCCCCCCCCCCCCCC) -2)))
      (set! x (logior (ash (logand x #x0F0F0F0F0F0F0F0F) 4)
		      (ash (logand x #xF0F0F0F0F0F0F0F0) -4)))
      (set! x (logior (ash (logand x #x00FF00FF00FF00FF) 8)
		      (ash (logand x #xFF00FF00FF00FF00) -8)))
      (set! x (logior (ash (logand x #x0000FFFF0000FFFF) 16)
		      (ash (logand x #xFFFF0000FFFF0000) -16)))
      (logior (ash (logand x #x00000000FFFFFFFF) 32)
	      (ash (logand x #xFFFFFFFF00000000) -32))))

  (let ((x (ash (bit-reverse #x01234566) -32)))
    (num-test x  1721943168)))


;; from CL spec
(test (let ((str ""))
	(let ((show (lambda (m x y)
		      (set! str (string-append str (format #f "[m = #o~6,'0O, x = #o~6,'0O, y = #o~6,'0O] " m x y))))))
	  (let ((m #o007750)
		(x #o452576)
		(y #o317407))
	    (show m x y)
	    (let ((z (logand (logxor x y) m)))
	      (set! x (logxor z x))
	      (set! y (logxor z y))
	      (show m x y)))) str)
      "[m = #o007750, x = #o452576, y = #o317407] [m = #o007750, x = #o457426, y = #o312557] ")


#|
    (DEFUN HAULONG (ARG)
      (INTEGER-LENGTH (ABS ARG)))

    (DEFUN HAIPART (X N)
      (SETQ X (ABS X))
      (IF (MINUSP N) 
          (LOGAND X (- (ASH 1 (- N)) 1))
          (ASH X (MIN (- N (HAULONG X)) 0))))
|#
