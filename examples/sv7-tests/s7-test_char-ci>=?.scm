(test (char-ci>=? #\A #\B) #f)
(test (char-ci>=? #\a #\B) #f)
(test (char-ci>=? #\A #\b) #f)
(test (char-ci>=? #\a #\b) #f)
(test (char-ci>=? #\9 #\0) #t)
(test (char-ci>=? #\A #\A) #t)
(test (char-ci>=? #\A #\a) #t)
(test (char-ci>=? #\Y #\_) #f)
(test (char-ci>=? #\` #\S) #t)
(test (char-ci>=? #\[ #\Y) #t)
(test (char-ci>=? #\t #\_) #f)
(test (char-ci>=? #\a #\]) #f)
(test (char-ci>=? #\z #\^) #f)

(test (char-ci>=? #\d #\D #\d #\d) #t)
(test (char-ci>=? #\d #\d #\X #\d) #f)
(test (char-ci>=? #\d #\Y #\x #\c) #f)
(test (apply char-ci>=? cap-a-to-z) #f)
(test (apply char-ci>=? mixed-a-to-z) #f)
(test (apply char-ci>=? (reverse mixed-a-to-z)) #t)
(test (apply char-ci>=? (reverse mixed-a-to-z)) #t)
(test (apply char-ci>=? digits) #f)
(test (char-ci>=? #\d #\c #\d) #f)
(test (char-ci>=? #\b #\c #\a) #f)
(test (char-ci>=? #\d #\D #\a) #t)
(test (char-ci>=? #\\ #\J #\+) #t)

(test (char-ci>=? #\a #\b "hi") 'error)
(test (char-ci>=? #\a #\b 0) 'error)

) ; end let with a-to-z
