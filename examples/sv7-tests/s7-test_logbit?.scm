(test (logbit? 0 1) #f)
(test (logbit? 0 0) #f)
(test (logbit? 0 -1) 'error)
(test (logbit? #b101 1) #f)
(test (logbit? #b101 0) #t)
(test (logbit? 1 3 6) 'error)
(test (logbit? -1 3) #t)
(test (logbit? -1 0) #t)
(test (logbit? -6 0) #f)
(test (logbit? -6 3) #t)
(test (logbit? 4 1) #f)
(test (logbit? 1 1) #f)
(test (logbit? 1 0) #t)
(test (logbit? -9223372036854775808 1) #f)
(test (logbit? most-positive-fixnum 31) #t)
(test (logbit? most-positive-fixnum 68) #f)
(test (logbit? most-positive-fixnum 63) #f)
(test (logbit? most-positive-fixnum 62) #t)
(test (logbit? (ash 1 12) 12) #t)
(test (logbit? (ash 1 12) 11) #f)
(test (logbit? (ash 1 32) 32) #t)
(test (logbit? (ash 1 31) 31) #t)
(test (logbit? (ash 1 31) 30) #f)
(test (logbit? (ash 1 31) 32) #f)
(test (logbit? (ash 1 32) 31) #f)
(test (logbit? (ash 1 62) 62) #t)
(test (logbit? (ash 1 62) 61) #f)
(test (logbit? -1 most-negative-fixnum) 'error)
(test (logbit? most-negative-fixnum 63) #t)
(test (logbit? most-negative-fixnum 62) #f)
(test (logbit? -31 63) #t)
(test (logbit? 1 most-positive-fixnum) #f)
(test (logbit? 0 most-positive-fixnum) #f)
(test (logbit? -1 most-positive-fixnum) #t)
(test (logbit? -1 64) #t)
(test (logbit? 1 64) #f)

;;; (test (logbit? most-negative-fixnum most-positive-fixnum) #t) ;??
(test (logbit? most-negative-fixnum most-negative-fixnum) 'error)
(test (logbit? most-positive-fixnum most-positive-fixnum) #f)
(test (logbit? (ash most-negative-fixnum 1) 1) #f)

(if with-bignums
    (begin
      (test (logbit? (ash 1 64) 64) #t)
      (test (logbit? (ash 1 64) 63) #f)
      (test (logbit? most-negative-fixnum 63) #t)
      (test (logbit? (bignum "-1") 64) #t)
      ))

(test (logbit? 0 1.0) 'error)
(test (logbit? 1+i) 'error)
(test (logbit? 1+i 0) 'error)
(test (logbit? 0 1/2) 'error)
(test (logbit? 1.0 0) 'error)
(test (logbit? 1/2 0) 'error)
(test (logbit? 0 #\a) 'error)
(test (logbit? 0 "hi") 'error)
(test (logbit? #f '()) 'error)
(test (logbit?) 'error)
(test (logbit? 0) 'error)

(do ((i 0 (+ i 1))) 
    ((= i 100)) 
  (let ((x (random most-positive-fixnum)) ; or most-negative-fixnum
	(index (random 63))) 
    (let ((on? (logbit? x index))
	  (ash? (not (zero? (logand x (ash 1 index))))))
      (if (not (eq? on? ash?))
	  (format #t "(logbit? ~A ~A): ~A ~A~%" x index on? ash?)))))
