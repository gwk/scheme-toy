(test (sort! '(2 3) <) '(2 3))
(test (sort! '(3 2) <) '(2 3))
(test (sort! '(12 3) <) '(3 12))

(test (sort! '(1 2 3) <) '(1 2 3))
(test (sort! '(1 3 2) <) '(1 2 3))
(test (sort! '(2 1 3) <) '(1 2 3))
(test (sort! '(2 3 1) <) '(1 2 3))
(test (sort! '(3 1 2) <) '(1 2 3))
(test (sort! '(3 2 1) <) '(1 2 3))

(test (sort! '(1 2 3) (lambda (a b) (> a b))) '(3 2 1))
(test (sort! #(2 3) <) #(2 3))
(test (sort! #(12 3) <) #(3 12))

(test (sort! #(1 2 3) <) #(1 2 3))
(test (sort! #(1 3 2) <) #(1 2 3))
(test (sort! #(2 1 3) <) #(1 2 3))
(test (sort! #(2 3 1) <) #(1 2 3))
(test (sort! #(3 1 2) <) #(1 2 3))
(test (sort! #(3 2 1) <) #(1 2 3))

(test (sort! #(1 2 3 4) <) #(1 2 3 4))
(test (sort! #(1 2 4 3) <) #(1 2 3 4))
(test (sort! #(1 3 2 4) <) #(1 2 3 4))
(test (sort! #(1 3 4 2) <) #(1 2 3 4))
(test (sort! #(1 4 2 3) <) #(1 2 3 4))
(test (sort! #(1 4 3 2) <) #(1 2 3 4))
(test (sort! #(2 1 3 4) <) #(1 2 3 4))
(test (sort! #(2 1 4 3) <) #(1 2 3 4))
(test (sort! #(2 3 4 1) <) #(1 2 3 4))
(test (sort! #(2 3 1 4) <) #(1 2 3 4))
(test (sort! #(2 4 3 1) <) #(1 2 3 4))
(test (sort! #(2 4 1 3) <) #(1 2 3 4))
(test (sort! #(3 1 2 4) <) #(1 2 3 4))
(test (sort! #(3 1 4 2) <) #(1 2 3 4))
(test (sort! #(3 2 4 1) <) #(1 2 3 4))
(test (sort! #(3 2 1 4) <) #(1 2 3 4))
(test (sort! #(3 4 1 2) <) #(1 2 3 4))
(test (sort! #(3 4 2 1) <) #(1 2 3 4))
(test (sort! #(4 1 2 3) <) #(1 2 3 4))
(test (sort! #(4 1 3 2) <) #(1 2 3 4))
(test (sort! #(4 2 1 3) <) #(1 2 3 4))
(test (sort! #(4 2 3 1) <) #(1 2 3 4))
(test (sort! #(4 3 2 1) <) #(1 2 3 4))
(test (sort! #(4 3 1 2) <) #(1 2 3 4))

(let ((f (lambda (a b) 
	   (< (car a) (car b)))))
  (test (sort! (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 1 "1") (cons 2 "2") (cons 4 "4") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 1 "1") (cons 3 "3") (cons 2 "2") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 1 "1") (cons 3 "3") (cons 4 "4") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 1 "1") (cons 4 "4") (cons 2 "2") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 1 "1") (cons 4 "4") (cons 3 "3") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 1 "1") (cons 3 "3") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 1 "1") (cons 4 "4") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 3 "3") (cons 4 "4") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 3 "3") (cons 1 "1") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 4 "4") (cons 3 "3") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 2 "2") (cons 4 "4") (cons 1 "1") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 1 "1") (cons 2 "2") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 1 "1") (cons 4 "4") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 2 "2") (cons 4 "4") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 2 "2") (cons 1 "1") (cons 4 "4")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 4 "4") (cons 1 "1") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 3 "3") (cons 4 "4") (cons 2 "2") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 1 "1") (cons 2 "2") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 1 "1") (cons 3 "3") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 2 "2") (cons 1 "1") (cons 3 "3")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 2 "2") (cons 3 "3") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 3 "3") (cons 2 "2") (cons 1 "1")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4")))
  (test (sort! (list (cons 4 "4") (cons 3 "3") (cons 1 "1") (cons 2 "2")) f) (list (cons 1 "1") (cons 2 "2") (cons 3 "3") (cons 4 "4"))))

(test (sort! #(5 1 2 3 4) <) #(1 2 3 4 5))
(test (sort! #(5 1 2 4 3) <) #(1 2 3 4 5))
(test (sort! #(5 1 3 2 4) <) #(1 2 3 4 5))
(test (sort! #(5 1 3 4 2) <) #(1 2 3 4 5))
(test (sort! #(5 1 4 2 3) <) #(1 2 3 4 5))
(test (sort! #(5 1 4 3 2) <) #(1 2 3 4 5))
(test (sort! #(5 2 1 3 4) <) #(1 2 3 4 5))
(test (sort! #(5 2 1 4 3) <) #(1 2 3 4 5))
(test (sort! #(5 2 3 4 1) <) #(1 2 3 4 5))
(test (sort! #(5 2 3 1 4) <) #(1 2 3 4 5))
(test (sort! #(5 2 4 3 1) <) #(1 2 3 4 5))
(test (sort! #(5 2 4 1 3) <) #(1 2 3 4 5))
(test (sort! #(5 3 1 2 4) <) #(1 2 3 4 5))
(test (sort! #(5 3 1 4 2) <) #(1 2 3 4 5))
(test (sort! #(5 3 2 4 1) <) #(1 2 3 4 5))
(test (sort! #(5 3 2 1 4) <) #(1 2 3 4 5))
(test (sort! #(5 3 4 1 2) <) #(1 2 3 4 5))
(test (sort! #(5 3 4 2 1) <) #(1 2 3 4 5))
(test (sort! #(5 4 1 2 3) <) #(1 2 3 4 5))
(test (sort! #(5 4 1 3 2) <) #(1 2 3 4 5))
(test (sort! #(5 4 2 1 3) <) #(1 2 3 4 5))
(test (sort! #(5 4 2 3 1) <) #(1 2 3 4 5))
(test (sort! #(5 4 3 2 1) <) #(1 2 3 4 5))
(test (sort! #(5 4 3 1 2) <) #(1 2 3 4 5))
(test (sort! #(1 5 2 3 4) <) #(1 2 3 4 5))
(test (sort! #(1 5 2 4 3) <) #(1 2 3 4 5))
(test (sort! #(1 5 3 2 4) <) #(1 2 3 4 5))
(test (sort! #(1 5 3 4 2) <) #(1 2 3 4 5))
(test (sort! #(1 5 4 2 3) <) #(1 2 3 4 5))
(test (sort! #(1 5 4 3 2) <) #(1 2 3 4 5))
(test (sort! #(2 5 1 3 4) <) #(1 2 3 4 5))
(test (sort! #(2 5 1 4 3) <) #(1 2 3 4 5))
(test (sort! #(2 5 3 4 1) <) #(1 2 3 4 5))
(test (sort! #(2 5 3 1 4) <) #(1 2 3 4 5))
(test (sort! #(2 5 4 3 1) <) #(1 2 3 4 5))
(test (sort! #(2 5 4 1 3) <) #(1 2 3 4 5))
(test (sort! #(3 5 1 2 4) <) #(1 2 3 4 5))
(test (sort! #(3 5 1 4 2) <) #(1 2 3 4 5))
(test (sort! #(3 5 2 4 1) <) #(1 2 3 4 5))
(test (sort! #(3 5 2 1 4) <) #(1 2 3 4 5))
(test (sort! #(3 5 4 1 2) <) #(1 2 3 4 5))
(test (sort! #(3 5 4 2 1) <) #(1 2 3 4 5))
(test (sort! #(4 5 1 2 3) <) #(1 2 3 4 5))
(test (sort! #(4 5 1 3 2) <) #(1 2 3 4 5))
(test (sort! #(4 5 2 1 3) <) #(1 2 3 4 5))
(test (sort! #(4 5 2 3 1) <) #(1 2 3 4 5))
(test (sort! #(4 5 3 2 1) <) #(1 2 3 4 5))
(test (sort! #(4 5 3 1 2) <) #(1 2 3 4 5))
(test (sort! #(1 2 5 3 4) <) #(1 2 3 4 5))
(test (sort! #(1 2 5 4 3) <) #(1 2 3 4 5))
(test (sort! #(1 3 5 2 4) <) #(1 2 3 4 5))
(test (sort! #(1 3 5 4 2) <) #(1 2 3 4 5))
(test (sort! #(1 4 5 2 3) <) #(1 2 3 4 5))
(test (sort! #(1 4 5 3 2) <) #(1 2 3 4 5))
(test (sort! #(2 1 5 3 4) <) #(1 2 3 4 5))
(test (sort! #(2 1 5 4 3) <) #(1 2 3 4 5))
(test (sort! #(2 3 5 4 1) <) #(1 2 3 4 5))
(test (sort! #(2 3 5 1 4) <) #(1 2 3 4 5))
(test (sort! #(2 4 5 3 1) <) #(1 2 3 4 5))
(test (sort! #(2 4 5 1 3) <) #(1 2 3 4 5))
(test (sort! #(3 1 5 2 4) <) #(1 2 3 4 5))
(test (sort! #(3 1 5 4 2) <) #(1 2 3 4 5))
(test (sort! #(3 2 5 4 1) <) #(1 2 3 4 5))
(test (sort! #(3 2 5 1 4) <) #(1 2 3 4 5))
(test (sort! #(3 4 5 1 2) <) #(1 2 3 4 5))
(test (sort! #(3 4 5 2 1) <) #(1 2 3 4 5))
(test (sort! #(4 1 5 2 3) <) #(1 2 3 4 5))
(test (sort! #(4 1 5 3 2) <) #(1 2 3 4 5))
(test (sort! #(4 2 5 1 3) <) #(1 2 3 4 5))
(test (sort! #(4 2 5 3 1) <) #(1 2 3 4 5))
(test (sort! #(4 3 5 2 1) <) #(1 2 3 4 5))
(test (sort! #(4 3 5 1 2) <) #(1 2 3 4 5))
(test (sort! #(1 2 3 5 4) <) #(1 2 3 4 5))
(test (sort! #(1 2 4 5 3) <) #(1 2 3 4 5))
(test (sort! #(1 3 2 5 4) <) #(1 2 3 4 5))
(test (sort! #(1 3 4 5 2) <) #(1 2 3 4 5))
(test (sort! #(1 4 2 5 3) <) #(1 2 3 4 5))
(test (sort! #(1 4 3 5 2) <) #(1 2 3 4 5))
(test (sort! #(2 1 3 5 4) <) #(1 2 3 4 5))
(test (sort! #(2 1 4 5 3) <) #(1 2 3 4 5))
(test (sort! #(2 3 4 5 1) <) #(1 2 3 4 5))
(test (sort! #(2 3 1 5 4) <) #(1 2 3 4 5))
(test (sort! #(2 4 3 5 1) <) #(1 2 3 4 5))
(test (sort! #(2 4 1 5 3) <) #(1 2 3 4 5))
(test (sort! #(3 1 2 5 4) <) #(1 2 3 4 5))
(test (sort! #(3 1 4 5 2) <) #(1 2 3 4 5))
(test (sort! #(3 2 4 5 1) <) #(1 2 3 4 5))
(test (sort! #(3 2 1 5 4) <) #(1 2 3 4 5))
(test (sort! #(3 4 1 5 2) <) #(1 2 3 4 5))
(test (sort! #(3 4 2 5 1) <) #(1 2 3 4 5))
(test (sort! #(4 1 2 5 3) <) #(1 2 3 4 5))
(test (sort! #(4 1 3 5 2) <) #(1 2 3 4 5))
(test (sort! #(4 2 1 5 3) <) #(1 2 3 4 5))
(test (sort! #(4 2 3 5 1) <) #(1 2 3 4 5))
(test (sort! #(4 3 2 5 1) <) #(1 2 3 4 5))
(test (sort! #(4 3 1 5 2) <) #(1 2 3 4 5))
(test (sort! #(1 2 3 4 5) <) #(1 2 3 4 5))
(test (sort! #(1 2 4 3 5) <) #(1 2 3 4 5))
(test (sort! #(1 3 2 4 5) <) #(1 2 3 4 5))
(test (sort! #(1 3 4 2 5) <) #(1 2 3 4 5))
(test (sort! #(1 4 2 3 5) <) #(1 2 3 4 5))
(test (sort! #(1 4 3 2 5) <) #(1 2 3 4 5))
(test (sort! #(2 1 3 4 5) <) #(1 2 3 4 5))
(test (sort! #(2 1 4 3 5) <) #(1 2 3 4 5))
(test (sort! #(2 3 4 1 5) <) #(1 2 3 4 5))
(test (sort! #(2 3 1 4 5) <) #(1 2 3 4 5))
(test (sort! #(2 4 3 1 5) <) #(1 2 3 4 5))
(test (sort! #(2 4 1 3 5) <) #(1 2 3 4 5))
(test (sort! #(3 1 2 4 5) <) #(1 2 3 4 5))
(test (sort! #(3 1 4 2 5) <) #(1 2 3 4 5))
(test (sort! #(3 2 4 1 5) <) #(1 2 3 4 5))
(test (sort! #(3 2 1 4 5) <) #(1 2 3 4 5))
(test (sort! #(3 4 1 2 5) <) #(1 2 3 4 5))
(test (sort! #(3 4 2 1 5) <) #(1 2 3 4 5))
(test (sort! #(4 1 2 3 5) <) #(1 2 3 4 5))
(test (sort! #(4 1 3 2 5) <) #(1 2 3 4 5))
(test (sort! #(4 2 1 3 5) <) #(1 2 3 4 5))
(test (sort! #(4 2 3 1 5) <) #(1 2 3 4 5))
(test (sort! #(4 3 2 1 5) <) #(1 2 3 4 5))
(test (sort! #(4 3 1 2 5) <) #(1 2 3 4 5))

(test (sort! #(3 1 2 1 4 1) <) #(1 1 1 2 3 4))
(test (sort! #(1 1 1) <) #(1 1 1))
(test (sort! #(1 2 3) (lambda (a b) (> a b))) #(3 2 1))
(test (equal? (sort! (list 3 4 8 2 0 1 5 9 7 6) <) (list 0 1 2 3 4 5 6 7 8 9)) #t)
(test (equal? (sort! (list 3 4 8 2 0 1 5 9 7 6) (lambda (a b) (< a b))) (list 0 1 2 3 4 5 6 7 8 9)) #t)
(test (equal? (sort! (list) <) '()) #t)
(test (equal? (sort! (list 1) <) '(1)) #t)
(test (equal? (sort! (list 1 1 1) <) '(1 1 1)) #t)
(test (equal? (sort! (list 0 1 2 3 4 5 6 7 8 9) <) '(0 1 2 3 4 5 6 7 8 9)) #t)
(test (equal? (sort! (list #\a #\l #\o #\h #\a) char<?) '(#\a #\a #\h #\l #\o)) #t)
(test (equal? (sort! (list "tic" "tac" "toe") string<?) '("tac" "tic" "toe")) #t)
(test (equal? (sort! (list 3 4 8 2 0 1 5 9 7 6) >) (reverse (list 0 1 2 3 4 5 6 7 8 9))) #t)
(test (equal? (sort! '((3 . 1) (2 . 8) (5 . 9) (4 . 7) (6 . 0)) (lambda (a b) (< (car a) (car b)))) '((2 . 8) (3 . 1) (4 . 7) (5 . 9) (6 . 0))) #t)
(test (equal? (sort! '((3 . 1) (2 . 8) (5 . 9) (4 . 7) (6 . 0)) (lambda (a b) (< (cdr a) (cdr b)))) '((6 . 0) (3 . 1) (4 . 7) (2 . 8) (5 . 9))) #t)
(test (equal? (sort! (list (list 1 2) (list 4 3 2) (list) (list 1 2 3 4)) (lambda (a b) (> (length a) (length b)))) '((1 2 3 4) (4 3 2) (1 2) ())) #t)
(test (equal? (sort! '((1 2 3) (4 5 6) (7 8 9)) (lambda (a b) (> (car a) (car b)))) '((7 8 9) (4 5 6) (1 2 3))) #t)
(test (equal? (sort! (list #\b #\A #\B #\a #\c #\C) char<?) '(#\A #\B #\C #\a #\b #\c)) #t)
(test (equal? (sort! (list (list 'u 2) (list 'i 1) (list 'a 7) (list 'k 3) (list 'c 4) (list 'b 6))
		     (lambda (a b) (< (cadr a) (cadr b))))
	      '((i 1) (u 2) (k 3) (c 4) (b 6) (a 7)))
      #t)
(test (equal? (sort! (sort! '(1 2 3) >) <) '(1 2 3)) #t)
(test (sort! #2d((1 2) (3 4)) >) #2D((4 3) (2 1))) ; ?!?
(test (sort! #2d((1 4) (3 2)) >) #2D((4 3) (2 1))) ; ??!!?? this is not what anyone would expect
(test (sort! '(3 2 1) (lambda (a b c) #f)) 'error)
(test (sort! '(3 2 1) (lambda* (a b c) (< a b))) '(1 2 3))
(test (sort! '(3 2 1) (lambda (a b . c) (< a b))) '(1 2 3))
(test (sort! '(3 2 1) (lambda (a) #f)) 'error)
(test (sort! '(3 2 1) (lambda* (a) #f)) 'error)
(test (sort! '(3 1 2 4) (lambda args (< (car args) (cadr args)))) '(1 2 3 4))
;(test (vector? (sort! (symbol-table) (lambda (a b) (< (length a) (length b))))) #t) ; (symbol-table) copies the table
(test (sort! (global-environment) <) 'error)
(test (sort! () #f) 'error)

(test (equal? (sort! (vector 3 4 8 2 0 1 5 9 7 6) <) (vector 0 1 2 3 4 5 6 7 8 9)) #t)
(test (equal? (sort! '#() <) '#()) #t)
(test (sort! '(1 2 . 3) <) 'error)
(test (sort! #(1 3 8 7 5 6 4 2) (lambda (a b) (if (even? a) (or (odd? b) (< a b)) (and (odd? b) (< a b))))) #(2 4 6 8 1 3 5 7))
(let ((ninf (real-part (log 0.0))) (pinf (- (real-part (log 0.0))))) (test (sort! (list pinf 0.0 ninf) <) (list ninf 0.0 pinf)))
(test (sort! '(1 1 1) <) '(1 1 1))

(test (call/cc (lambda (return) (sort! '(1 2 3) (lambda (a b) (return "oops"))))) "oops")
(let ((p1 (make-procedure-with-setter (lambda (a b) (< a b)) (lambda (a b) (error 'oops)))))
  (test (sort! '(3 1 2 4) p1) '(1 2 3 4)))
(let ((p1 (make-procedure-with-setter (lambda* (a (b 2)) (< a b)) (lambda (a b) (error 'oops)))))
  (test (sort! '(3 1 2 4) p1) '(1 2 3 4)))
(let ((p1 (make-procedure-with-setter (lambda args (< (car args) (cadr args))) (lambda (a b) (error 'oops)))))
  (test (sort! '(3 1 2 4) p1) '(1 2 3 4)))

(test (let ((v (make-vector 1000)))
	(do ((i 0 (+ i 1)))
	    ((= i 1000))
	  (vector-set! v i (random 100.0)))
	(set! v (sort! v >))
	(call-with-exit
	 (lambda (return)
	   (do ((i 0 (+ i 1)))
	       ((= i 999) #t)
	     (if (< (v i) (v (+ i 1)))
		 (begin
		   (format #t "random vals after sort: ~A ~A~%" (v i) (v (+ i 1)))
		   (return #f)))))))
      #t)

(let ((v ()))
  (do ((i 0 (+ i 1)))
      ((= i 1000))
    (set! v (cons (random 100.0) v)))
  (set! v (sort! v >))
  (if (not (apply >= v))
      (format #t ";sort!: v not sorted by >: ~A~%" )))


(test (sort! (list 3 2 1) (lambda (m n) (let ((vals (sort! (list m n) <))) (< m n)))) '(1 2 3))

(test (let ((lst '()))
	(do ((i 0 (+ i 1)))
	    ((= i 4))
	  (set! lst (cons (random 1.0) lst)))
	(let ((vals (sort! lst (lambda (m n)
				 (let ((lst1 (list 1 2 3)))
				   (sort! lst1 <))
				 (< m n)))))
	  (apply < vals)))
      #t)


(let ((v (make-vector 8)))
  (do ((i 0 (+ i 1)))
      ((= i 10))
    (do ((k 0 (+ k 1)))
	((= k 8))
      (set! (v k) (- (random 1.0) 0.5)))
    (let ((v1 (copy v)))
      (sort! v <)
      (if (not (apply < (vector->list v)))
	  (format #t ";(sort! ~A <) -> ~A?" v1 v)))))

(test (sort!) 'error)
(test (sort! '(1 2 3) < '(3 2 1)) 'error)
(test (sort! '(1 2 3)) 'error)
(test (sort! '(1 2 3) 1) 'error)
(test (sort! '(1 2 3) < <) 'error)
(test (sort! (cons 3 2) <) 'error)
(test (sort! (list 1 0+i) <) 'error)
(test (sort! (list "hi" "ho") <) 'error)
(test (sort! '(1 2 #t) <) 'error)
(test (sort! '(1 2 . #t) <) 'error)
(test (sort! '(#\c #\a #\b) <) 'error)
(test (sort! (begin) if) 'error)

(test (sort! (list) <) '())
(test (sort! (vector) <) #())
(test (sort! (list #\a) <) '(#\a)) ; I guess this is reasonable
(test (sort! (list #("hi")) <) '(#("hi")))
(test (sort! (append (sort! (append (sort! () <) ()) <) ()) <) '())
(test (sort! (append (sort! (append (sort! '(1 2) <) '(1 2)) <) '(1 2)) <) '(1 1 1 2 2 2))
(test (let ((lst (list 3 1 12 4 1)))
      (sort! lst (lambda (a b)
                   (let ((val (map (lambda (n) (+ n 1)) (list a b))))
                     (apply < val)))))
      '(1 1 3 4 12))
(test (sort! '(#\c #\a #\b) (lambda (a b) (string<? (string a) (string b)))) '(#\a #\b #\c))

(for-each
 (lambda (arg)
   (test (sort! arg <) 'error)
   (test (sort! () arg) 'error))
 (list -1 #\a 1 0 "" "hiho" (make-hash-table) :hi 'a-symbol 3.14 3/4 1.0+1.0i #f #t))

(for-each
 (lambda (arg)
   (test (sort! '(1 2 3) arg) 'error))
 (list -1 #\a 1 0 'a-symbol 3.14 3/4 1.0+1.0i #f #t #(1) '(1) "hi" abs :hi))

(test (sort! '(1 2 "hi" 3) <) 'error)
(test (sort! '(1 -2 "hi" 3) (lambda (a b) 
			     (let ((a1 (if (number? a) a (length a)))
				   (b1 (if (number? b) b (length b))))
			       (< a1 b1))))
      '(-2 1 "hi" 3))

(let ((ok #f))
  (catch #t
	 (lambda ()
	   (dynamic-wind
	       (lambda () #f)
	       (lambda () (sort! '(1 2 "hi" 3) <))
	       (lambda () (set! ok #t))))
	 (lambda args 'error))
  (if (not ok) (format #t "dynamic-wind out of sort! skipped cleanup?~%")))


(let ((lst (list 1 2 3 9 8 7)))
  (let ((val (catch #t
		    (lambda ()
		      (sort! (copy lst)
			     (lambda (a b)
			       (if (< a b) (error 'sort-error "a < b"))
			       #t)))
		    (lambda args (car args)))))
    (if (not (eq? val 'sort-error))
	(format #t ";sort! with error: ~A~%" val)))

  (let ((val (call-with-exit
	      (lambda (return)
		(sort! (copy lst)
		       (lambda (a b)
			 (if (< a b) (return 'sort-error))
			 #t))))))
    (if (not (eq? val 'sort-error))
	(format #t ";sort! call-with-exit: ~A~%" val)))

  (let ((val (call/cc
	      (lambda (return)
		(sort! (copy lst)
		       (lambda (a b)
			 (if (< a b) (return 'sort-error))
			 #t))))))
    (if (not (eq? val 'sort-error))
	(format #t ";sort! call/cc: ~A~%" val)))
  )

(let ((old-safety *safety*))
  (set! *safety* 1)
  (test (sort! #(1 2 3) (lambda (a b) (and #t (= a b)))) 'error)
  ;(test (* 524288 19073486328125) 'error)  ; maybe someday...
  (set! *safety* old-safety))
