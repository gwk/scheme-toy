(num-test (* 0-2i (log 0+i)) pi)	
(num-test (* 2  0+i (log (/ 1-i 1+i))) pi)
(num-test (+ 100 (expt 10.0 15) (- (expt 10.0 15))) 100.0)
(num-test (/ (log -1) (sqrt -1)) pi)
(num-test (/ (log -8) (log 2)) 3+4.5323601418272i)
(num-test (/ 53453 (log 53453)) 4910.0000012208)
(num-test (exp (log (expt 10.0 -16))) 1e-16)
(num-test (exp (log (expt 10.0 -36))) 1e-36)
(num-test (exp (log (expt 10.0 16))) 1e16)
(num-test (exp (log (expt 10.0 36))) 1e36)
(num-test (exp (log 1000)) 1000.0)
(num-test (exp (log 1000000)) 1000000.0)
(num-test (exp (log 1000000000)) 1000000000.0)
(num-test (exp (log 8)) 8.0)
(num-test (expt (+ 1 1e-10) (log 100.0 (+ 1 1e-10))) 100.0)
(num-test (expt (+ 1 1e-15) (log 100.0 (+ 1 1e-15))) 100.0) ; 16 doesn't work if not gmp
(num-test (expt -2.0 0.13926097063622-0.63118087262379i) 8.0)
(num-test (expt -2.0 0.26160508088635-0.052598406051983i) 1.0+i)
(num-test (expt 1.0+i 0.97790391649038-2.2161063668189i) 8.0)
(num-test (log (/ (+ 1 (sqrt 5)) 2)) (acosh (/ (sqrt 5) 2)))
(num-test (log (exp 0.0000001)) 0.0000001)
(num-test (log (exp 0.0001)) 0.0001)
(num-test (log (exp 0.1)) 0.1)
(num-test (log (exp 8)) 8.0)
(num-test (log (expt 2 1022)) 7.083964185322641062244112281302564525734E2)
(num-test (log (expt 2 125)) 8.664339756999316367715401518227207100938E1)
(num-test (log (expt 3/2 10) 3/2) 10.0)
(num-test (log (log (log -1))) 0.66457192224882+0.9410294873126i)
(num-test (log (sqrt (- (expt 10 17) 1))) 1.957197329044938830915292736481709573957E1)
(num-test (log (sqrt (- (expt 10 20) 1))) 2.302585092994045684017491454684364207599E1)
(num-test (log (sqrt (- (expt 10 9) 1))) 1.036163291797320557783096154591297226743E1)
(num-test (log (sqrt -2) -2) 0.5)
(num-test (log (sqrt 1+i) 1+i) 0.5)
(num-test (log (sqrt 2) 2) 0.5)
(num-test (log -0.0+0.00000001i) -18.42068074395237+1.57079632679490i)
(num-test (log -0.0+1.0i) 0.0+1.57079632679490i)
(num-test (log -0.0+1234.0i) 7.11801620446533+1.57079632679490i)
(num-test (log -0.0+1234000000.0i) 20.93352676242961+1.57079632679490i)
(num-test (log -0.0+2.71828182845905i) 1.0+1.57079632679490i)
(num-test (log -0.0+3.14159265358979i) 1.14472988584940+1.57079632679490i)
(num-test (log -0.0-0.00000001i) -18.42068074395237-1.57079632679490i)
(num-test (log -0.0-1.0i) 0.0-1.57079632679490i)
(num-test (log -0.0-1234.0i) 7.11801620446533-1.57079632679490i)
(num-test (log -0.0-1234000000.0i) 20.93352676242961-1.57079632679490i)
(num-test (log -0.0-2.71828182845905i) 1.0-1.57079632679490i)
(num-test (log -0.0-3.14159265358979i) 1.14472988584940-1.57079632679490i)
(num-test (log -0.00000001) -18.42068074395237+3.14159265358979i)
(num-test (log -0.00000001+0.00000001i) -18.07410715367239+2.35619449019234i)
(num-test (log -0.00000001+0.0i) -18.42068074395237+3.14159265358979i)
(num-test (log -0.00000001+1.0i) 0.0+1.57079633679490i)
(num-test (log -0.00000001+1234.0i) 7.11801620446533+1.57079632680300i)
(num-test (log -0.00000001+1234000000.0i) 20.93352676242961+1.57079632679490i)
(num-test (log -0.00000001+2.71828182845905i) 1.0+1.57079633047369i)
(num-test (log -0.00000001+3.14159265358979i) 1.14472988584940+1.57079632997800i)
(num-test (log -0.00000001-0.00000001i) -18.07410715367239-2.35619449019234i)
(num-test (log -0.00000001-0.0i) -18.42068074395237+3.14159265358979i)
(num-test (log -0.00000001-1.0i) 0.0-1.57079633679490i)
(num-test (log -0.00000001-1234.0i) 7.11801620446533-1.57079632680300i)
(num-test (log -0.00000001-1234000000.0i) 20.93352676242961-1.57079632679490i)
(num-test (log -0.00000001-2.71828182845905i) 1.0-1.57079633047369i)
(num-test (log -0.00000001-3.14159265358979i) 1.14472988584940-1.57079632997800i)
(num-test (log -0.1e001) (make-rectangular 0.0 pi))
(num-test (log -1 -1) 1.0)
(num-test (log -1) 0.0+3.141592653589793238462643383279502884197169399375105820974944592307816406286198E0i)
(num-test (log -1) 0.0+3.14159265358979i)
(num-test (log -1.0) 0.0+3.14159265358979i)
(num-test (log -1.0+0.00000001i) 0.0+3.14159264358979i)
(num-test (log -1.0+0.0i) 0.0+3.14159265358979i)
(num-test (log -1.0+1.0i) 0.34657359027997+2.35619449019234i)
(num-test (log -1.0+1234.0i) 7.11801653281724+1.57160669938898i)
(num-test (log -1.0+1234000000.0i) 20.93352676242961+1.57079632760527i)
(num-test (log -1.0+2.71828182845905i) 1.06346400552149+1.92330974857252i)
(num-test (log -1.0+3.14159265358979i) 1.19298515341341+1.87896539791088i)
(num-test (log -1.0-0.00000001i) 0.0-3.14159264358979i)
(num-test (log -1.0-0.0i) 0.0+3.14159265358979i)
(num-test (log -1.0-1.0i) 0.34657359027997-2.35619449019234i)
(num-test (log -1.0-1234.0i) 7.11801653281724-1.57160669938898i)
(num-test (log -1.0-1234000000.0i) 20.93352676242961-1.57079632760527i)
(num-test (log -1.0-2.71828182845905i) 1.06346400552149-1.92330974857252i)
(num-test (log -1.0-3.14159265358979i) 1.19298515341341-1.87896539791088i)
(num-test (log -1.0e+00+0.0e+00i) 0+3.1415926535897932385e0i)
(num-test (log -1.0e+00+1.0e+00i) 3.4657359027997265471e-1+2.3561944901923449288e0i)
(num-test (log -1.0e+00+1.0e+00i) 3.4657359027997265471e-1+2.3561944901923449288e0i)
(num-test (log -1.0e+00+1.19209289550781250e-07i) 7.1054273576009513716e-15+3.1415925343805036877e0i)
(num-test (log -1.0e+00+1.19209289550781250e-07i) 7.1054273576009513716e-15+3.1415925343805036877e0i)
(num-test (log -1.0e+00+2.0e+00i) 8.0471895621705018730e-1+2.0344439357957027354e0i)
(num-test (log -1.0e+00+2.0e+00i) 8.0471895621705018730e-1+2.0344439357957027354e0i)
(num-test (log -1.0e+00+5.0e-01i) 1.1157177565710487788e-1+2.6779450445889871222e0i)
(num-test (log -1.0e+00+5.0e-01i) 1.1157177565710487788e-1+2.6779450445889871222e0i)
(num-test (log -1.0e+00+8.3886080e+06i) 1.5942385152878749222e1+1.570796446004186170e0i)
(num-test (log -1.0e+00+8.3886080e+06i) 1.5942385152878749222e1+1.570796446004186170e0i)
(num-test (log -1.0e+00-1.0e+00i) 3.4657359027997265471e-1-2.3561944901923449288e0i)
(num-test (log -1.0e+00-1.0e+00i) 3.4657359027997265471e-1-2.3561944901923449288e0i)
(num-test (log -1.0e+00-1.19209289550781250e-07i) 7.1054273576009513716e-15-3.1415925343805036877e0i)
(num-test (log -1.0e+00-1.19209289550781250e-07i) 7.1054273576009513716e-15-3.1415925343805036877e0i)
(num-test (log -1.0e+00-2.0e+00i) 8.0471895621705018730e-1-2.0344439357957027354e0i)
(num-test (log -1.0e+00-2.0e+00i) 8.0471895621705018730e-1-2.0344439357957027354e0i)
(num-test (log -1.0e+00-5.0e-01i) 1.1157177565710487788e-1-2.6779450445889871222e0i)
(num-test (log -1.0e+00-5.0e-01i) 1.1157177565710487788e-1-2.6779450445889871222e0i)
(num-test (log -1.0e+00-8.3886080e+06i) 1.5942385152878749222e1-1.570796446004186170e0i)
(num-test (log -1.0e+00-8.3886080e+06i) 1.5942385152878749222e1-1.570796446004186170e0i)
(num-test (log -1.19209289550781250e-07+0.0e+00i) -1.5942385152878742117e1+3.1415926535897932385e0i)
(num-test (log -1.19209289550781250e-07+1.0e+00i) 7.1054273576009513716e-15+1.570796446004186170e0i)
(num-test (log -1.19209289550781250e-07+1.0e+00i) 7.1054273576009513716e-15+1.570796446004186170e0i)
(num-test (log -1.19209289550781250e-07+1.19209289550781250e-07i) -1.5595811562598769462e1+2.3561944901923449288e0i)
(num-test (log -1.19209289550781250e-07+1.19209289550781250e-07i) -1.5595811562598769462e1+2.3561944901923449288e0i)
(num-test (log -1.19209289550781250e-07+2.0e+00i) 6.9314718055994708577e-1+1.5707963863995413946e0i)
(num-test (log -1.19209289550781250e-07+2.0e+00i) 6.9314718055994708577e-1+1.5707963863995413946e0i)
(num-test (log -1.19209289550781250e-07+5.0e-01i) -6.9314718055991688771e-1+1.5707965652134757208e0i)
(num-test (log -1.19209289550781250e-07+5.0e-01i) -6.9314718055991688771e-1+1.5707965652134757208e0i)
(num-test (log -1.19209289550781250e-07+8.3886080e+06i) 1.5942385152878742117e1+1.5707963267949108301e0i)
(num-test (log -1.19209289550781250e-07+8.3886080e+06i) 1.5942385152878742117e1+1.5707963267949108301e0i)
(num-test (log -1.19209289550781250e-07-1.0e+00i) 7.1054273576009513716e-15-1.570796446004186170e0i)
(num-test (log -1.19209289550781250e-07-1.0e+00i) 7.1054273576009513716e-15-1.570796446004186170e0i)
(num-test (log -1.19209289550781250e-07-1.19209289550781250e-07i) -1.5595811562598769462e1-2.3561944901923449288e0i)
(num-test (log -1.19209289550781250e-07-1.19209289550781250e-07i) -1.5595811562598769462e1-2.3561944901923449288e0i)
(num-test (log -1.19209289550781250e-07-2.0e+00i) 6.9314718055994708577e-1-1.5707963863995413946e0i)
(num-test (log -1.19209289550781250e-07-2.0e+00i) 6.9314718055994708577e-1-1.5707963863995413946e0i)
(num-test (log -1.19209289550781250e-07-5.0e-01i) -6.9314718055991688771e-1-1.5707965652134757208e0i)
(num-test (log -1.19209289550781250e-07-5.0e-01i) -6.9314718055991688771e-1-1.5707965652134757208e0i)
(num-test (log -1.19209289550781250e-07-8.3886080e+06i) 1.5942385152878742117e1-1.5707963267949108301e0i)
(num-test (log -1.19209289550781250e-07-8.3886080e+06i) 1.5942385152878742117e1-1.5707963267949108301e0i)
(num-test (log -1/1) 0.0+3.14159265358979i)
(num-test (log -1/10) -2.30258509299405+3.14159265358979i)
(num-test (log -1/1234) -7.11801620446533+3.14159265358979i)
(num-test (log -1/1234000000) -20.93352676242961+3.14159265358979i)
(num-test (log -1/2) -0.69314718055995+3.14159265358979i)
(num-test (log -1/3) -1.09861228866811+3.14159265358979i)
(num-test (log -1/362880) -12.80182748008147+3.14159265358979i)
(num-test (log -1/500029) -13.12242137572239+3.14159265358979i)
(num-test (log -10) 2.30258509299405+3.14159265358979i)
(num-test (log -10/1) 2.30258509299405+3.14159265358979i)
(num-test (log -10/10) 0.0+3.14159265358979i)
(num-test (log -10/1234) -4.81543111147129+3.14159265358979i)
(num-test (log -10/1234000000) -18.63094166943556+3.14159265358979i)
(num-test (log -10/2) 1.60943791243410+3.14159265358979i)
(num-test (log -10/3) 1.20397280432594+3.14159265358979i)
(num-test (log -10/362880) -10.49924238708742+3.14159265358979i)
(num-test (log -10/500029) -10.81983628272835+3.14159265358979i)
(num-test (log -1234) 7.11801620446533+3.14159265358979i)
(num-test (log -1234.0) 7.11801620446533+3.14159265358979i)
(num-test (log -1234.0+0.00000001i) 7.11801620446533+3.14159265358169i)
(num-test (log -1234.0+0.0i) 7.11801620446533+3.14159265358979i)
(num-test (log -1234.0+1.0i) 7.11801653281724+3.14078228099571i)
(num-test (log -1234.0+1234.0i) 7.46458979474531+2.35619449019234i)
(num-test (log -1234.0+1234000000.0i) 20.93352676243011+1.57079732679490i)
(num-test (log -1234.0+2.71828182845905i) 7.11801863067090+3.13938983557381i)
(num-test (log -1234.0+3.14159265358979i) 7.11801944515932+3.13904679794449i)
(num-test (log -1234.0-0.00000001i) 7.11801620446533-3.14159265358169i)
(num-test (log -1234.0-0.0i) 7.11801620446533+3.14159265358979i)
(num-test (log -1234.0-1.0i) 7.11801653281724-3.14078228099571i)
(num-test (log -1234.0-1234.0i) 7.46458979474531-2.35619449019234i)
(num-test (log -1234.0-1234000000.0i) 20.93352676243011-1.57079732679490i)
(num-test (log -1234.0-2.71828182845905i) 7.11801863067090-3.13938983557381i)
(num-test (log -1234.0-3.14159265358979i) 7.11801944515932-3.13904679794449i)
(num-test (log -1234/1) 7.11801620446533+3.14159265358979i)
(num-test (log -1234/10) 4.81543111147129+3.14159265358979i)
(num-test (log -1234/1234) 0.0+3.14159265358979i)
(num-test (log -1234/1234000000) -13.81551055796427+3.14159265358979i)
(num-test (log -1234/2) 6.42486902390539+3.14159265358979i)
(num-test (log -1234/3) 6.01940391579722+3.14159265358979i)
(num-test (log -1234/362880) -5.68381127561614+3.14159265358979i)
(num-test (log -1234/500029) -6.00440517125706+3.14159265358979i)
(num-test (log -1234000000) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000.0) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000.0+0.00000001i) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000.0+0.0i) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000.0+1.0i) 20.93352676242961+3.14159265277942i)
(num-test (log -1234000000.0+1234.0i) 20.93352676243011+3.14159165358979i)
(num-test (log -1234000000.0+1234000000.0i) 21.28010035270958+2.35619449019234i)
(num-test (log -1234000000.0+2.71828182845905i) 20.93352676242961+3.14159265138697i)
(num-test (log -1234000000.0+3.14159265358979i) 20.93352676242961+3.14159265104393i)
(num-test (log -1234000000.0-0.00000001i) 20.93352676242961-3.14159265358979i)
(num-test (log -1234000000.0-0.0i) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000.0-1.0i) 20.93352676242961-3.14159265277942i)
(num-test (log -1234000000.0-1234.0i) 20.93352676243011-3.14159165358979i)
(num-test (log -1234000000.0-1234000000.0i) 21.28010035270958-2.35619449019234i)
(num-test (log -1234000000.0-2.71828182845905i) 20.93352676242961-3.14159265138697i)
(num-test (log -1234000000.0-3.14159265358979i) 20.93352676242961-3.14159265104393i)
(num-test (log -1234000000/1) 20.93352676242961+3.14159265358979i)
(num-test (log -1234000000/10) 18.63094166943556+3.14159265358979i)
(num-test (log -1234000000/1234) 13.81551055796427+3.14159265358979i)
(num-test (log -1234000000/1234000000) 0.0+3.14159265358979i)
(num-test (log -1234000000/2) 20.24037958186966+3.14159265358979i)
(num-test (log -1234000000/3) 19.83491447376150+3.14159265358979i)
(num-test (log -1234000000/362880) 8.13169928234814+3.14159265358979i)
(num-test (log -1234000000/500029) 7.81110538670721+3.14159265358979i)
(num-test (log -2 -2) 1)
(num-test (log -2) 0.69314718055995+3.14159265358979i)
(num-test (log -2.0e+00+0.0e+00i) 6.9314718055994530942e-1+3.1415926535897932385e0i)
(num-test (log -2.0e+00+1.0e+00i) 8.0471895621705018730e-1+2.6779450445889871222e0i)
(num-test (log -2.0e+00+1.0e+00i) 8.0471895621705018730e-1+2.6779450445889871222e0i)
(num-test (log -2.0e+00+1.19209289550781250e-07i) 6.9314718055994708577e-1+3.1415925939851484631e0i)
(num-test (log -2.0e+00+1.19209289550781250e-07i) 6.9314718055994708577e-1+3.1415925939851484631e0i)
(num-test (log -2.0e+00+2.0e+00i) 1.0397207708399179641e0+2.3561944901923449288e0i)
(num-test (log -2.0e+00+2.0e+00i) 1.0397207708399179641e0+2.3561944901923449288e0i)
(num-test (log -2.0e+00+5.0e-01i) 7.2345949146816273071e-1+2.8966139904629290843e0i)
(num-test (log -2.0e+00+5.0e-01i) 7.2345949146816273071e-1+2.8966139904629290843e0i)
(num-test (log -2.0e+00+8.3886080e+06i) 1.5942385152878770538e1+1.5707965652134757208e0i)
(num-test (log -2.0e+00+8.3886080e+06i) 1.5942385152878770538e1+1.5707965652134757208e0i)
(num-test (log -2.0e+00-1.0e+00i) 8.0471895621705018730e-1-2.6779450445889871222e0i)
(num-test (log -2.0e+00-1.0e+00i) 8.0471895621705018730e-1-2.6779450445889871222e0i)
(num-test (log -2.0e+00-1.19209289550781250e-07i) 6.9314718055994708577e-1-3.1415925939851484631e0i)
(num-test (log -2.0e+00-1.19209289550781250e-07i) 6.9314718055994708577e-1-3.1415925939851484631e0i)
(num-test (log -2.0e+00-2.0e+00i) 1.0397207708399179641e0-2.3561944901923449288e0i)
(num-test (log -2.0e+00-2.0e+00i) 1.0397207708399179641e0-2.3561944901923449288e0i)
(num-test (log -2.0e+00-5.0e-01i) 7.2345949146816273071e-1-2.8966139904629290843e0i)
(num-test (log -2.0e+00-5.0e-01i) 7.2345949146816273071e-1-2.8966139904629290843e0i)
(num-test (log -2.0e+00-8.3886080e+06i) 1.5942385152878770538e1-1.5707965652134757208e0i)
(num-test (log -2.0e+00-8.3886080e+06i) 1.5942385152878770538e1-1.5707965652134757208e0i)
(num-test (log -2.71828182845905) 1.0+3.14159265358979i)
(num-test (log -2.71828182845905+0.00000001i) 1.0+3.14159264991100i)
(num-test (log -2.71828182845905+0.0i) 1.0+3.14159265358979i)
(num-test (log -2.71828182845905+1.0i) 1.06346400552149+2.78907923181217i)
(num-test (log -2.71828182845905+1234.0i) 7.11801863067090+1.57299914481088i)
(num-test (log -2.71828182845905+1234000000.0i) 20.93352676242961+1.57079632899772i)
(num-test (log -2.71828182845905+2.71828182845905i) 1.34657359027997+2.35619449019234i)
(num-test (log -2.71828182845905+3.14159265358979i) 1.42415703773030+2.28408086723395i)
(num-test (log -2.71828182845905-0.00000001i) 1.0-3.14159264991100i)
(num-test (log -2.71828182845905-0.0i) 1.0+3.14159265358979i)
(num-test (log -2.71828182845905-1.0i) 1.06346400552149-2.78907923181217i)
(num-test (log -2.71828182845905-1234.0i) 7.11801863067090-1.57299914481088i)
(num-test (log -2.71828182845905-1234000000.0i) 20.93352676242961-1.57079632899772i)
(num-test (log -2.71828182845905-2.71828182845905i) 1.34657359027997-2.35619449019234i)
(num-test (log -2.71828182845905-3.14159265358979i) 1.42415703773030-2.28408086723395i)
(num-test (log -2/1) 0.69314718055995+3.14159265358979i)
(num-test (log -2/10) -1.60943791243410+3.14159265358979i)
(num-test (log -2/1234) -6.42486902390539+3.14159265358979i)
(num-test (log -2/1234000000) -20.24037958186966+3.14159265358979i)
(num-test (log -2/2) 0.0+3.14159265358979i)
(num-test (log -2/3) -0.40546510810816+3.14159265358979i)
(num-test (log -2/362880) -12.10868029952152+3.14159265358979i)
(num-test (log -2/500029) -12.42927419516245+3.14159265358979i)
(num-test (log -3) 1.09861228866811+3.14159265358979i)
(num-test (log -3.14159265358979) 1.14472988584940+3.14159265358979i)
(num-test (log -3.14159265358979+0.00000001i) 1.14472988584940+3.14159265040669i)
(num-test (log -3.14159265358979+0.0i) 1.14472988584940+3.14159265358979i)
(num-test (log -3.14159265358979+1.0i) 1.19298515341341+2.83342358247381i)
(num-test (log -3.14159265358979+1234.0i) 7.11801944515932+1.57334218244020i)
(num-test (log -3.14159265358979+1234000000.0i) 20.93352676242961+1.57079632934076i)
(num-test (log -3.14159265358979+2.71828182845905i) 1.42415703773030+2.42830811315074i)
(num-test (log -3.14159265358979+3.14159265358979i) 1.49130347612937+2.35619449019234i)
(num-test (log -3.14159265358979-0.00000001i) 1.14472988584940-3.14159265040669i)
(num-test (log -3.14159265358979-0.0i) 1.14472988584940+3.14159265358979i)
(num-test (log -3.14159265358979-1.0i) 1.19298515341341-2.83342358247381i)
(num-test (log -3.14159265358979-1234.0i) 7.11801944515932-1.57334218244020i)
(num-test (log -3.14159265358979-1234000000.0i) 20.93352676242961-1.57079632934076i)
(num-test (log -3.14159265358979-2.71828182845905i) 1.42415703773030-2.42830811315074i)
(num-test (log -3.14159265358979-3.14159265358979i) 1.49130347612937-2.35619449019234i)
(num-test (log -3/1) 1.09861228866811+3.14159265358979i)
(num-test (log -3/10) -1.20397280432594+3.14159265358979i)
(num-test (log -3/1234) -6.01940391579722+3.14159265358979i)
(num-test (log -3/1234000000) -19.83491447376150+3.14159265358979i)
(num-test (log -3/2) 0.40546510810816+3.14159265358979i)
(num-test (log -3/3) 0.0+3.14159265358979i)
(num-test (log -3/362880) -11.70321519141336+3.14159265358979i)
(num-test (log -3/500029) -12.02380908705428+3.14159265358979i)
(num-test (log -362880) 12.80182748008147+3.14159265358979i)
(num-test (log -362880/1) 12.80182748008147+3.14159265358979i)
(num-test (log -362880/10) 10.49924238708742+3.14159265358979i)
(num-test (log -362880/1234) 5.68381127561614+3.14159265358979i)
(num-test (log -362880/1234000000) -8.13169928234814+3.14159265358979i)
(num-test (log -362880/2) 12.10868029952152+3.14159265358979i)
(num-test (log -362880/3) 11.70321519141336+3.14159265358979i)
(num-test (log -362880/362880) 0.0+3.14159265358979i)
(num-test (log -362880/500029) -0.32059389564092+3.14159265358979i)
(num-test (log -5.0e-01+0.0e+00i) -6.9314718055994530942e-1+3.1415926535897932385e0i)
(num-test (log -5.0e-01+1.0e+00i) 1.1157177565710487788e-1+2.0344439357957027354e0i)
(num-test (log -5.0e-01+1.0e+00i) 1.1157177565710487788e-1+2.0344439357957027354e0i)
(num-test (log -5.0e-01+1.19209289550781250e-07i) -6.9314718055991688771e-1+3.1415924151712141369e0i)
(num-test (log -5.0e-01+1.19209289550781250e-07i) -6.9314718055991688771e-1+3.1415924151712141369e0i)
(num-test (log -5.0e-01+2.0e+00i) 7.2345949146816273071e-1+1.8157749899217607734e0i)
(num-test (log -5.0e-01+2.0e+00i) 7.2345949146816273071e-1+1.8157749899217607734e0i)
(num-test (log -5.0e-01+5.0e-01i) -3.4657359027997265471e-1+2.3561944901923449288e0i)
(num-test (log -5.0e-01+5.0e-01i) -3.4657359027997265471e-1+2.3561944901923449288e0i)
(num-test (log -5.0e-01+8.3886080e+06i) 1.5942385152878743893e1+1.5707963863995413946e0i)
(num-test (log -5.0e-01+8.3886080e+06i) 1.5942385152878743893e1+1.5707963863995413946e0i)
(num-test (log -5.0e-01-1.0e+00i) 1.1157177565710487788e-1-2.0344439357957027354e0i)
(num-test (log -5.0e-01-1.0e+00i) 1.1157177565710487788e-1-2.0344439357957027354e0i)
(num-test (log -5.0e-01-1.19209289550781250e-07i) -6.9314718055991688771e-1-3.1415924151712141369e0i)
(num-test (log -5.0e-01-1.19209289550781250e-07i) -6.9314718055991688771e-1-3.1415924151712141369e0i)
(num-test (log -5.0e-01-2.0e+00i) 7.2345949146816273071e-1-1.8157749899217607734e0i)
(num-test (log -5.0e-01-2.0e+00i) 7.2345949146816273071e-1-1.8157749899217607734e0i)
(num-test (log -5.0e-01-5.0e-01i) -3.4657359027997265471e-1-2.3561944901923449288e0i)
(num-test (log -5.0e-01-5.0e-01i) -3.4657359027997265471e-1-2.3561944901923449288e0i)
(num-test (log -5.0e-01-8.3886080e+06i) 1.5942385152878743893e1-1.5707963863995413946e0i)
(num-test (log -5.0e-01-8.3886080e+06i) 1.5942385152878743893e1-1.5707963863995413946e0i)
(num-test (log -500029) 13.12242137572239+3.14159265358979i)
(num-test (log -500029/1) 13.12242137572239+3.14159265358979i)
(num-test (log -500029/10) 10.81983628272835+3.14159265358979i)
(num-test (log -500029/1234) 6.00440517125706+3.14159265358979i)
(num-test (log -500029/1234000000) -7.81110538670721+3.14159265358979i)
(num-test (log -500029/2) 12.42927419516245+3.14159265358979i)
(num-test (log -500029/3) 12.02380908705428+3.14159265358979i)
(num-test (log -500029/362880) 0.32059389564092+3.14159265358979i)
(num-test (log -500029/500029) 0.0+3.14159265358979i)
(num-test (log -8.3886080e+06+0.0e+00i) 1.5942385152878742117e1+3.1415926535897932385e0i)
(num-test (log -8.3886080e+06+1.0e+00i) 1.5942385152878749222e1+3.1415925343805036877e0i)
(num-test (log -8.3886080e+06+1.0e+00i) 1.5942385152878749222e1+3.1415925343805036877e0i)
(num-test (log -8.3886080e+06+1.19209289550781250e-07i) 1.5942385152878742117e1+3.1415926535897790276e0i)
(num-test (log -8.3886080e+06+1.19209289550781250e-07i) 1.5942385152878742117e1+3.1415926535897790276e0i)
(num-test (log -8.3886080e+06+2.0e+00i) 1.5942385152878770538e1+3.1415924151712141369e0i)
(num-test (log -8.3886080e+06+2.0e+00i) 1.5942385152878770538e1+3.1415924151712141369e0i)
(num-test (log -8.3886080e+06+5.0e-01i) 1.5942385152878743893e1+3.1415925939851484631e0i)
(num-test (log -8.3886080e+06+5.0e-01i) 1.5942385152878743893e1+3.1415925939851484631e0i)
(num-test (log -8.3886080e+06+8.3886080e+06i) 1.6288958743158714771e1+2.3561944901923449288e0i)
(num-test (log -8.3886080e+06+8.3886080e+06i) 1.6288958743158714771e1+2.3561944901923449288e0i)
(num-test (log -8.3886080e+06-1.0e+00i) 1.5942385152878749222e1-3.1415925343805036877e0i)
(num-test (log -8.3886080e+06-1.0e+00i) 1.5942385152878749222e1-3.1415925343805036877e0i)
(num-test (log -8.3886080e+06-1.19209289550781250e-07i) 1.5942385152878742117e1-3.1415926535897790276e0i)
(num-test (log -8.3886080e+06-1.19209289550781250e-07i) 1.5942385152878742117e1-3.1415926535897790276e0i)
(num-test (log -8.3886080e+06-2.0e+00i) 1.5942385152878770538e1-3.1415924151712141369e0i)
(num-test (log -8.3886080e+06-2.0e+00i) 1.5942385152878770538e1-3.1415924151712141369e0i)
(num-test (log -8.3886080e+06-5.0e-01i) 1.5942385152878743893e1-3.1415925939851484631e0i)
(num-test (log -8.3886080e+06-5.0e-01i) 1.5942385152878743893e1-3.1415925939851484631e0i)
(num-test (log -8.3886080e+06-8.3886080e+06i) 1.6288958743158714771e1-2.3561944901923449288e0i)
(num-test (log -8.3886080e+06-8.3886080e+06i) 1.6288958743158714771e1-2.3561944901923449288e0i)
(num-test (log -9223372036854775808) 4.366827237527655449328562365186512378885E1+3.141592653589793238462643383279502884195E0i)
(num-test (log .3678794411714423) -1.0)
(num-test (log 0+i) (make-rectangular 0.0 (* 0.5 pi)))
(num-test (log 0-i) (make-rectangular 0.0 (* -0.5 pi)))
(num-test (log 0.0+0.00000001i) -18.42068074395237+1.57079632679490i)
(num-test (log 0.0+1.0i) 0.0+1.57079632679490i)
(num-test (log 0.0+1234.0i) 7.11801620446533+1.57079632679490i)
(num-test (log 0.0+1234000000.0i) 20.93352676242961+1.57079632679490i)
(num-test (log 0.0+2.71828182845905i) 1.0+1.57079632679490i)
(num-test (log 0.0+3.14159265358979i) 1.14472988584940+1.57079632679490i)
(num-test (log 0.0-0.00000001i) -18.42068074395237-1.57079632679490i)
(num-test (log 0.0-1.0i) 0.0-1.57079632679490i)
(num-test (log 0.0-1234.0i) 7.11801620446533-1.57079632679490i)
(num-test (log 0.0-1234000000.0i) 20.93352676242961-1.57079632679490i)
(num-test (log 0.0-2.71828182845905i) 1.0-1.57079632679490i)
(num-test (log 0.0-3.14159265358979i) 1.14472988584940-1.57079632679490i)
(num-test (log 0.00000001) -18.42068074395237)
(num-test (log 0.00000001+0.00000001i) -18.07410715367239+0.78539816339745i)
(num-test (log 0.00000001+0.0i) -18.42068074395237)
(num-test (log 0.00000001+1.0i) 0.0+1.57079631679490i)
(num-test (log 0.00000001+1234.0i) 7.11801620446533+1.57079632678679i)
(num-test (log 0.00000001+1234000000.0i) 20.93352676242961+1.57079632679490i)
(num-test (log 0.00000001+2.71828182845905i) 1.0+1.57079632311610i)
(num-test (log 0.00000001+3.14159265358979i) 1.14472988584940+1.57079632361180i)
(num-test (log 0.00000001-0.00000001i) -18.07410715367239-0.78539816339745i)
(num-test (log 0.00000001-0.0i) -18.42068074395237)
(num-test (log 0.00000001-1.0i) 0.0-1.57079631679490i)
(num-test (log 0.00000001-1234.0i) 7.11801620446533-1.57079632678679i)
(num-test (log 0.00000001-1234000000.0i) 20.93352676242961-1.57079632679490i)
(num-test (log 0.00000001-2.71828182845905i) 1.0-1.57079632311610i)
(num-test (log 0.00000001-3.14159265358979i) 1.14472988584940-1.57079632361180i)
(num-test (log 0.0e+00+1.0e+00i) 0+1.5707963267948966192e0i)
(num-test (log 0.0e+00+1.19209289550781250e-07i) -1.5942385152878742117e1+1.5707963267948966192e0i)
(num-test (log 0.0e+00+2.0e+00i) 6.9314718055994530942e-1+1.5707963267948966192e0i)
(num-test (log 0.0e+00+5.0e-01i) -6.9314718055994530942e-1+1.5707963267948966192e0i)
(num-test (log 0.0e+00+8.3886080e+06i) 1.5942385152878742117e1+1.5707963267948966192e0i)
(num-test (log 0.0e+00-1.0e+00i) 0-1.5707963267948966192e0i)
(num-test (log 0.0e+00-1.19209289550781250e-07i) -1.5942385152878742117e1-1.5707963267948966192e0i)
(num-test (log 0.0e+00-2.0e+00i) 6.9314718055994530942e-1-1.5707963267948966192e0i)
(num-test (log 0.0e+00-5.0e-01i) -6.9314718055994530942e-1-1.5707963267948966192e0i)
(num-test (log 0.0e+00-8.3886080e+06i) 1.5942385152878742117e1-1.5707963267948966192e0i)
(num-test (log 1 -1) 0.0)
(num-test (log 1) 0.0)
(num-test (log 1.0) 0.0)
(num-test (log 1.0+0.00000001i) 0.0+0.00000001i)
(num-test (log 1.0+0.0i) 0.0)
(num-test (log 1.0+1.0i) 0.34657359027997+0.78539816339745i)
(num-test (log 1.0+1234.0i) 7.11801653281724+1.56998595420081i)
(num-test (log 1.0+1234000000.0i) 20.93352676242961+1.57079632598452i)
(num-test (log 1.0+2.71828182845905i) 1.06346400552149+1.21828290501728i)
(num-test (log 1.0+3.14159265358979i) 1.19298515341341+1.26262725567891i)
(num-test (log 1.0+i -2.0) 0.26160508088635-0.052598406051983i)
(num-test (log 1.0-0.00000001i) 0.0-0.00000001i)
(num-test (log 1.0-0.0i) 0.0)
(num-test (log 1.0-1.0i) 0.34657359027997-0.78539816339745i)
(num-test (log 1.0-1234.0i) 7.11801653281724-1.56998595420081i)
(num-test (log 1.0-1234000000.0i) 20.93352676242961-1.57079632598452i)
(num-test (log 1.0-2.71828182845905i) 1.06346400552149-1.21828290501728i)
(num-test (log 1.0-3.14159265358979i) 1.19298515341341-1.26262725567891i)
(num-test (log 1.0e+00+0.0e+00i) 0e0+0.0i)
(num-test (log 1.0e+00+1.0e+00i) 3.4657359027997265471e-1+7.8539816339744830962e-1i)
(num-test (log 1.0e+00+1.0e+00i) 3.4657359027997265471e-1+7.8539816339744830962e-1i)
(num-test (log 1.0e+00+1.19209289550781250e-07i) 7.1054273576009513716e-15+1.1920928955078068531e-7i)
(num-test (log 1.0e+00+1.19209289550781250e-07i) 7.1054273576009513716e-15+1.1920928955078068531e-7i)
(num-test (log 1.0e+00+2.0e+00i) 8.0471895621705018730e-1+1.1071487177940905030e0i)
(num-test (log 1.0e+00+2.0e+00i) 8.0471895621705018730e-1+1.1071487177940905030e0i)
(num-test (log 1.0e+00+5.0e-01i) 1.1157177565710487788e-1+4.6364760900080611621e-1i)
(num-test (log 1.0e+00+5.0e-01i) 1.1157177565710487788e-1+4.6364760900080611621e-1i)
(num-test (log 1.0e+00+8.3886080e+06i) 1.5942385152878749222e1+1.5707962075856070685e0i)
(num-test (log 1.0e+00+8.3886080e+06i) 1.5942385152878749222e1+1.5707962075856070685e0i)
(num-test (log 1.0e+00-1.0e+00i) 3.4657359027997265471e-1-7.8539816339744830962e-1i)
(num-test (log 1.0e+00-1.0e+00i) 3.4657359027997265471e-1-7.8539816339744830962e-1i)
(num-test (log 1.0e+00-1.19209289550781250e-07i) 7.1054273576009513716e-15-1.1920928955078068531e-7i)
(num-test (log 1.0e+00-1.19209289550781250e-07i) 7.1054273576009513716e-15-1.1920928955078068531e-7i)
(num-test (log 1.0e+00-2.0e+00i) 8.0471895621705018730e-1-1.1071487177940905030e0i)
(num-test (log 1.0e+00-2.0e+00i) 8.0471895621705018730e-1-1.1071487177940905030e0i)
(num-test (log 1.0e+00-5.0e-01i) 1.1157177565710487788e-1-4.6364760900080611621e-1i)
(num-test (log 1.0e+00-5.0e-01i) 1.1157177565710487788e-1-4.6364760900080611621e-1i)
(num-test (log 1.0e+00-8.3886080e+06i) 1.5942385152878749222e1-1.5707962075856070685e0i)
(num-test (log 1.0e+00-8.3886080e+06i) 1.5942385152878749222e1-1.5707962075856070685e0i)
(num-test (log 1.0e-12) -27.63102111592855)
(num-test (log 1.0e-8) -18.42068074395237)
(num-test (log 1.110223024625156799999999999999999999997E-16) -3.673680056967710116530769529852882544059E1)
(num-test (log 1.19209289550781250e-07+0.0e+00i) -1.5942385152878742117e1+0.0i)
(num-test (log 1.19209289550781250e-07+1.0e+00i) 7.1054273576009513716e-15+1.5707962075856070685e0i)
(num-test (log 1.19209289550781250e-07+1.0e+00i) 7.1054273576009513716e-15+1.5707962075856070685e0i)
(num-test (log 1.19209289550781250e-07+1.19209289550781250e-07i) -1.5595811562598769462e1+7.8539816339744830962e-1i)
(num-test (log 1.19209289550781250e-07+1.19209289550781250e-07i) -1.5595811562598769462e1+7.8539816339744830962e-1i)
(num-test (log 1.19209289550781250e-07+2.0e+00i) 6.9314718055994708577e-1+1.5707962671902518438e0i)
(num-test (log 1.19209289550781250e-07+2.0e+00i) 6.9314718055994708577e-1+1.5707962671902518438e0i)
(num-test (log 1.19209289550781250e-07+5.0e-01i) -6.9314718055991688771e-1+1.5707960883763175177e0i)
(num-test (log 1.19209289550781250e-07+5.0e-01i) -6.9314718055991688771e-1+1.5707960883763175177e0i)
(num-test (log 1.19209289550781250e-07+8.3886080e+06i) 1.5942385152878742117e1+1.5707963267948824084e0i)
(num-test (log 1.19209289550781250e-07+8.3886080e+06i) 1.5942385152878742117e1+1.5707963267948824084e0i)
(num-test (log 1.19209289550781250e-07-1.0e+00i) 7.1054273576009513716e-15-1.5707962075856070685e0i)
(num-test (log 1.19209289550781250e-07-1.0e+00i) 7.1054273576009513716e-15-1.5707962075856070685e0i)
(num-test (log 1.19209289550781250e-07-1.19209289550781250e-07i) -1.5595811562598769462e1-7.8539816339744830962e-1i)
(num-test (log 1.19209289550781250e-07-1.19209289550781250e-07i) -1.5595811562598769462e1-7.8539816339744830962e-1i)
(num-test (log 1.19209289550781250e-07-2.0e+00i) 6.9314718055994708577e-1-1.5707962671902518438e0i)
(num-test (log 1.19209289550781250e-07-2.0e+00i) 6.9314718055994708577e-1-1.5707962671902518438e0i)
(num-test (log 1.19209289550781250e-07-5.0e-01i) -6.9314718055991688771e-1-1.5707960883763175177e0i)
(num-test (log 1.19209289550781250e-07-5.0e-01i) -6.9314718055991688771e-1-1.5707960883763175177e0i)
(num-test (log 1.19209289550781250e-07-8.3886080e+06i) 1.5942385152878742117e1-1.5707963267948824084e0i)
(num-test (log 1.19209289550781250e-07-8.3886080e+06i) 1.5942385152878742117e1-1.5707963267948824084e0i)
(num-test (log 1.5 -1) 0-0.12906355241341i)
(num-test (log 1.7976931e+308) 709.78271287399)
(num-test (log 1/1) 0.0)
(num-test (log 1/10) -2.30258509299405)
(num-test (log 1/1073741824 2) -30)
(num-test (log 1/1152921504606846976 8) -20)
(num-test (log 1/1234) -7.11801620446533)
(num-test (log 1/1234000000) -20.93352676242961)
(num-test (log 1/16777216 2) -24)
(num-test (log 1/18014398509481984 512) -6)
(num-test (log 1/2 1/4) 1/2)
(num-test (log 1/2 1/8) 1/3) 
(num-test (log 1/2 8) -1/3) 
(num-test (log 1/2) -0.69314718055995)
(num-test (log 1/2147483648 2) -31)
(num-test (log 1/256 2) -8)
(num-test (log 1/3) -1.09861228866811)
(num-test (log 1/362880) -12.80182748008147)
(num-test (log 1/4 1/2) 2)
(num-test (log 1/4 1/2) 2)
(num-test (log 1/500029) -13.12242137572239)
(num-test (log 1/65536 2) -16)
(num-test (log 1/8192 2) -13)
;(num-test (log 10 (real-part (log 0))) 0.0) ; ??? -- this returns -nan-nani in clang, 0.0 in gcc
(num-test (log 10) 2.30258509299405)
(num-test (log 10.0 (exp -1)) (- (log 10.0)))
(num-test (log 10.0 (exp 1)) (log 10.0))
(num-test (log 10.0 -0.001) -0.27620436338394-0.12561556740966i)
(num-test (log 10.0 0.001) -0.33333333333333)
(num-test (log 10.0 100.0) 0.5)
(num-test (log 10.0 1e-20) -0.05)
(num-test (log 10.0 1e20) 0.05)
(num-test (log 10.0 2124008553358849/781379079653017) 2.302585092994045684017991454684419658469E0)
(num-test (log 10/1) 2.30258509299405)
(num-test (log 10/10) 0.0)
(num-test (log 10/1234) -4.81543111147129)
(num-test (log 10/1234000000) -18.63094166943556)
(num-test (log 10/2) 1.60943791243410)
(num-test (log 10/3) 1.20397280432594)
(num-test (log 10/362880) -10.49924238708742)
(num-test (log 10/500029) -10.81983628272835)
(num-test (log 12/8 3/2) 1.0)
(num-test (log 1234) 7.11801620446533)
(num-test (log 1234.0) 7.11801620446533)
(num-test (log 1234.0+0.00000001i) 7.11801620446533+0.00000000000810i)
(num-test (log 1234.0+0.0i) 7.11801620446533)
(num-test (log 1234.0+1.0i) 7.11801653281724+0.00081037259408i)
(num-test (log 1234.0+1234.0i) 7.46458979474531+0.78539816339745i)
(num-test (log 1234.0+1234000000.0i) 20.93352676243011+1.57079532679490i)
(num-test (log 1234.0+2.71828182845905i) 7.11801863067090+0.00220281801598i)
(num-test (log 1234.0+3.14159265358979i) 7.11801944515932+0.00254585564530i)
(num-test (log 1234.0-0.00000001i) 7.11801620446533-0.00000000000810i)
(num-test (log 1234.0-0.0i) 7.11801620446533)
(num-test (log 1234.0-1.0i) 7.11801653281724-0.00081037259408i)
(num-test (log 1234.0-1234.0i) 7.46458979474531-0.78539816339745i)
(num-test (log 1234.0-1234000000.0i) 20.93352676243011-1.57079532679490i)
(num-test (log 1234.0-2.71828182845905i) 7.11801863067090-0.00220281801598i)
(num-test (log 1234.0-3.14159265358979i) 7.11801944515932-0.00254585564530i)
(num-test (log 1234/1) 7.11801620446533)
(num-test (log 1234/10) 4.81543111147129)
(num-test (log 1234/1234) 0.0)
(num-test (log 1234/1234000000) -13.81551055796427)
(num-test (log 1234/2) 6.42486902390539)
(num-test (log 1234/3) 6.01940391579722)
(num-test (log 1234/362880) -5.68381127561614)
(num-test (log 1234/500029) -6.00440517125706)
(num-test (log 1234000000) 20.93352676242961)
(num-test (log 1234000000.0) 20.93352676242961)
(num-test (log 1234000000.0+0.00000001i) 20.93352676242961+0.0i)
(num-test (log 1234000000.0+0.0i) 20.93352676242961)
(num-test (log 1234000000.0+1.0i) 20.93352676242961+0.00000000081037i)
(num-test (log 1234000000.0+1234.0i) 20.93352676243011+0.00000100000000i)
(num-test (log 1234000000.0+1234000000.0i) 21.28010035270958+0.78539816339745i)
(num-test (log 1234000000.0+2.71828182845905i) 20.93352676242961+0.00000000220282i)
(num-test (log 1234000000.0+3.14159265358979i) 20.93352676242961+0.00000000254586i)
(num-test (log 1234000000.0-0.00000001i) 20.93352676242961-0.0i)
(num-test (log 1234000000.0-0.0i) 20.93352676242961)
(num-test (log 1234000000.0-1.0i) 20.93352676242961-0.00000000081037i)
(num-test (log 1234000000.0-1234.0i) 20.93352676243011-0.00000100000000i)
(num-test (log 1234000000.0-1234000000.0i) 21.28010035270958-0.78539816339745i)
(num-test (log 1234000000.0-2.71828182845905i) 20.93352676242961-0.00000000220282i)
(num-test (log 1234000000.0-3.14159265358979i) 20.93352676242961-0.00000000254586i)
(num-test (log 1234000000/1) 20.93352676242961)
(num-test (log 1234000000/10) 18.63094166943556)
(num-test (log 1234000000/1234) 13.81551055796427)
(num-test (log 1234000000/1234000000) 0.0)
(num-test (log 1234000000/2) 20.24037958186966)
(num-test (log 1234000000/3) 19.83491447376150)
(num-test (log 1234000000/362880) 8.13169928234814)
(num-test (log 1234000000/500029) 7.81110538670721)
(num-test (log 15693/12583 24271/35566) -5.78025354982372501902371206100042173188E-1)
(num-test (log 1e-100) -2.302585092994045684017991454684364207602E2)
(num-test (log 1e-18) -4.144653167389282231232384618431855573682E1)
(num-test (log 1e-300) -6.907755278982137052053974364053092622806E2)
(num-test (log 1e-50 10) -50.0)
(num-test (log 1e100) 2.302585092994045684017991454684364207602E2)
(num-test (log 1e18) 4.144653167389282231232384618431855573682E1)
(num-test (log 1e300) 6.907755278982137052053974364053092622806E2)
(num-test (log 1e50 10) 50.0)
(num-test (log 2 1/8) -1/3) 
(num-test (log 2 2) 1)
(num-test (log 2 8) 1/3) 
(num-test (log 2) 0.69314718055995)
(num-test (log 2.0e+00+0.0e+00i) 6.9314718055994530942e-1+0.0i)
(num-test (log 2.0e+00+1.0e+00i) 8.0471895621705018730e-1+4.6364760900080611621e-1i)
(num-test (log 2.0e+00+1.0e+00i) 8.0471895621705018730e-1+4.6364760900080611621e-1i)
(num-test (log 2.0e+00+1.19209289550781250e-07i) 6.9314718055994708577e-1+5.9604644775390554414e-8i)
(num-test (log 2.0e+00+1.19209289550781250e-07i) 6.9314718055994708577e-1+5.9604644775390554414e-8i)
(num-test (log 2.0e+00+2.0e+00i) 1.0397207708399179641e0+7.8539816339744830962e-1i)
(num-test (log 2.0e+00+2.0e+00i) 1.0397207708399179641e0+7.8539816339744830962e-1i)
(num-test (log 2.0e+00+5.0e-01i) 7.2345949146816273071e-1+2.4497866312686415417e-1i)
(num-test (log 2.0e+00+5.0e-01i) 7.2345949146816273071e-1+2.4497866312686415417e-1i)
(num-test (log 2.0e+00+8.3886080e+06i) 1.5942385152878770538e1+1.5707960883763175177e0i)
(num-test (log 2.0e+00+8.3886080e+06i) 1.5942385152878770538e1+1.5707960883763175177e0i)
(num-test (log 2.0e+00-1.0e+00i) 8.0471895621705018730e-1-4.6364760900080611621e-1i)
(num-test (log 2.0e+00-1.0e+00i) 8.0471895621705018730e-1-4.6364760900080611621e-1i)
(num-test (log 2.0e+00-1.19209289550781250e-07i) 6.9314718055994708577e-1-5.9604644775390554414e-8i)
(num-test (log 2.0e+00-1.19209289550781250e-07i) 6.9314718055994708577e-1-5.9604644775390554414e-8i)
(num-test (log 2.0e+00-2.0e+00i) 1.0397207708399179641e0-7.8539816339744830962e-1i)
(num-test (log 2.0e+00-2.0e+00i) 1.0397207708399179641e0-7.8539816339744830962e-1i)
(num-test (log 2.0e+00-5.0e-01i) 7.2345949146816273071e-1-2.4497866312686415417e-1i)
(num-test (log 2.0e+00-5.0e-01i) 7.2345949146816273071e-1-2.4497866312686415417e-1i)
(num-test (log 2.0e+00-8.3886080e+06i) 1.5942385152878770538e1-1.5707960883763175177e0i)
(num-test (log 2.0e+00-8.3886080e+06i) 1.5942385152878770538e1-1.5707960883763175177e0i)
(num-test (log 2.2250739e-308) -708.39641851362)
(num-test (log 2.688117141816135E+43) 100.0)
(num-test (log 2.71828182845905) 1.0)
(num-test (log 2.71828182845905+0.00000001i) 1.0+0.00000000367879i)
(num-test (log 2.71828182845905+0.0i) 1.0)
(num-test (log 2.71828182845905+1.0i) 1.06346400552149+0.35251342177762i)
(num-test (log 2.71828182845905+1234.0i) 7.11801863067090+1.56859350877892i)
(num-test (log 2.71828182845905+1234000000.0i) 20.93352676242961+1.57079632459208i)
(num-test (log 2.71828182845905+2.71828182845905i) 1.34657359027997+0.78539816339745i)
(num-test (log 2.71828182845905+3.14159265358979i) 1.42415703773030+0.85751178635585i)
(num-test (log 2.71828182845905-0.00000001i) 1.0-0.00000000367879i)
(num-test (log 2.71828182845905-0.0i) 1.0)
(num-test (log 2.71828182845905-1.0i) 1.06346400552149-0.35251342177762i)
(num-test (log 2.71828182845905-1234.0i) 7.11801863067090-1.56859350877892i)
(num-test (log 2.71828182845905-1234000000.0i) 20.93352676242961-1.57079632459208i)
(num-test (log 2.71828182845905-2.71828182845905i) 1.34657359027997-0.78539816339745i)
(num-test (log 2.71828182845905-3.14159265358979i) 1.42415703773030-0.85751178635585i)
(num-test (log 2/1) 0.69314718055995)
(num-test (log 2/10) -1.60943791243410)
(num-test (log 2/1234) -6.42486902390539)
(num-test (log 2/1234000000) -20.24037958186966)
(num-test (log 2/2) 0.0)
(num-test (log 2/3) -0.40546510810816)
(num-test (log 2/362880) -12.10868029952152)
(num-test (log 2/500029) -12.42927419516245)
(num-test (log 22026.46579480672) 10.0)
(num-test (log 24998/50401 24728/63453) 7.441028498776462417495086765025452881649E-1)
(num-test (log 25438/28960 36472/54817) 3.182468797561633550530828023298618520944E-1)
(num-test (log 2921/7914 2921/7914) 1)
(num-test (log 3) 1.09861228866811)
(num-test (log 3.14159265358979+0.00000001i) 1.14472988584940+0.00000000318310i)
(num-test (log 3.14159265358979+0.0i) 1.14472988584940)
(num-test (log 3.14159265358979+1.0i) 1.19298515341341+0.30816907111598i)
(num-test (log 3.14159265358979+1234.0i) 7.11801944515932+1.56825047114960i)
(num-test (log 3.14159265358979+1234000000.0i) 20.93352676242961+1.57079632424904i)
(num-test (log 3.14159265358979+2.71828182845905i) 1.42415703773030+0.71328454043905i)
(num-test (log 3.14159265358979+3.14159265358979i) 1.49130347612937+0.78539816339745i)
(num-test (log 3.14159265358979-0.00000001i) 1.14472988584940-0.00000000318310i)
(num-test (log 3.14159265358979-0.0i) 1.14472988584940)
(num-test (log 3.14159265358979-1.0i) 1.19298515341341-0.30816907111598i)
(num-test (log 3.14159265358979-1234.0i) 7.11801944515932-1.56825047114960i)
(num-test (log 3.14159265358979-1234000000.0i) 20.93352676242961-1.57079632424904i)
(num-test (log 3.14159265358979-2.71828182845905i) 1.42415703773030-0.71328454043905i)
(num-test (log 3.14159265358979-3.14159265358979i) 1.49130347612937-0.78539816339745i)
(num-test (log 3.720075976020836E-44) -100.0)
(num-test (log 3/1) 1.09861228866811)
(num-test (log 3/10) -1.20397280432594)
(num-test (log 3/1234) -6.01940391579722)
(num-test (log 3/1234000000) -19.83491447376150)
(num-test (log 3/2) 0.40546510810816)
(num-test (log 3/3) 0.0)
(num-test (log 3/362880) -11.70321519141336)
(num-test (log 3/500029) -12.02380908705428)
(num-test (log 362880) 12.80182748008147)
(num-test (log 362880/1) 12.80182748008147)
(num-test (log 362880/10) 10.49924238708742)
(num-test (log 362880/1234) 5.68381127561614)
(num-test (log 362880/1234000000) -8.13169928234814)
(num-test (log 362880/2) 12.10868029952152)
(num-test (log 362880/3) 11.70321519141336)
(num-test (log 362880/362880) 0.0)
(num-test (log 362880/500029) -0.32059389564092)
(num-test (log 4 1/2) -2)
(num-test (log 4.5399929762484853E-5) -10.0)
(num-test (log 42665/30784 48270/29769) 6.752638664357152674138191677370820431573E-1)
(num-test (log 43340/27863 27919/48593) -7.971826992064755184257579917033070384525E-1)
(num-test (log 43686/40844 3924/13265) -5.522724914533037935994124583907811339125E-2)
(num-test (log 46770/6899 56965/50618) 1.620137763694524415676013256791616662615E1)
(num-test (log 5.0e-01+0.0e+00i) -6.9314718055994530942e-1+0.0i)
(num-test (log 5.0e-01+1.0e+00i) 1.1157177565710487788e-1+1.1071487177940905030e0i)
(num-test (log 5.0e-01+1.0e+00i) 1.1157177565710487788e-1+1.1071487177940905030e0i)
(num-test (log 5.0e-01+1.19209289550781250e-07i) -6.9314718055991688771e-1+2.3841857910155798249e-7i)
(num-test (log 5.0e-01+1.19209289550781250e-07i) -6.9314718055991688771e-1+2.3841857910155798249e-7i)
(num-test (log 5.0e-01+2.0e+00i) 7.2345949146816273071e-1+1.3258176636680324651e0i)
(num-test (log 5.0e-01+2.0e+00i) 7.2345949146816273071e-1+1.3258176636680324651e0i)
(num-test (log 5.0e-01+5.0e-01i) -3.4657359027997265471e-1+7.8539816339744830962e-1i)
(num-test (log 5.0e-01+5.0e-01i) -3.4657359027997265471e-1+7.8539816339744830962e-1i)
(num-test (log 5.0e-01+8.3886080e+06i) 1.5942385152878743893e1+1.5707962671902518438e0i)
(num-test (log 5.0e-01+8.3886080e+06i) 1.5942385152878743893e1+1.5707962671902518438e0i)
(num-test (log 5.0e-01-1.0e+00i) 1.1157177565710487788e-1-1.1071487177940905030e0i)
(num-test (log 5.0e-01-1.0e+00i) 1.1157177565710487788e-1-1.1071487177940905030e0i)
(num-test (log 5.0e-01-1.19209289550781250e-07i) -6.9314718055991688771e-1-2.3841857910155798249e-7i)
(num-test (log 5.0e-01-1.19209289550781250e-07i) -6.9314718055991688771e-1-2.3841857910155798249e-7i)
(num-test (log 5.0e-01-2.0e+00i) 7.2345949146816273071e-1-1.3258176636680324651e0i)
(num-test (log 5.0e-01-2.0e+00i) 7.2345949146816273071e-1-1.3258176636680324651e0i)
(num-test (log 5.0e-01-5.0e-01i) -3.4657359027997265471e-1-7.8539816339744830962e-1i)
(num-test (log 5.0e-01-5.0e-01i) -3.4657359027997265471e-1-7.8539816339744830962e-1i)
(num-test (log 5.0e-01-8.3886080e+06i) 1.5942385152878743893e1-1.5707962671902518438e0i)
(num-test (log 5.0e-01-8.3886080e+06i) 1.5942385152878743893e1-1.5707962671902518438e0i)
(num-test (log 500029) 13.12242137572239)
(num-test (log 500029/1) 13.12242137572239)
(num-test (log 500029/10) 10.81983628272835)
(num-test (log 500029/1234) 6.00440517125706)
(num-test (log 500029/1234000000) -7.81110538670721)
(num-test (log 500029/2) 12.42927419516245)
(num-test (log 500029/3) 12.02380908705428)
(num-test (log 500029/362880) 0.32059389564092)
(num-test (log 500029/500029) 0.0)
(num-test (log 54595/38975 21029/18267) 2.393514540234982342775959084446190967875E0)
(num-test (log 55510/63095 55510/63095) 1)
(num-test (log 60726/29873 34251/53142) -1.615057368690198504993598764304726754524E0)
(num-test (log 62092/33540 1958/6237) -5.315823311016084206705945306286559292707E-1)
(num-test (log 8 2) 3)
(num-test (log 8.0 -2.0) 0.13926097063622-0.63118087262379i)
(num-test (log 8.0 1.0+i) 0.97790391649038-2.2161063668189i)
(num-test (log 8.0 2) 3.0)
(num-test (log 8.3886080e+06+0.0e+00i) 1.5942385152878742117e1+0.0i)
(num-test (log 8.3886080e+06+1.0e+00i) 1.5942385152878749222e1+1.1920928955078068531e-7i)
(num-test (log 8.3886080e+06+1.0e+00i) 1.5942385152878749222e1+1.1920928955078068531e-7i)
(num-test (log 8.3886080e+06+1.19209289550781250e-07i) 1.5942385152878742117e1+1.4210854715202003717e-14i)
(num-test (log 8.3886080e+06+1.19209289550781250e-07i) 1.5942385152878742117e1+1.4210854715202003717e-14i)
(num-test (log 8.3886080e+06+2.0e+00i) 1.5942385152878770538e1+2.3841857910155798249e-7i)
(num-test (log 8.3886080e+06+2.0e+00i) 1.5942385152878770538e1+2.3841857910155798249e-7i)
(num-test (log 8.3886080e+06+5.0e-01i) 1.5942385152878743893e1+5.9604644775390554414e-8i)
(num-test (log 8.3886080e+06+5.0e-01i) 1.5942385152878743893e1+5.9604644775390554414e-8i)
(num-test (log 8.3886080e+06+8.3886080e+06i) 1.6288958743158714771e1+7.8539816339744830962e-1i)
(num-test (log 8.3886080e+06+8.3886080e+06i) 1.6288958743158714771e1+7.8539816339744830962e-1i)
(num-test (log 8.3886080e+06-1.0e+00i) 1.5942385152878749222e1-1.1920928955078068531e-7i)
(num-test (log 8.3886080e+06-1.0e+00i) 1.5942385152878749222e1-1.1920928955078068531e-7i)
(num-test (log 8.3886080e+06-1.19209289550781250e-07i) 1.5942385152878742117e1-1.4210854715202003717e-14i)
(num-test (log 8.3886080e+06-1.19209289550781250e-07i) 1.5942385152878742117e1-1.4210854715202003717e-14i)
(num-test (log 8.3886080e+06-2.0e+00i) 1.5942385152878770538e1-2.3841857910155798249e-7i)
(num-test (log 8.3886080e+06-2.0e+00i) 1.5942385152878770538e1-2.3841857910155798249e-7i)
(num-test (log 8.3886080e+06-5.0e-01i) 1.5942385152878743893e1-5.9604644775390554414e-8i)
(num-test (log 8.3886080e+06-5.0e-01i) 1.5942385152878743893e1-5.9604644775390554414e-8i)
(num-test (log 8.3886080e+06-8.3886080e+06i) 1.6288958743158714771e1-7.8539816339744830962e-1i)
(num-test (log 8.3886080e+06-8.3886080e+06i) 1.6288958743158714771e1-7.8539816339744830962e-1i)
(num-test (log 9.0 3.0) 2.0)
(num-test (log 9223372036854775807) 4.366827237527655449317720343461657334526E1)
(num-test (log pi) 1.14472988584940)
(num-test (log (/ 1+i)) (log (/ 1 1+i)))
(test (< (real-part (log 0.0)) (real-part (- (log 0.0)))) #t)

(test (infinite? (random (log 0.0))) #t) ; should (random inf.0 inf.0) be 0?
;(num-test (log 1 1) 'error) ; (expt 1 0) is 1 but so is (expt 1 1) -- an ambiguous case (returns NaN in gmp)
;(num-test (log 2 1) 'error) ; now returns infinity
;; this is actually inconsistent in one way:
;; (log 1/0 2) -> nannani, (log 1/0 1) -> inf.0

(num-test (log -1) (make-rectangular 0 pi))

(for-each
 (lambda (num-and-val)
   (let ((num (car num-and-val)) (val (cadr num-and-val))) (num-test-1 'log num (log num) val)))
 (vector (list 1 0.0) (list 2 0.69314718055995) (list 3 1.0986122886681) (list -1 0+3.1415926535898i) 
	 (list -2 0.69314718055995+3.1415926535898i) (list -3 1.0986122886681+3.1415926535898i) 
	 (list 9223372036854775807 43.668272375277) (list -9223372036854775808 43.668272375277+3.1415926535898i) 
	 (list 1/2 -0.69314718055995) (list 1/3 -1.0986122886681) (list -1/2 -0.69314718055995+3.1415926535898i) 
	 (list -1/3 -1.0986122886681+3.1415926535898i) (list 1/9223372036854775807 -43.668272375277) 
	 (list 1.0 0.0) (list 2.0 0.69314718055995) (list -2.0 0.69314718055995+3.1415926535898i) 
	 (list 1.000000000000000000000000000000000000002E-309 -7.114987937351601163615593594974685401477E2) 
	 (list 1e+16 36.841361487905) (list 0+1i 0+1.5707963267949i) (list 0+2i 0.69314718055995+1.5707963267949i) 
	 (list 0-1i 0-1.5707963267949i) (list 1+1i 0.34657359027997+0.78539816339745i) (list 1-1i 0.34657359027997-0.78539816339745i) 
	 (list -1+1i 0.34657359027997+2.3561944901923i) (list -1-1i 0.34657359027997-2.3561944901923i) 
	 (list 0.1+0.1i -1.9560115027141+0.78539816339745i) (list 1e+16+1e+16i 37.187935078185+0.78539816339745i) 
	 (list 1e-16+1e-16i -36.494787897625+0.78539816339745i) ))
  
(let ((err 0.0)
      (mx 0.0))
  (do ((i 0 (+ i 1))
       (x -10.0 (+ x .1)))
      ((= i 200))
    (if (not (zero? x))
	(let ((y (magnitude (- x (exp (log x))))))
	  (if (> y err) (begin (set! mx x) (set! err y))))))
  (if (> err 1e-14)
      (format #t ";(exp (log ~A)) error: ~A~%" mx err)))

(let ((err 0.0)
      (mx 0.0))
  (do ((i 0 (+ i 1))
       (x -10.0+i (+ x 0.1-0.1i)))
      ((= i 200))
    (if (not (zero? x))
	(let ((y (magnitude (- x (exp (log x))))))
	  (if (> y err) (begin (set! err y) (set! mx x))))))
  (if (> err 1e-14)
      (format #t ";(exp (log ~A)) error: ~A~%" mx err)))

(do ((i 0 (+ i 1)))
    ((= i 100))
  (let ((val (+ .001 (random 100.0)))
	(base (+ 2 (random 20))))
    (num-test (log val base) (/ (log val) (log base)))))

(do ((i 0 (+ i 1)))
    ((= i 100))
  (let ((val (+ .001 (random 10000.0)))
	(base (+ 1.0 (random 20.0))))
    (num-test (log val base) (/ (log val) (log base)))))

(let ((val1 (catch #t (lambda () (log 0.0)) (lambda args 'error)))
      (val2 (catch #t (lambda () (log -0.0)) (lambda args 'error))))
  (test (equal? val1 val2) #t))

(do ((i 0 (+ i 1)))
    ((= i 100))
  (let ((val (+ .001 (random 100.0)))
	(base (+ 2 (random 20))))
    (if (> (random 1.0) 0.5) (set! val (- val)))
    (if (> (random 1.0) 0.5) (set! base (- base)))
    (num-test (log val base) (/ (log val) (log base)))))

(do ((i 0 (+ i 1)))
    ((= i 100))
  (let ((val (+ .001 (random 10000.0)))
	(base (+ 1.0 (random 20.0))))
    (if (> (random 1.0) 0.5) (set! val (- val)))
    (if (> (random 1.0) 0.5) (set! base (- base)))
    (num-test (log val base) (/ (log val) (log base)))))

(do ((i 0 (+ i 1)))
    ((= i 100))
  (let ((val1 (+ .001 (random 10000.0)))
	(val2 (+ .001 (random 10000.0)))
	(base1 (+ 1.0 (random 20.0)))
	(base2 (+ 1.0 (random 20.0))))
    (if (> (random 1.0) 0.5) (set! val1 (- val1)))
    (if (> (random 1.0) 0.5) (set! val2 (- val2)))
    (if (> (random 1.0) 0.5) (set! base1 (- base1)))
    (if (> (random 1.0) 0.5) (set! base2 (- base2)))
    (let ((val (make-rectangular val1 val2))
	  (base (make-rectangular base1 base2)))
      (num-test (log val base) (/ (log val) (log base))))))

(if (not with-bignums) 
    (num-test (log 1 0) 0)) ; since (expt 0 0) is 1

(if with-bignums
    (begin
      (num-test (log (expt 2 16382)) 1.135513711193302405887309661372784853823E4)
      (num-test (log -1.797693134862315699999999999999999999998E308) 7.097827128933839967276924307167005609752E2+3.141592653589793238462643383279502884195E0i)
      (num-test (log -2.225073858507201399999999999999999999996E-308) -7.083964185322641062168115849912137186655E2+3.141592653589793238462643383279502884195E0i)
      (num-test (log 69720375229712477164533808935312303556800) 9.40453112293573922460049312446069272415E1)
      (num-test (log 100.0 (+ 1.0 (bignum "1e-16"))) 4.605170185988091598294419229104461919985E16)
      (num-test (expt (+ 1.0 (bignum "1e-16")) 4.605170185988091598294419229104461919985E16) 100.0)
      (num-test (log 100.0 (+ 1.0 (bignum "1e-34"))) 4.60520221864866031976806443342804401709E34)
      (num-test (expt (+ 1.0 (bignum "1e-34")) 4.60520221864866031976806443342804401709E34) 100.0)
      (num-test (expt (+ 1 1e-16) (log 100.0 (+ 1 1e-16))) 100.0)
      (num-test (+ 100 (expt 10.0 35) (- (expt 10.0 35))) 100.0)
      (num-test (log 1/9223372036854775808 2) -63) 
      (num-test (log 9223372036854775808 2) 63)
      (num-test (log 9223372036854775807/9223372036854775806 9223372036854775806/9223372036854775807) -9.999999999999999999999999999999999999647E-1)
      ))

(let ((logs-1 (list
	       -4.60517018598809136803598290936872841520220297725754595206665580193514
	       -3.91202300542814605861875078791055184712670284289729069794597579244175
	       -3.50655789731998167664073767244620271055471241943479650033196146829765
	       -3.21887582486820074920151866645237527905120270853703544382529578294835
	       -2.99573227355399099343522357614254077567660162298902823015400791046096
	       -2.81341071676003636722350555098802614247921228507454124621128145880425
	       -2.65926003693277806293063016592554868556511824767568476360726565199756
	       -2.52572864430825543978428654499419871097570257417678018970461577345496
	       -2.40794560865187198524549243552367700590722186161204704859726713466015
	       -2.30258509299404568401799145468436420760110148862877297603332790096757
	       -2.20727491318972082397403933140359911538049612332012877684808809280457
	       -2.12026353620009105780627342952984957440371215071428599209060144931086
	       -2.04022082852655463198249546780340981039693503249733883564761029127168
	       -1.96611285637283275351339804446737211748961811331542950948658564250417
	       -1.89711998488588130203997833922001507102911106516627877841931357682347
	       -1.83258146374831013036705442353602214290020243981652493558393576396157
	       -1.77195684193187528778644829149560187961399996467180116476941806405285
	       -1.71479842809192667582826031406550043783172172725179179447658712516676
	       -1.66073120682165090802695547748087487796482371595841713352869556552585
	       -1.60943791243410037460075933322618763952560135426851772191264789147417))
      (logs-2 (list
	       2.30258509299404568401799145468436420760110148862877297603332790096757
	       2.99573227355399099343522357614254077567660162298902823015400791046096
	       3.40119738166215537541323669160688991224859204645152242776802223460506
	       3.68887945411393630285245569760071734375210175734928348427468791995435
	       3.91202300542814605861875078791055184712670284289729069794597579244175
	       4.09434456222210068483046881306506648032409218081177768188870224409846
	       4.24849524204935898912334419812754393723818621821063416449271805090515
	       4.38202663467388161226968781905889391182760189170953873839536792944775
	       4.49980967033026506680848192852941561689608260427427187950271656824256
	       4.60517018598809136803598290936872841520220297725754595206665580193514
	       4.70048036579241622807993503264949350742280834256619015125189561009814
	       4.78749174278204599424770093452324304839959231517203293600938225359185
	       4.86753445045558242007147889624968281240636943338898009245237341163103
	       4.94164242260930429854057631958572050531368635257088941861339806039854
	       5.01063529409625575001399602483307755177419340072004014968067012607924
	       5.07517381523382692168691994051707047990310202606979399251604793894114
	       5.13579843705026176426752607255749074318930450121451776333056563884986
	       5.19295685089021037622571404998759218497158273863452713362339657773595
	       5.24702407216048614402701888657221774483848074992790179457128813737686
	       5.29831736654803667745321503082690498327770311161780120618733581142853)))
  (let ((mxerr 0.0))
    (do ((i 0 (+ i 1))
	 (x 0.01 (+ x 0.01))
	 (y 10.0 (+ y 10.0)))
	((= i 20))
      (let ((err (max (abs (- (log x) (list-ref logs-1 i)))
		      (abs (- (log y) (list-ref logs-2 i))))))
	(if (> err mxerr)
	    (set! mxerr err))))
    (if (> mxerr 1e-12) (format #t "log err: ~A~%" mxerr))))

(if with-bignums
    (let ((old-prec (bignum-precision)))
      (set! (bignum-precision) 500)
      (let ((logs (list ; table[Log[k/10 + 1.0], {k, 0, 30}]
		   0.00000000000000000000000000000000000000000000000000000000000000000000e0
		   0.09531017980432486004395212328076509222060536530864419918523980816300
		   0.18232155679395462621171802515451463319738933791448698394272645165670
		   0.26236426446749105203549598688095439720416645613143414038571760969589
		   0.33647223662121293050459341021699209011148337531334346654674225846340
		   0.40546510810816438197801311546434913657199042346249419761401432414410
		   0.47000362924573555365093703114834206470089904881224804044939213700600
		   0.53062825106217039623154316318876232798710152395697181126390983691471
		   0.58778666490211900818973114061886376976937976137698118155674077580080
		   0.64185388617239477599103597720348932963627777267035584250463233544172
		   0.69314718055994530941723212145817656807550013436025525412068000949339
		   0.74193734472937731248260652568134122668347379877583766416075658260750
		   0.78845736036427016946118424473894166029610549966889945330591981765639
		   0.83290912293510400678876137712583191084127882621166276596530747651542
		   0.87546873735389993562895014661269120127288947227474223806340646115010
		   0.91629073187415506518352721176801107145010121990826246779196788198078
		   0.95551144502743636145272810833913096527966659049168939450639761918928
		   0.99325177301028339016774425608321290634137018483947537917075509994491
		   1.02961941718115823992182553167516865818698350967359872066742226795679
		   1.06471073699242834316528057767754739789341142529397110288834245067520
		   1.09861228866810969139524523692252570464749055782274945173469433363749
		   1.13140211149110056191117286985799300284883744185181899572339017150740
		   1.16315080980568086306816915260651863277639918317250329457007214649939
		   1.19392246847243455143919736020329079686809592313139365091993414180049
		   1.22377543162211570564877528464693889606260165831722706538458984640811
		   1.25276296849536799568812062198500316156158459522160593433871014044418
		   1.28093384546206431760696326207704033784487989573723643567742078529420
		   1.30833281965017876035010421634708295629897609853886318761158478022541
		   1.33500106673234008540826809866166589771177790703061109662531234493511
		   1.36097655313560074343074122380348010185165701395418359212041194333338
		   1.38629436111989061883446424291635313615100026872051050824136001898678)))
	
	(do ((i 0 (+ i 1)))
	    ((= i 30))
	  (let ((val (log (+ (/ i (bignum "10")) (bignum "1.0")))))
	    (if (> (magnitude (- val (list-ref logs i))) 1e-36)
		(format #t ";(log ~A) -> ~A ~A~%[~A]~%" (+ 1.0 (/ i 10)) val (list-ref logs i) (magnitude (- val (list-ref logs i))))))))
      (set! (bignum-precision) old-prec)))
	
(test (log) 'error)
(test (log "hi") 'error)
(test (log 1.0+23.0i 1.0+23.0i 1.0+23.0i) 'error)
(test (log "hi" (expt 2 30)) 'error)
(test (log (expt 2 30) #t) 'error)
(test (log 0 0) 'error)
(test (log 3 0) 'error)

(for-each
 (lambda (arg)
   (test (log arg) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))

(for-each
 (lambda (arg)
   (test (log arg nan.0) 'error)
   (test (log nan.0 arg) 'error)
   (test (log arg inf.0) 'error)
   (test (log inf.0 arg) 'error)
   (test (log 10 arg) 'error)
   (test (log arg 10) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))
