(num-test (sin -0.0+0.00000001i) 0.0+0.00000001i)
(num-test (sin -0.0+0.0i) 0.0)
(num-test (sin -0.0+1.0i) 0.0+1.17520119364380i)
(num-test (sin -0.0+2.71828182845905i) 0.0+7.54413710281697i)
(num-test (sin -0.0+3.14159265358979i) 0.0+11.54873935725775i)
(num-test (sin -0.0-0.00000001i) -0.0-0.00000001i)
(num-test (sin -0.0-0.0i) 0.0)
(num-test (sin -0.0-1.0i) -0.0-1.17520119364380i)
(num-test (sin -0.0-2.71828182845905i) -0.0-7.54413710281697i)
(num-test (sin -0.0-3.14159265358979i) -0.0-11.54873935725775i)
(num-test (sin -0.00000001) -0.00000001)
(num-test (sin -0.00000001+0.00000001i) -0.00000001+0.00000001i)
(num-test (sin -0.00000001+0.0i) -0.00000001)
(num-test (sin -0.00000001+1.0i) -0.00000001543081+1.17520119364380i)
(num-test (sin -0.00000001+2.71828182845905i) -0.00000007610125+7.54413710281697i)
(num-test (sin -0.00000001+3.14159265358979i) -0.00000011591953+11.54873935725775i)
(num-test (sin -0.00000001-0.00000001i) -0.00000001-0.00000001i)
(num-test (sin -0.00000001-0.0i) -0.00000001)
(num-test (sin -0.00000001-1.0i) -0.00000001543081-1.17520119364380i)
(num-test (sin -0.00000001-2.71828182845905i) -0.00000007610125-7.54413710281697i)
(num-test (sin -0.00000001-3.14159265358979i) -0.00000011591953-11.54873935725775i)
(num-test (sin -1) -0.84147098480790)
(num-test (sin -1.0) -0.84147098480790)
(num-test (sin -1.0+0.00000001i) -0.84147098480790+0.00000000540302i)
(num-test (sin -1.0+0.0i) -0.84147098480790)
(num-test (sin -1.0+1.0i) -1.29845758141598+0.63496391478474i)
(num-test (sin -1.0+2.71828182845905i) -6.40369949494148+4.07611467243740i)
(num-test (sin -1.0+3.14159265358979i) -9.75429233860021+6.23981050459650i)
(num-test (sin -1.0-0.00000001i) -0.84147098480790-0.00000000540302i)
(num-test (sin -1.0-0.0i) -0.84147098480790)
(num-test (sin -1.0-1.0i) -1.29845758141598-0.63496391478474i)
(num-test (sin -1.0-2.71828182845905i) -6.40369949494148-4.07611467243740i)
(num-test (sin -1.0-3.14159265358979i) -9.75429233860021-6.23981050459650i)
(num-test (sin -1.57045105981189525579e+00+0.0e+00i) -9.9999994039535581669e-1)
(num-test (sin -1.57045105981189525579e+00+1.0e+00i) -1.5430805428404715942e0+4.0575816248730593018e-4i)
(num-test (sin -1.57045105981189525579e+00+1.19209289550781250e-07i) -9.9999994039536292211e-1+4.1159030931177815679e-11i)
(num-test (sin -1.57045105981189525579e+00+2.0e+00i) -3.7621954668392959445e0+1.2522351259047577385e-3i)
(num-test (sin -1.57045105981189525579e+00+5.0e-01i) -1.1276258979946363572e0+1.7991700040937027667e-4i)
(num-test (sin -1.57045105981189525579e+00-1.0e+00i) -1.5430805428404715942e0-4.0575816248730593018e-4i)
(num-test (sin -1.57045105981189525579e+00-1.19209289550781250e-07i) -9.9999994039536292211e-1-4.1159030931177815679e-11i)
(num-test (sin -1.57045105981189525579e+00-2.0e+00i) -3.7621954668392959445e0-1.2522351259047577385e-3i)
(num-test (sin -1.57045105981189525579e+00-5.0e-01i) -1.1276258979946363572e0-1.7991700040937027667e-4i)
(num-test (sin -1.57114159377789786021e+00+0.0e+00i) -9.9999994039535581673e-1)
(num-test (sin -1.57114159377789786021e+00+1.0e+00i) -1.5430805428404715942e0-4.0575816248716200955e-4i)
(num-test (sin -1.57114159377789786021e+00+1.19209289550781250e-07i) -9.9999994039536292216e-1-4.1159030931163216752e-11i)
(num-test (sin -1.57114159377789786021e+00+2.0e+00i) -3.7621954668392959447e0-1.2522351259043135762e-3i)
(num-test (sin -1.57114159377789786021e+00+5.0e-01i) -1.1276258979946363573e0-1.7991700040930646090e-4i)
(num-test (sin -1.57114159377789786021e+00-1.0e+00i) -1.5430805428404715942e0+4.0575816248716200955e-4i)
(num-test (sin -1.57114159377789786021e+00-1.19209289550781250e-07i) -9.9999994039536292216e-1+4.1159030931163216752e-11i)
(num-test (sin -1.57114159377789786021e+00-2.0e+00i) -3.7621954668392959447e0+1.2522351259043135762e-3i)
(num-test (sin -1.57114159377789786021e+00-5.0e-01i) -1.1276258979946363573e0+1.7991700040930646090e-4i)
(num-test (sin -1/1) -0.84147098480790)
(num-test (sin -1/10) -0.09983341664683)
(num-test (sin -1/1234) -0.00081037268278)
(num-test (sin -1/1234000000) -0.00000000081037)
(num-test (sin -1/2) -0.47942553860420)
(num-test (sin -1/3) -0.32719469679615)
(num-test (sin -1/362880) -0.00000275573192)
(num-test (sin -1/500029) -0.00000199988401)
(num-test (sin -10/1234) -0.00810363901920)
(num-test (sin -10/1234000000) -0.00000000810373)
(num-test (sin -10/362880) -0.00002755731922)
(num-test (sin -10/500029) -0.00001999884007)
(num-test (sin -1234/1234000000) -0.00000100000000)
(num-test (sin -1234/362880) -0.00340056663826)
(num-test (sin -1234/500029) -0.00246785435930)
(num-test (sin -1234000000/1234000000) -0.84147098480790)
(num-test (sin -2) -0.90929742682568)
(num-test (sin -2.225073858507201399999999999999999999996E-308) -2.225073858507201399999999999999999999996E-308)
(num-test (sin -2/1) -0.90929742682568)
(num-test (sin -2/10) -0.19866933079506)
(num-test (sin -2/1234) -0.00162074483338)
(num-test (sin -2/1234000000) -0.00000000162075)
(num-test (sin -2/3) -0.61836980306974)
(num-test (sin -2/362880) -0.00000551146384)
(num-test (sin -2/500029) -0.00000399976801)
(num-test (sin -3.14124738660679181379e+00+0.0e+00i) -3.4526697614158608860e-4)
(num-test (sin -3.14124738660679181379e+00+1.0e+00i) -5.3277478472529828958e-4-1.1752011235963524659e0i)
(num-test (sin -3.14124738660679181379e+00+1.19209289550781250e-07i) -3.4526697614158854187e-4-1.1920928244535424532e-7i)
(num-test (sin -3.14124738660679181379e+00+2.0e+00i) -1.2989619299133501696e-3-3.6268601916692946553e0i)
(num-test (sin -3.14124738660679181379e+00+5.0e-01i) -3.8933200722554445944e-4-5.2109527443404709206e-1i)
(num-test (sin -3.14124738660679181379e+00-1.0e+00i) -5.3277478472529828958e-4+1.1752011235963524659e0i)
(num-test (sin -3.14124738660679181379e+00-1.19209289550781250e-07i) -3.4526697614158854187e-4+1.1920928244535424532e-7i)
(num-test (sin -3.14124738660679181379e+00-2.0e+00i) -1.2989619299133501696e-3+3.6268601916692946553e0i)
(num-test (sin -3.14124738660679181379e+00-5.0e-01i) -3.8933200722554445944e-4+5.2109527443404709206e-1i)
(num-test (sin -3.14193792057279441821e+00+0.0e+00i) 3.4526697614134115926e-4)
(num-test (sin -3.14193792057279441821e+00+1.0e+00i) 5.3277478472492034385e-4-1.1752011235963524660e0i)
(num-test (sin -3.14193792057279441821e+00+1.19209289550781250e-07i) 3.4526697614134361253e-4-1.1920928244535424533e-7i)
(num-test (sin -3.14193792057279441821e+00+2.0e+00i) 1.2989619299124286975e-3-3.6268601916692946556e0i)
(num-test (sin -3.14193792057279441821e+00+5.0e-01i) 3.8933200722526827075e-4-5.2109527443404709211e-1i)
(num-test (sin -3.14193792057279441821e+00-1.0e+00i) 5.3277478472492034385e-4+1.1752011235963524660e0i)
(num-test (sin -3.14193792057279441821e+00-1.19209289550781250e-07i) 3.4526697614134361253e-4+1.1920928244535424533e-7i)
(num-test (sin -3.14193792057279441821e+00-2.0e+00i) 1.2989619299124286975e-3+3.6268601916692946556e0i)
(num-test (sin -3.14193792057279441821e+00-5.0e-01i) 3.8933200722526827075e-4+5.2109527443404709211e-1i)
(num-test (sin -3.45266983001243932001e-04+0.0e+00i) -3.4526697614140534807e-4)
(num-test (sin -3.45266983001243932001e-04+1.0e+00i) -5.3277478472501939236e-4+1.1752011235963524660e0i)
(num-test (sin -3.45266983001243932001e-04+1.19209289550781250e-07i) -3.4526697614140780134e-4+1.1920928244535424533e-7i)
(num-test (sin -3.45266983001243932001e-04+2.0e+00i) -1.2989619299126701883e-3+3.6268601916692946556e0i)
(num-test (sin -3.45266983001243932001e-04+5.0e-01i) -3.8933200722534065172e-4+5.2109527443404709209e-1i)
(num-test (sin -3.45266983001243932001e-04-1.0e+00i) -5.3277478472501939236e-4-1.1752011235963524660e0i)
(num-test (sin -3.45266983001243932001e-04-1.19209289550781250e-07i) -3.4526697614140780134e-4-1.1920928244535424533e-7i)
(num-test (sin -3.45266983001243932001e-04-2.0e+00i) -1.2989619299126701883e-3-3.6268601916692946556e0i)
(num-test (sin -3.45266983001243932001e-04-5.0e-01i) -3.8933200722534065172e-4-5.2109527443404709209e-1i)
(num-test (sin -3/10) -0.29552020666134)
(num-test (sin -3/1234) -0.00243111591964)
(num-test (sin -3/1234000000) -0.00000000243112)
(num-test (sin -3/2) -0.99749498660405)
(num-test (sin -3/362880) -0.00000826719577)
(num-test (sin -3/500029) -0.00000599965202)
(num-test (sin -362880/1234000000) -0.00029406806707)
(num-test (sin -4.71204371340168837179e+00+0.0e+00i) 9.9999994039535581664e-1)
(num-test (sin -4.71204371340168837179e+00+1.0e+00i) 1.5430805428404715941e0-4.0575816248744985081e-4i)
(num-test (sin -4.71204371340168837179e+00+1.19209289550781250e-07i) 9.9999994039536292207e-1-4.1159030931192414605e-11i)
(num-test (sin -4.71204371340168837179e+00+2.0e+00i) 3.7621954668392959444e0-1.2522351259052019007e-3i)
(num-test (sin -4.71204371340168837179e+00+5.0e-01i) 1.1276258979946363572e0-1.7991700040943409243e-4i)
(num-test (sin -4.71204371340168837179e+00-1.0e+00i) 1.5430805428404715941e0+4.0575816248744985081e-4i)
(num-test (sin -4.71204371340168837179e+00-1.19209289550781250e-07i) 9.9999994039536292207e-1+4.1159030931192414605e-11i)
(num-test (sin -4.71204371340168837179e+00-2.0e+00i) 3.7621954668392959444e0+1.2522351259052019007e-3i)
(num-test (sin -4.71204371340168837179e+00-5.0e-01i) 1.1276258979946363572e0+1.7991700040943409243e-4i)
(num-test (sin -4.71273424736769097620e+00+0.0e+00i) 9.9999994039535581677e-1)
(num-test (sin -4.71273424736769097620e+00+1.0e+00i) 1.5430805428404715943e0+4.0575816248701808892e-4i)
(num-test (sin -4.71273424736769097620e+00+1.19209289550781250e-07i) 9.9999994039536292220e-1+4.1159030931148617825e-11i)
(num-test (sin -4.71273424736769097620e+00+2.0e+00i) 3.7621954668392959448e0+1.2522351259038694139e-3i)
(num-test (sin -4.71273424736769097620e+00+5.0e-01i) 1.1276258979946363573e0+1.7991700040924264514e-4i)
(num-test (sin -4.71273424736769097620e+00-1.0e+00i) 1.5430805428404715943e0-4.0575816248701808892e-4i)
(num-test (sin -4.71273424736769097620e+00-1.19209289550781250e-07i) 9.9999994039536292220e-1-4.1159030931148617825e-11i)
(num-test (sin -4.71273424736769097620e+00-2.0e+00i) 3.7621954668392959448e0-1.2522351259038694139e-3i)
(num-test (sin -4.71273424736769097620e+00-5.0e-01i) 1.1276258979946363573e0-1.7991700040924264514e-4i)
(num-test (sin -500029/1234000000) -0.00040520987546)
(num-test (sin -500029/362880) -0.98146191370834)
(num-test (sin -6.28284004019658492979e+00+0.0e+00i) 3.4526697614170855328e-4)
(num-test (sin -6.28284004019658492979e+00+1.0e+00i) 5.3277478472548726245e-4+1.1752011235963524659e0i)
(num-test (sin -6.28284004019658492979e+00+1.19209289550781250e-07i) 3.4526697614171100655e-4+1.1920928244535424532e-7i)
(num-test (sin -6.28284004019658492979e+00+2.0e+00i) 1.2989619299138109057e-3+3.6268601916692946552e0i)
(num-test (sin -6.28284004019658492979e+00+5.0e-01i) 3.8933200722568255379e-4+5.2109527443404709204e-1i)
(num-test (sin -6.28284004019658492979e+00-1.0e+00i) 5.3277478472548726245e-4-1.1752011235963524659e0i)
(num-test (sin -6.28284004019658492979e+00-1.19209289550781250e-07i) 3.4526697614171100655e-4-1.1920928244535424532e-7i)
(num-test (sin -6.28284004019658492979e+00-2.0e+00i) 1.2989619299138109057e-3-3.6268601916692946552e0i)
(num-test (sin -6.28284004019658492979e+00-5.0e-01i) 3.8933200722568255379e-4-5.2109527443404709204e-1i)
(num-test (sin -6.28353057416258753420e+00+0.0e+00i) -3.4526697614121869459e-4)
(num-test (sin -6.28353057416258753420e+00+1.0e+00i) -5.3277478472473137099e-4+1.1752011235963524661e0i)
(num-test (sin -6.28353057416258753420e+00+1.19209289550781250e-07i) -3.4526697614122114786e-4+1.1920928244535424534e-7i)
(num-test (sin -6.28353057416258753420e+00+2.0e+00i) -1.2989619299119679614e-3+3.6268601916692946558e0i)
(num-test (sin -6.28353057416258753420e+00+5.0e-01i) -3.8933200722513017641e-4+5.2109527443404709213e-1i)
(num-test (sin -6.28353057416258753420e+00-1.0e+00i) -5.3277478472473137099e-4-1.1752011235963524661e0i)
(num-test (sin -6.28353057416258753420e+00-1.19209289550781250e-07i) -3.4526697614122114786e-4-1.1920928244535424534e-7i)
(num-test (sin -6.28353057416258753420e+00-2.0e+00i) -1.2989619299119679614e-3-3.6268601916692946558e0i)
(num-test (sin -6.28353057416258753420e+00-5.0e-01i) -3.8933200722513017641e-4-5.2109527443404709213e-1i)
(num-test (sin -9.42443269378637893396e+00+0.0e+00i) -3.4526697614094283958e-4)
(num-test (sin -9.42443269378637893396e+00+1.0e+00i) -5.3277478472430570447e-4-1.1752011235963524662e0i)
(num-test (sin -9.42443269378637893396e+00+1.19209289550781250e-07i) -3.4526697614094529285e-4-1.1920928244535424535e-7i)
(num-test (sin -9.42443269378637893396e+00+2.0e+00i) -1.2989619299109301409e-3-3.6268601916692946561e0i)
(num-test (sin -9.42443269378637893396e+00+5.0e-01i) -3.8933200722481911514e-4-5.2109527443404709218e-1i)
(num-test (sin -9.42443269378637893396e+00-1.0e+00i) -5.3277478472430570447e-4+1.1752011235963524662e0i)
(num-test (sin -9.42443269378637893396e+00-1.19209289550781250e-07i) -3.4526697614094529285e-4+1.1920928244535424535e-7i)
(num-test (sin -9.42443269378637893396e+00-2.0e+00i) -1.2989619299109301409e-3+3.6268601916692946561e0i)
(num-test (sin -9.42443269378637893396e+00-5.0e-01i) -3.8933200722481911514e-4+5.2109527443404709218e-1i)
(num-test (sin -9.42512322775237976202e+00+0.0e+00i) 3.4526697614020805155e-4)
(num-test (sin -9.42512322775237976202e+00+1.0e+00i) 5.3277478472317186729e-4-1.1752011235963524665e0i)
(num-test (sin -9.42512322775237976202e+00+1.19209289550781250e-07i) 3.4526697614021050482e-4-1.1920928244535424538e-7i)
(num-test (sin -9.42512322775237976202e+00+2.0e+00i) 1.2989619299081657245e-3-3.6268601916692946571e0i)
(num-test (sin -9.42512322775237976202e+00+5.0e-01i) 3.8933200722399054908e-4-5.2109527443404709231e-1i)
(num-test (sin -9.42512322775237976202e+00-1.0e+00i) 5.3277478472317186729e-4+1.1752011235963524665e0i)
(num-test (sin -9.42512322775237976202e+00-1.19209289550781250e-07i) 3.4526697614021050482e-4+1.1920928244535424538e-7i)
(num-test (sin -9.42512322775237976202e+00-2.0e+00i) 1.2989619299081657245e-3+3.6268601916692946571e0i)
(num-test (sin -9.42512322775237976202e+00-5.0e-01i) 3.8933200722399054908e-4+5.2109527443404709231e-1i)
(num-test (sin 0) 0.0)
(num-test (sin 0.0) 0.0)
(num-test (sin 0.0+0.00000001i) 0.0+0.00000001i)
(num-test (sin 0.0+0.0i) 0.0)
(num-test (sin 0.0+1.0i) 0.0+1.17520119364380i)
(num-test (sin 0.0+2.71828182845905i) 0.0+7.54413710281697i)
(num-test (sin 0.0+3.14159265358979i) 0.0+11.54873935725775i)
(num-test (sin 0.0-0.00000001i) 0.0-0.00000001i)
(num-test (sin 0.0-0.0i) 0.0)
(num-test (sin 0.0-1.0i) 0.0-1.17520119364380i)
(num-test (sin 0.0-2.71828182845905i) 0.0-7.54413710281697i)
(num-test (sin 0.0-3.14159265358979i) 0.0-11.54873935725775i)
(num-test (sin 0.00000001) 0.00000001)
(num-test (sin 0.00000001+0.00000001i) 0.00000001+0.00000001i)
(num-test (sin 0.00000001+0.0i) 0.00000001)
(num-test (sin 0.00000001+1.0i) 0.00000001543081+1.17520119364380i)
(num-test (sin 0.00000001+2.71828182845905i) 0.00000007610125+7.54413710281697i)
(num-test (sin 0.00000001+3.14159265358979i) 0.00000011591953+11.54873935725775i)
(num-test (sin 0.00000001-0.00000001i) 0.00000001-0.00000001i)
(num-test (sin 0.00000001-0.0i) 0.00000001)
(num-test (sin 0.00000001-1.0i) 0.00000001543081-1.17520119364380i)
(num-test (sin 0.00000001-2.71828182845905i) 0.00000007610125-7.54413710281697i)
(num-test (sin 0.00000001-3.14159265358979i) 0.00000011591953-11.54873935725775i)
(num-test (sin 0/1) 0.0)
(num-test (sin 0/1234000000) 0.0)
(num-test (sin 0/500029) 0.0)
(num-test (sin 1) 0.84147098480790)
(num-test (sin 1.0) 0.84147098480790)
(num-test (sin 1.0+0.00000001i) 0.84147098480790+0.00000000540302i)
(num-test (sin 1.0+0.0i) 0.84147098480790)
(num-test (sin 1.0+1.0i) 1.29845758141598+0.63496391478474i)
(num-test (sin 1.0+2.71828182845905i) 6.40369949494148+4.07611467243740i)
(num-test (sin 1.0+3.14159265358979i) 9.75429233860021+6.23981050459650i)
(num-test (sin 1.0-0.00000001i) 0.84147098480790-0.00000000540302i)
(num-test (sin 1.0-0.0i) 0.84147098480790)
(num-test (sin 1.0-1.0i) 1.29845758141598-0.63496391478474i)
(num-test (sin 1.0-2.71828182845905i) 6.40369949494148-4.07611467243740i)
(num-test (sin 1.0-3.14159265358979i) 9.75429233860021-6.23981050459650i)
(num-test (sin 1.110223024625156799999999999999999999997E-16) 1.11022302462515679999999999999999771924E-16)
(num-test (sin 1.57045105981189525579e+00+0.0e+00i) 9.9999994039535581669e-1)
(num-test (sin 1.57045105981189525579e+00+1.0e+00i) 1.5430805428404715942e0+4.0575816248730593018e-4i)
(num-test (sin 1.57045105981189525579e+00+1.19209289550781250e-07i) 9.9999994039536292211e-1+4.1159030931177815679e-11i)
(num-test (sin 1.57045105981189525579e+00+2.0e+00i) 3.7621954668392959445e0+1.2522351259047577385e-3i)
(num-test (sin 1.57045105981189525579e+00+5.0e-01i) 1.1276258979946363572e0+1.7991700040937027667e-4i)
(num-test (sin 1.57045105981189525579e+00-1.0e+00i) 1.5430805428404715942e0-4.0575816248730593018e-4i)
(num-test (sin 1.57045105981189525579e+00-1.19209289550781250e-07i) 9.9999994039536292211e-1-4.1159030931177815679e-11i)
(num-test (sin 1.57045105981189525579e+00-2.0e+00i) 3.7621954668392959445e0-1.2522351259047577385e-3i)
(num-test (sin 1.57045105981189525579e+00-5.0e-01i) 1.1276258979946363572e0-1.7991700040937027667e-4i)
(num-test (sin 1.57114159377789786021e+00+0.0e+00i) 9.9999994039535581673e-1)
(num-test (sin 1.57114159377789786021e+00+1.0e+00i) 1.5430805428404715942e0-4.0575816248716200955e-4i)
(num-test (sin 1.57114159377789786021e+00+1.19209289550781250e-07i) 9.9999994039536292216e-1-4.1159030931163216752e-11i)
(num-test (sin 1.57114159377789786021e+00+2.0e+00i) 3.7621954668392959447e0-1.2522351259043135762e-3i)
(num-test (sin 1.57114159377789786021e+00+5.0e-01i) 1.1276258979946363573e0-1.7991700040930646090e-4i)
(num-test (sin 1.57114159377789786021e+00-1.0e+00i) 1.5430805428404715942e0+4.0575816248716200955e-4i)
(num-test (sin 1.57114159377789786021e+00-1.19209289550781250e-07i) 9.9999994039536292216e-1+4.1159030931163216752e-11i)
(num-test (sin 1.57114159377789786021e+00-2.0e+00i) 3.7621954668392959447e0+1.2522351259043135762e-3i)
(num-test (sin 1.57114159377789786021e+00-5.0e-01i) 1.1276258979946363573e0+1.7991700040930646090e-4i)
(num-test (sin 1/1) 0.84147098480790)
(num-test (sin 1/10) 0.09983341664683)
(num-test (sin 1/1234) 0.00081037268278)
(num-test (sin 1/1234000000) 0.00000000081037)
(num-test (sin 1/2) 0.47942553860420)
(num-test (sin 1/3) 0.32719469679615)
(num-test (sin 1/362880) 0.00000275573192)
(num-test (sin 1/500029) 0.00000199988401)
(num-test (sin 10/1234) 0.00810363901920)
(num-test (sin 10/1234000000) 0.00000000810373)
(num-test (sin 10/3) -0.1905679628754527) 
(num-test (sin 10/362880) 0.00002755731922)
(num-test (sin 10/500029) 0.00001999884007)
(num-test (sin 1234.0+0.00000001i) .6019276547624973-7.985506235875843E-9i) 
(num-test (sin 1234.0+12.0i) 48983.30495194942-64983.97008730317i)
(num-test (sin 1234.0+2.71828182845905i) 4.58074477716391-6.024375387884452i) 
(num-test (sin 1234.0+3.14159265358979i) 6.977517249251167-9.222253015388718i) 
(num-test (sin 1234/10) -0.7693905459455223) 
(num-test (sin 1234/1234000000) 0.00000100000000)
(num-test (sin 1234/3) 0.213644699569724) 
(num-test (sin 1234/362880) 0.00340056663826)
(num-test (sin 1234/500029) 0.00246785435930)
(num-test (sin 1234000000.0+0.00000001i) -0.9872932128398908+1.5890913089022285E-9i) 
(num-test (sin 1234000000.0+2.71828182845905i) -7.513424898263172+1.198832270325275i) 
(num-test (sin 1234000000.0+3.14159265358979i) -11.44465679247962+1.835200134139553i) 
(num-test (sin 1234000000/1234000000) 0.84147098480790)
(num-test (sin 1234000000/3) 9.98585468017658e-1)
(num-test (sin 1234000000/362880) .9798963032808383) 
(num-test (sin 1234000000/500029) -0.9907886154453116) 
(num-test (sin 2) 0.90929742682568)
(num-test (sin 2.71828182845905) .4107812905029501) 
(num-test (sin 2.71828182845905+0.00000001i) .4107812905029501-9.117339147869465E-9i) 
(num-test (sin 2.71828182845905+0.0i) .4107812905029501) 
(num-test (sin 2.71828182845905+1.0i) .6338686545195173-1.071470784943156i) 
(num-test (sin 2.71828182845905+2.71828182845905i) 3.126097025348496-6.878245654440458i) 
(num-test (sin 2.71828182845905+3.14159265358979i) 4.761757525968664-10.52937734504676i) 
(num-test (sin 2/10) 0.19866933079506)
(num-test (sin 2/1234) 0.00162074483338)
(num-test (sin 2/1234000000) 0.00000000162075)
(num-test (sin 2/3) 0.61836980306974)
(num-test (sin 2/362880) 0.00000551146384)
(num-test (sin 2/500029) 0.00000399976801)
(num-test (sin 3.14124738660679181379e+00+0.0e+00i) 3.4526697614158608860e-4)
(num-test (sin 3.14124738660679181379e+00+1.0e+00i) 5.3277478472529828958e-4-1.1752011235963524659e0i)
(num-test (sin 3.14124738660679181379e+00+1.19209289550781250e-07i) 3.4526697614158854187e-4-1.1920928244535424532e-7i)
(num-test (sin 3.14124738660679181379e+00+2.0e+00i) 1.2989619299133501696e-3-3.6268601916692946553e0i)
(num-test (sin 3.14124738660679181379e+00+5.0e-01i) 3.8933200722554445944e-4-5.2109527443404709206e-1i)
(num-test (sin 3.14124738660679181379e+00-1.0e+00i) 5.3277478472529828958e-4+1.1752011235963524659e0i)
(num-test (sin 3.14124738660679181379e+00-1.19209289550781250e-07i) 3.4526697614158854187e-4+1.1920928244535424532e-7i)
(num-test (sin 3.14124738660679181379e+00-2.0e+00i) 1.2989619299133501696e-3+3.6268601916692946553e0i)
(num-test (sin 3.14124738660679181379e+00-5.0e-01i) 3.8933200722554445944e-4+5.2109527443404709206e-1i)
(num-test (sin 3.14159265358979+0.00000001i) -6.982889851335445E-15-1.0E-8i) 
(num-test (sin 3.14159265358979+0.0i) -6.982889851335445E-15) 
(num-test (sin 3.14159265358979+1.0i) -1.077516210464362E-14-1.175201193643801i) 
(num-test (sin 3.14159265358979+2.71828182845905i) -5.314066559815525E-14-7.54413710281663i) 
(num-test (sin 3.14159265358979+3.14159265358979i) -8.094533288479446E-14-11.54873935725783i) 
(num-test (sin 3.14193792057279441821e+00+0.0e+00i) -3.4526697614134115926e-4)
(num-test (sin 3.14193792057279441821e+00+1.0e+00i) -5.3277478472492034385e-4-1.1752011235963524660e0i)
(num-test (sin 3.14193792057279441821e+00+1.19209289550781250e-07i) -3.4526697614134361253e-4-1.1920928244535424533e-7i)
(num-test (sin 3.14193792057279441821e+00+2.0e+00i) -1.2989619299124286975e-3-3.6268601916692946556e0i)
(num-test (sin 3.14193792057279441821e+00+5.0e-01i) -3.8933200722526827075e-4-5.2109527443404709211e-1i)
(num-test (sin 3.14193792057279441821e+00-1.0e+00i) -5.3277478472492034385e-4+1.1752011235963524660e0i)
(num-test (sin 3.14193792057279441821e+00-1.19209289550781250e-07i) -3.4526697614134361253e-4+1.1920928244535424533e-7i)
(num-test (sin 3.14193792057279441821e+00-2.0e+00i) -1.2989619299124286975e-3+3.6268601916692946556e0i)
(num-test (sin 3.14193792057279441821e+00-5.0e-01i) -3.8933200722526827075e-4+5.2109527443404709211e-1i)
(num-test (sin 3.45266983001243932001e-04+0.0e+00i) 3.4526697614140534807e-4)
(num-test (sin 3.45266983001243932001e-04+1.0e+00i) 5.3277478472501939236e-4+1.1752011235963524660e0i)
(num-test (sin 3.45266983001243932001e-04+1.19209289550781250e-07i) 3.4526697614140780134e-4+1.1920928244535424533e-7i)
(num-test (sin 3.45266983001243932001e-04+2.0e+00i) 1.2989619299126701883e-3+3.6268601916692946556e0i)
(num-test (sin 3.45266983001243932001e-04+5.0e-01i) 3.8933200722534065172e-4+5.2109527443404709209e-1i)
(num-test (sin 3.45266983001243932001e-04-1.0e+00i) 5.3277478472501939236e-4-1.1752011235963524660e0i)
(num-test (sin 3.45266983001243932001e-04-1.19209289550781250e-07i) 3.4526697614140780134e-4-1.1920928244535424533e-7i)
(num-test (sin 3.45266983001243932001e-04-2.0e+00i) 1.2989619299126701883e-3-3.6268601916692946556e0i)
(num-test (sin 3.45266983001243932001e-04-5.0e-01i) 3.8933200722534065172e-4-5.2109527443404709209e-1i)
(num-test (sin 3/10) 0.29552020666134)
(num-test (sin 3/1234) 0.00243111591964)
(num-test (sin 3/1234000000) 0.00000000243112)
(num-test (sin 3/2) 0.99749498660405)
(num-test (sin 3/362880) 0.00000826719577)
(num-test (sin 3/500029) 0.00000599965202)
(num-test (sin 362880/1234) -0.9463147870254296) 
(num-test (sin 362880/1234000000) 0.00029406806707)
(num-test (sin 362880/500029) 0.66367262572318)
(num-test (sin 4.71204371340168837179e+00+0.0e+00i) -9.9999994039535581664e-1)
(num-test (sin 4.71204371340168837179e+00+1.0e+00i) -1.5430805428404715941e0-4.0575816248744985081e-4i)
(num-test (sin 4.71204371340168837179e+00+1.19209289550781250e-07i) -9.9999994039536292207e-1-4.1159030931192414605e-11i)
(num-test (sin 4.71204371340168837179e+00+2.0e+00i) -3.7621954668392959444e0-1.2522351259052019007e-3i)
(num-test (sin 4.71204371340168837179e+00+5.0e-01i) -1.1276258979946363572e0-1.7991700040943409243e-4i)
(num-test (sin 4.71204371340168837179e+00-1.0e+00i) -1.5430805428404715941e0+4.0575816248744985081e-4i)
(num-test (sin 4.71204371340168837179e+00-1.19209289550781250e-07i) -9.9999994039536292207e-1+4.1159030931192414605e-11i)
(num-test (sin 4.71204371340168837179e+00-2.0e+00i) -3.7621954668392959444e0+1.2522351259052019007e-3i)
(num-test (sin 4.71204371340168837179e+00-5.0e-01i) -1.1276258979946363572e0+1.7991700040943409243e-4i)
(num-test (sin 4.71273424736769097620e+00+0.0e+00i) -9.9999994039535581677e-1)
(num-test (sin 4.71273424736769097620e+00+1.0e+00i) -1.5430805428404715943e0+4.0575816248701808892e-4i)
(num-test (sin 4.71273424736769097620e+00+1.19209289550781250e-07i) -9.9999994039536292220e-1+4.1159030931148617825e-11i)
(num-test (sin 4.71273424736769097620e+00+2.0e+00i) -3.7621954668392959448e0+1.2522351259038694139e-3i)
(num-test (sin 4.71273424736769097620e+00+5.0e-01i) -1.1276258979946363573e0+1.7991700040924264514e-4i)
(num-test (sin 4.71273424736769097620e+00-1.0e+00i) -1.5430805428404715943e0-4.0575816248701808892e-4i)
(num-test (sin 4.71273424736769097620e+00-1.19209289550781250e-07i) -9.9999994039536292220e-1-4.1159030931148617825e-11i)
(num-test (sin 4.71273424736769097620e+00-2.0e+00i) -3.7621954668392959448e0-1.2522351259038694139e-3i)
(num-test (sin 4.71273424736769097620e+00-5.0e-01i) -1.1276258979946363573e0-1.7991700040924264514e-4i)
(num-test (sin 500029/10) .9665258739436294) 
(num-test (sin 500029/1234) .05553717596791147) 
(num-test (sin 500029/1234000000) 0.00040520987546)
(num-test (sin 500029/2) 0.270047165973401) 
(num-test (sin 500029/3) 7.610322596690986e-1)
(num-test (sin 500029/362880) 0.98146191370834)
(num-test (sin 6.28284004019658492979e+00+0.0e+00i) -3.4526697614170855328e-4)
(num-test (sin 6.28284004019658492979e+00+1.0e+00i) -5.3277478472548726245e-4+1.1752011235963524659e0i)
(num-test (sin 6.28284004019658492979e+00+1.19209289550781250e-07i) -3.4526697614171100655e-4+1.1920928244535424532e-7i)
(num-test (sin 6.28284004019658492979e+00+2.0e+00i) -1.2989619299138109057e-3+3.6268601916692946552e0i)
(num-test (sin 6.28284004019658492979e+00+5.0e-01i) -3.8933200722568255379e-4+5.2109527443404709204e-1i)
(num-test (sin 6.28284004019658492979e+00-1.0e+00i) -5.3277478472548726245e-4-1.1752011235963524659e0i)
(num-test (sin 6.28284004019658492979e+00-1.19209289550781250e-07i) -3.4526697614171100655e-4-1.1920928244535424532e-7i)
(num-test (sin 6.28284004019658492979e+00-2.0e+00i) -1.2989619299138109057e-3-3.6268601916692946552e0i)
(num-test (sin 6.28284004019658492979e+00-5.0e-01i) -3.8933200722568255379e-4-5.2109527443404709204e-1i)
(num-test (sin 6.28353057416258753420e+00+0.0e+00i) 3.4526697614121869459e-4)
(num-test (sin 6.28353057416258753420e+00+1.0e+00i) 5.3277478472473137099e-4+1.1752011235963524661e0i)
(num-test (sin 6.28353057416258753420e+00+1.19209289550781250e-07i) 3.4526697614122114786e-4+1.1920928244535424534e-7i)
(num-test (sin 6.28353057416258753420e+00+2.0e+00i) 1.2989619299119679614e-3+3.6268601916692946558e0i)
(num-test (sin 6.28353057416258753420e+00+5.0e-01i) 3.8933200722513017641e-4+5.2109527443404709213e-1i)
(num-test (sin 6.28353057416258753420e+00-1.0e+00i) 5.3277478472473137099e-4-1.1752011235963524661e0i)
(num-test (sin 6.28353057416258753420e+00-1.19209289550781250e-07i) 3.4526697614122114786e-4-1.1920928244535424534e-7i)
(num-test (sin 6.28353057416258753420e+00-2.0e+00i) 1.2989619299119679614e-3-3.6268601916692946558e0i)
(num-test (sin 6.28353057416258753420e+00-5.0e-01i) 3.8933200722513017641e-4-5.2109527443404709213e-1i)
(num-test (sin 9.42443269378637893396e+00+0.0e+00i) 3.4526697614094283958e-4)
(num-test (sin 9.42443269378637893396e+00+1.0e+00i) 5.3277478472430570447e-4-1.1752011235963524662e0i)
(num-test (sin 9.42443269378637893396e+00+1.19209289550781250e-07i) 3.4526697614094529285e-4-1.1920928244535424535e-7i)
(num-test (sin 9.42443269378637893396e+00+2.0e+00i) 1.2989619299109301409e-3-3.6268601916692946561e0i)
(num-test (sin 9.42443269378637893396e+00+5.0e-01i) 3.8933200722481911514e-4-5.2109527443404709218e-1i)
(num-test (sin 9.42443269378637893396e+00-1.0e+00i) 5.3277478472430570447e-4+1.1752011235963524662e0i)
(num-test (sin 9.42443269378637893396e+00-1.19209289550781250e-07i) 3.4526697614094529285e-4+1.1920928244535424535e-7i)
(num-test (sin 9.42443269378637893396e+00-2.0e+00i) 1.2989619299109301409e-3+3.6268601916692946561e0i)
(num-test (sin 9.42443269378637893396e+00-5.0e-01i) 3.8933200722481911514e-4+5.2109527443404709218e-1i)
(num-test (sin 9.42512322775237976202e+00+0.0e+00i) -3.4526697614020805155e-4)
(num-test (sin 9.42512322775237976202e+00+1.0e+00i) -5.3277478472317186729e-4-1.1752011235963524665e0i)
(num-test (sin 9.42512322775237976202e+00+1.19209289550781250e-07i) -3.4526697614021050482e-4-1.1920928244535424538e-7i)
(num-test (sin 9.42512322775237976202e+00+2.0e+00i) -1.2989619299081657245e-3-3.6268601916692946571e0i)
(num-test (sin 9.42512322775237976202e+00+5.0e-01i) -3.8933200722399054908e-4-5.2109527443404709231e-1i)
(num-test (sin 9.42512322775237976202e+00-1.0e+00i) -5.3277478472317186729e-4+1.1752011235963524665e0i)
(num-test (sin 9.42512322775237976202e+00-1.19209289550781250e-07i) -3.4526697614021050482e-4+1.1920928244535424538e-7i)
(num-test (sin 9.42512322775237976202e+00-2.0e+00i) -1.2989619299081657245e-3+3.6268601916692946571e0i)
(num-test (sin 9.42512322775237976202e+00-5.0e-01i) -3.8933200722399054908e-4+5.2109527443404709231e-1i)
(num-test (sin pi) -6.982889851335445E-15) 
(num-test (sin 32767.) 1.8750655394138942394239E-1)
(num-test (sin 8388607.) 9.9234509376961249835628E-1)
(num-test (sin 2147483647.) -7.2491655514455639054829E-1)
(num-test (sin 80143857.0000000149) 1.283143758817470627530994988383551176295E-10)

(num-test (sin (- (/ pi 2) (* 0+i (log (/ (+ 1 (sqrt 5)) 2))))) (/ (sqrt 5) 2))
(num-test (sin (/ pi 10)) (/ (- (sqrt 5) 1) 4))
(num-test (sin (/ pi 12)) (* (/ (sqrt 2) 4) (- (sqrt 3) 1)))
(num-test (sin (/ pi 12)) (/ (- (sqrt 6) (sqrt 2)) 4))
(num-test (sin (/ pi 15)) (/ (sqrt (- 7 (sqrt 5) (sqrt (- 30 (* 6 (sqrt 5)))))) 4))
(num-test (sin (/ pi 16)) (/ (sqrt (- 2 (sqrt (+ 2 (sqrt 2))))) 2))
(num-test (sin (/ pi 20)) (/ (sqrt (- 8 (* 2 (sqrt (+ 10 (* 2 (sqrt 5))))))) 4))
(num-test (sin (/ pi 24)) (/ (sqrt (- 2 (sqrt (+ 2 (sqrt 3))))) 2))
(num-test (sin (/ pi 3)) (/ (sqrt 3) 2))
(num-test (sin (/ pi 3)) (/ (sqrt 3) 2))
(num-test (sin (/ pi 30)) (/ (+ -1 (- (sqrt 5)) (sqrt (- 30 (* 6 (sqrt 5))))) 8))
(num-test (sin (/ pi 32)) (/ (sqrt (- 2 (sqrt (+ 2 (sqrt (+ 2 (sqrt 2))))))) 2))
(num-test (sin (/ pi 4)) (/ (sqrt 2) 2))
(num-test (sin (/ pi 5)) (/ (sqrt (- 10 (* 2 (sqrt 5)))) 4))
(num-test (sin (/ pi 6)) 1/2)
(num-test (sin (/ pi 8)) (/ (sqrt (- 2 (sqrt 2))) 2))
(num-test (* (sin (/ pi 11)) (sin (/ (* 2 pi) 11)) (sin (/ (* 3 pi) 11)) (sin (/ (* 4 pi) 11)) (sin (/ (* 5 pi) 11))) (sqrt (/ 11 1024)))
(num-test (* (sin (/ pi 7)) (sin (/ (* 2 pi) 7)) (sin (/ (* 3 pi) 7))) (/ (sqrt 7) 8))
(num-test (* (sin (/ pi 9)) (sin (/ (* 2 pi) 9)) (sin (/ (* 4 pi) 9))) (/ (sqrt 3) 8))
(num-test (* pi (+ 1.0 (atan (tan (acos (cos (asin (sin (/ 1.0 (/ 1.0 pi)))))))))) pi)
(num-test (+ (* (sin 0.1) (sin 0.1)) (* (cos 0.1) (cos 0.1))) 1.0)
(num-test (/ (- (sqrt 5) 1) 2) (/ (sin (* pi 1/5)) (sin (* pi 2/5))))

(let ((val1 (sin (/ pi 60)))
      (val2 (* 1/16 (- (* (+ (sqrt 6) (sqrt 2)) (- (sqrt 5) 1)) (* 2 (- (sqrt 3) 1) (sqrt (+ 5 (sqrt 5))))))))
  (num-test (- val1 val2) 0.0))

(let ((val1 (sin (/ (* 4 pi) 15)))
      (val2 (* 1/8 (+ (sqrt (+ 10 (* 2 (sqrt 5)))) (sqrt 15) (- (sqrt 3))))))
  (num-test (- val1 val2) 0.0))

(num-test (sin 22) -8.851309290403875921690256815772332463307E-3)
(if with-bignums
    (begin
      (num-test (sin 1e22) -8.522008497671888017727058937530293682616E-1)
      (num-test (sin 1+100i) 1.130986289301505745599509129978056149094E43+7.261979450834655624032117190441273726075E42i)
      (num-test (sin 0+100i) 0.0+1.34405857090806772420631277579000679368E43i)
      (num-test (sin 0+1000i) 0.0+9.850355570085234969444396761216615626576E433i)
      (num-test (sin 1+1000i) 8.288788402267571487966465808315066740252E433+5.322169828138126401369949836048836144292E433i)
      (num-test (sin 1e-100+1e-100i) 9.999999999999999999999999999999999999992E-101+9.999999999999999999999999999999999999992E-101i)
      ))
;; not even close if not bignums: 0.4626130407646
;; we start to lose around 1e18 -- running out of bits of fraction?

(test (>= 0.0000001 (sin 0.0000001)) #t)
(test (>= 0.000000001 (sin 0.000000001)) #t)
;(test (>= 0.0000001 (sin (+ (* 2 pi) 0.0000001))) #t)
; this fails because "pi" is inaccurate?
(num-test (sin 31415926.0) -0.5106132968486)
(num-test (sin (+ (* 200 pi) 0.001)) 9.999998333333416874831395573527051109993E-4)
(test (< (abs (- (sin (+ (* 200 pi) 0.001)) (- (sin (- (* 200 pi) 0.001))))) 5e-13) #t)

(for-each
 (lambda (num-and-val)
   (let ((num (car num-and-val)) (val (cadr num-and-val))) (num-test-1 'sin num (sin num) val)))
 (vector (list 0 0) (list 1 0.8414709848079) (list 2 0.90929742682568) (list 3 0.14112000805987) 
	 (list -1 -0.8414709848079) (list -2 -0.90929742682568) (list -3 -0.14112000805987) 
	 (list 1/2 0.4794255386042) (list 1/3 0.32719469679615) (list -1/2 -0.4794255386042) 
	 (list -1/3 -0.32719469679615) (list 1/9223372036854775807 1.0842021724855e-19) (list 0.0 0.0) 
	 (list 1.0 0.8414709848079) (list 2.0 0.90929742682568) (list -2.0 -0.90929742682568) 
	 (list 1.000000000000000000000000000000000000002E-309 1.000000000000000000000000000000000000002E-309) 
	 (list 0+1i 0+1.1752011936438i) (list 0+2i 0+3.626860407847i) 
	 (list 0-1i 0-1.1752011936438i) (list 1+1i 1.298457581416+0.63496391478474i) (list 1-1i 1.298457581416-0.63496391478474i) 
	 (list -1+1i -1.298457581416+0.63496391478474i) (list -1-1i -1.298457581416-0.63496391478474i) 
	 (list 0.1+0.1i 0.10033299984131+0.099666333492108i) (list 1e-16+1e-16i 1e-16+1e-16i) 
	 ))

(test (sin) 'error)
(test (sin "hi") 'error)
(test (sin 1.0+23.0i 1.0+23.0i) 'error)
(test (sin 0 1) 'error)

(for-each
 (lambda (arg)
   (test (sin arg) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))

(if with-bignums	
    (letrec ((sin-m*pi/n 
	      (lambda (m1 n1)
		
		;; this returns an expression giving the exact value of sin(m*pi/n), m and n integer
		;;   if we can handle n -- currently it can be anything of the form 2^a 3^b 5^c 7^d 11^h 13^e 17^f 257^g
		;;   so (sin-m*pi/n 1 60) returns an exact expression for sin(pi/60).
		
		(let ((m (numerator (/ m1 n1)))
		      (n (denominator (/ m1 n1))))
		  
		  (set! m (modulo m (* 2 n)))
		  ;; now it's in lowest terms without extra factors of 2*pi
		  
		  (cond ((zero? m) 0)
			
			((zero? n) (error "divide by zero (sin-m*pi/n n = 0)"))
			
			((= n 1) 0)
			
			((negative? n)
			 (let ((val (sin-m*pi/n m (- n))))
			   (and val `(- ,val))))
			
			((> m n) 
			 (let ((val (sin-m*pi/n (- m n) n)))
			   (and val `(- ,val))))
			
			((= n 2) (if (= m 0) 0 1))
			
			((= n 3) `(sqrt 3/4))
			
			((> m 1)
			 (let ((m1 (sin-m*pi/n (- m 1) n))
			       (n1 (sin-m*pi/n 1 n))
			       (m2 (sin-m*pi/n (- m 2) n)))
			   (and m1 m2 n1
				`(- (* 2 ,m1 (sqrt (- 1 (* ,n1 ,n1)))) ,m2))))
			
			((= n 5) `(/ (sqrt (- 10 (* 2 (sqrt 5)))) 4))
			
			((= n 7) `(let ((A1 (expt (+ -7/3456 (sqrt -49/442368)) 1/3))
					(A2 (expt (- -7/3456 (sqrt -49/442368)) 1/3)))
				    (sqrt (+ 7/12 (* -1/2 (+ A1 A2)) (* 1/2 0+i (sqrt 3) (- A1 A2))))))
			
			((= n 17) `(let* ((A1 (sqrt (- 17 (sqrt 17))))
					  (A2 (sqrt (+ 17 (sqrt 17))))
					  (A3 (sqrt (+ 34 (* 6 (sqrt 17)) (* (sqrt 2) (- (sqrt 17) 1) A1) (* -8 (sqrt 2) A2)))))
				     (* 1/8 (sqrt 2) (sqrt (- 17 (sqrt 17) (* (sqrt 2) (+ A1 A3)))))))
			
			
			((= n 11) `(let* ((SQRT5 (* 1/2 (- (sqrt 5) 1)))
					  (B5 (sqrt (+ 2 (* 1/2 (+ (sqrt 5) 1)))))
					  (B6 (+ SQRT5 (* 0+i B5)))
					  (B6_2 (* B6 B6))
					  (B6_3 (* B6 B6 B6))
					  (B6_4 (* B6 B6 B6 B6)) 
					  (D1 (+ 6 (* 3/2 B6) (* 3/4 B6_2)))
					  (D2 (+ SQRT5 (* 0+i B5) (* 1/4 B6_2)))
					  (D3 (* 1/2 (- (+ 1 (* 0+i (sqrt 11))))))
					  (D4 (* 1/2 (- (* 0+i (sqrt 11)) 1)))
					  (D6 (+ 1 (* 1/4 B6_2) (* 1/8 B6_3)))
					  (D7 (+ (* 1/2 B6) (* 1/16 B6_4)))
					  (D8 (+ 2 (* 1/2 B6)))
					  (D9 (+ 13 (* 21 B6) (* 67/4 B6_2) (* 21/4 B6_3) (* 2 B6_4)))
					  (D11 (+ 129 (* 109/2 B6) (* 59/4 B6_2) (* 9/8 B6_3) (* 9/16 B6_4)))
					  (D13 (+ (* 3 B6) B6_2))
					  (D14 (+ (* 3 B6) (* 3/4 B6_2) (* 3/8 B6_3)))
					  (D15 (+ 79 (* 27 B6) (* 39/4 B6_2) (* 37/4 B6_3) (* 21/4 B6_4)))
					  (D16 (+ D11 (* D3 D9) (* D4 D15)))
					  (D17 (+ D11 (* D4 D9) (* D3 D15)))
					  (D30 (/ (* B6_2 (+ (* D3 D6) (* D4 D7))) (* 4 (expt D17 1/5))))
					  (D32 (* 1/2 (+ 1 (* 0+i (sqrt 11)))))
					  (D33 (/ (* B6_3 (+ (* D4 D6) (* D3 D7))) (* 8 (expt D16 1/5))))
					  (D34 (* 1/4 B6_2 (expt D16 1/5)))
					  (D35 (+ 2 (* 1/8 B6_4) (* 1/2 B6 D8) (* 1/8 B6_3 D2)))
					  (D36 (+ SQRT5 (* 0+i B5) (* 1/2 B6_2) (* 1/4 B6_3) (* 1/2 B6 D2) (* 1/4 B6_2 (+ (* 1/4 B6_3) (* 1/16 B6_4)))))
					  (D38 (* 1/2 (+ -1 (* 0+i (sqrt 11)))))
					  (D39 (* 1/8 B6_3 (expt D17 1/5)))
					  (D40 (+ 3 (* 3/2 B6) (* 9/4 B6_2) (* 7/8 B6_3) (* 3/16 B6_4) (* 1/2 B6 (+ 6 (* 2 B6)))
						  (* 1/16 B6_4 D1) (* 1/4 B6_2 D13) (* 1/8 B6_3 (+ 3 (* 3/4 B6_3) (* 3/16 B6_4)))))
					  (D41 (+ (* 1/4 B6_2 D1) (* 1/8 B6_3 D13) (* 1/16 B6_4 D14) (* 1/2 B6 (+ 4 (* 3/8 B6_4)))))
					  (D42 (+ 3 (* 3/4 B6_3) (* 3/16 B6_4) (* 1/8 B6_3 D1) (* 1/4 B6_2 D14) 
						  (* 1/2 B6 (+ (* 3/2 B6_2) (* 3/8 B6_3) (* 3/16 B6_4))) (* 1/16 B6_4 (+ 3 (* 3/2 B6) (* 3/8 B6_4)))))
					  (D43 (+ (* 1/4 B6_3) (* 1/16 B6_4) (* 1/8 B6_3 D8) (* 1/4 B6_2 D2) 
						  (* 1/2 B6 (+ (* 1/2 B6_2) (* 1/8 B6_3))) (* 1/16 B6_4 (+ 1 (* 1/8 B6_4)))))
					  (D44 (/ (* B6_4 (+ D42 (* D4 D40) (* D3 D41))) (* 16 (expt D16 3/5))))
					  (D45 (/ (* B6 (+ D42 (* D3 D40) (* D4 D41))) (* 2 (expt D17 3/5))))
					  (D48 (/ (* B6 (+ D43 (* D3 D35) (* D4 D36))) (* 2 (expt D16 2/5))))
					  (D49 (/ (* B6_4 (+ D43 (* D4 D35) (* D3 D36))) (* 16 (expt D17 2/5)))))
				     (* -1/2 0+i 
					(+ (* 1/5 (- D32 D33 D34 D48 D44))
					   (* 1/5 (+ D38 D30 D39 D49 D45))))))
			
			((= n 13)
			 `(let* ((A1 (/ (- -1 (sqrt 13)) 2))
				 (A2 (/ (+ -1 (sqrt 13)) 2))
				 (A3 (/ (+ -1 (* 0+i (sqrt 3))) 2))
				 (A4 (+ -1 (* 0+i (sqrt 3))))
				 (A5 (* 0+i (sqrt (+ 7 (sqrt 13) A2))))
				 (A6 (* 0+i (sqrt (+ 7 (- (sqrt 13)) A1))))
				 (A8  (* 1/2 (- A2 A6)))
				 (A9  (* 1/2 (+ A1 A5)))
				 (A11 (* 1/2 (+ A2 A6)))
				 (A12 (* 1/2 (- A1 A5)))
				 (A13 (* 3/2 A4 A8))
				 (A14 (* 3/2 A4 A11))
				 (A15 (* 3/4 A4 A4 A11))
				 (A16 (* 3/4 A4 A4 A8))
				 (A17 (+ A3 (* 1/4 A4 A4))))
			    (* -1/6 0+i (+ (- A9 A12)
					   (* A4 (+ (/ (+ A8 (* A17 A12)) (* 2 (expt (+ 6 A13 A15 A9) 1/3)))
						    (/ (+ A11 (* A17 A9)) (* -2 (expt (+ 6 A16 A14 A12) 1/3)))
						    (* 1/4 A4 (- (expt (+ 6 A13 A15 A9) 1/3) (expt (+ 6 A16 A14 A12) 1/3)))))))))
			
			((= n 257)
			 `(let* ((A1 (sqrt (- 514 (* 2 (sqrt 257)))))
				 (A2 (- 257 (* 15 (sqrt 257))))
				 (A3 (+ 257 (* 15 (sqrt 257))))
				 (A4 (- 257 (sqrt 257)))
				 (A5 (+ (sqrt 257) 257))
				 (A7 (+ 257 (* 9 (sqrt 257))))
				 (A8 (- 514 (* 18 (sqrt 257))))
				 (AA (sqrt (* 2 A5)))
				 (A9 (sqrt (+ A2 (* 8 A1) (* -7 AA))))
				 (A10 (sqrt (+ A2 (* -8 A1) (* 7 AA))))
				 (A11 (sqrt (+ A3 (* 7 A1) (* 8 AA))))
				 (A12 (sqrt (+ A3 (* -7 A1) (* -8 AA))))
				 (A13 (sqrt (+ A8 (* 6 A1) (* 8 A9) (* -24 A10) (* 12 A11))))
				 (A14 (* 4 (sqrt (+ A8 (* 6 A1) (* -8 A9) (* 24 A10) (* -12 A11)))))
				 (A15 (* 4 (sqrt (+ A8 (* -6 A1) (* -12 A12) (* 24 A9) (* 8 A10)))))
				 (A16 (* 4 (sqrt (* 2 (+ (- 257 (* 9 (sqrt 257))) (* -3 A1) (* 6 A12) (* -12 A9) (* -4 A10))))))
				 (A17 (sqrt (* 2 (+ A7 (* -3 AA) (* -4 A12) (* 6 A9) (* 12 A11)))))
				 (A18 (sqrt (* 2 (+ A7 (* 3 AA) (* 12 A12) (* -6 A10) (* 4 A11)))))
				 (A19 (* 4 (sqrt (* 2 (+ A7 (* 3 AA) (* -12 A12) (* 6 A10) (* -4 A11))))))
				 (A20 (* 4 (sqrt (* 2 (+ A7 (* -3 AA) (* 4 A12) (* -6 A9) (* -12 A11))))))
				 (A22 (+ A4 (* 3 A1) (* -4 AA) (* -4 A12) (* 4 A9) (* -4 A10) (* 2 A11)))
				 (A23 (+ A5 (* -4 A1) (* -3 AA) (* -4 A12) (* 2 A9) (* 4 A10) (* 4 A11)))
				 (A24 (+ A5 (* 4 A1) (* 3 AA) (* 4 A12) (* 4 A9) (* -2 A10) (* 4 A11)))
				 (A26 (sqrt (+ A22 (+ (- A16) (- A19) (* 4 A17) (* -6 A13)))))
				 (A27 (sqrt (+ A22 (+ A16 A19 (* -4 A17) (* 6 A13)))))
				 (A28 (+ 257 (* 7 (sqrt 257)) (* 3 A1) (* -4 A9) (* 4 A10) (* 6 A11)))
				 (A29 (* 8 (sqrt (+ A24 A15 (- A20) (* -6 A18) (* -4 A13)))))
				 (A30 (+ A28 (* -4 A18) (* -4 A17) (* -2 A13)))
				 (A31 (+ (* 8 (sqrt (+ A23 A15 A14 (* 4 A18) (* -6 A17)))) (* 4 A26) A29 (* -8 A27))))
			    (* 1/16 (sqrt (* 1/2 (+ A4 (- A1) (* -2 A11) (* -2 A13) (* -4 A26)
						    (* -4 (sqrt (* 2 (+ A30 (- A31)))))
						    (* -8 (sqrt (+ A4 (- A1) (* -2 A11) (* 6 A13) (* -4 A26) (* -8 A27)
								   (* 4 (sqrt (* 2 (+ A30 A31))))
								   (* -8 (sqrt (* 2 (+ A28 (* 4 A18) (* 4 A17) (* 2 A13) (* -8 A26) (* -4 A27)
										       (* -8 (sqrt (+ A23 (- A15) (- A14) (* -4 A18) (* 6 A17))))
										       (* -8 (sqrt (+ A24 (- A15) A20 (* 6 A18) (* 4 A13)))))))))))))))))
			
			((or (= (modulo n 2) 0) (= (modulo n 3) 0) (= (modulo n 5) 0) (= (modulo n 7) 0) 
			     (= (modulo n 17) 0) (= (modulo n 13) 0) (= (modulo n 257) 0) (= (modulo n 11) 0))
			 (let ((divisor (if (= (modulo n 2) 0) 2
					    (if (= (modulo n 3) 0) 3
						(if (= (modulo n 5) 0) 5
						    (if (= (modulo n 7) 0) 7
							(if (= (modulo n 17) 0) 17
							    (if (= (modulo n 13) 0) 13
								(if (= (modulo n 11) 0) 11
								    257)))))))))
			   (let ((val (sin-m*pi/n 1 (/ n divisor))))
			     (and val
				  `(let ((ex ,val))
				     (/ (- (expt (+ (sqrt (- 1 (* ex ex))) (* 0+i ex)) (/ 1 ,divisor))
					   (expt (- (sqrt (- 1 (* ex ex))) (* 0+i ex)) (/ 1 ,divisor)))
					0+2i))))))
			
			(else #f))))))
      
      (let ((maxerr 0.0)
	    (max-case #f)
	    (cases 0))
	(do ((n 1 (+ n 1)))
	    ((= n 100))
	  (do ((m 1 (+ m 1)))
	      ((= m 4))
	    (letrec ((bigify (lambda (lst)
			       (if (pair? lst)
				   (cons (if (number? (car lst))
					     (list 'bignum (number->string (car lst)))
					     (bigify (car lst)))
					 (bigify (cdr lst)))
				   lst))))
	      (let ((val (sin (/ (* m pi) n)))
		    (expr (bigify (sin-m*pi/n m n))))
		(if expr 
		    (let ((err (magnitude (- val (eval expr)))))
		      (set! cases (+ cases 1))
		      (if (> err maxerr) 
			  (begin
			    (set! max-case (/ m n))
			    (set! maxerr err)))))))))
	(if (> maxerr 1e-35)
	    (format #t "sin-m*pi/n (~A cases) max err ~A at ~A~%" cases maxerr max-case))))
    )

(let ((sins (list 
	     0.00000000000000000000000000000000000000000000000000000000000000000000
	     0.09983341664682815230681419841062202698991538801798225999276686156165
	     0.19866933079506121545941262711838975037020672954020540398639599139797
	     0.29552020666133957510532074568502737367783211174261844850153103617326
	     0.38941834230865049166631175679570526459306018344395889511584896585734
	     0.47942553860420300027328793521557138808180336794060067518861661312553
	     0.56464247339503535720094544565865790710988808499415177102426589426735
	     0.64421768723769105367261435139872018306581384457368964474396308809382
	     0.71735609089952276162717461058138536619278523779142282098968252068287
	     0.78332690962748338846138231571354862314014792572030960356048515256195
	     0.84147098480789650665250232163029899962256306079837106567275170999191
	     0.89120736006143533995180257787170353831890931945282652766035329176720
	     0.93203908596722634967013443549482599541507058820873073536659789445024
	     0.96355818541719296470134863003955481534204849131773911795564922309212
	     0.98544972998846018065947457880609751735626167234736563194021894560084
	     0.99749498660405443094172337114148732270665142592211582194997482405934
	     0.99957360304150516434211382554623417197949791475491995534260751586102
	     0.99166481045246861534613339864787565240681957116712372532710249102330
	     0.97384763087819518653237317884335760670293947136523395566725825917196
	     0.94630008768741448848970961163495776211399866559491176443047155279581
	     0.90929742682568169539601986591174484270225497144789026837897301153096
	     0.86320936664887377068075931326902458492047242489508107697183045949721
	     0.80849640381959018430403691041611906515855960597557707903336060873485
	     0.74570521217672017738540621164349953894264877802047425750762828050000
	     0.67546318055115092656577152534128337425336495789352584226890212866520
	     0.59847214410395649405185470218616227170359717157722357330262703263874
	     0.51550137182146423525772693520936824389387858775426312126259173008382
	     0.42737988023382993455605308585788064749647642266670256499017776070511
	     0.33498815015590491954385375271242210603030652888358671068410107309479
	     0.23924932921398232818425691873957537221555293029961877411621026588071
	     0.14112000805986722210074480280811027984693326425226558415188264123242
	     0.04158066243329057919469827159667310055461342296380675064800900076588
	     -0.05837414342757990913721741461909518512512509908292656970935025422273)))
  (let ((mxerr 0.0))
    (do ((i 0 (+ i 1))
	 (x 0.0 (+ x 0.1)))
	((= i 32))
      (let ((err (abs (- (sin x) (list-ref sins i)))))
	(if (> err mxerr)
	    (set! mxerr err))))
    (if (> mxerr 1e-12) (format #t "sin err: ~A~%" mxerr))))
	    
(if with-bignums
    (let ((old-prec (bignum-precision)))
      (set! (bignum-precision) 500)
      (let ((sin-vals (list   ;arprec mathtool table[Sin[k/10], {k, 0, 30}]
		       "0.00000000000000000000000000000000000000000000000000000000000000000000"
		       "0.09983341664682815230681419841062202698991538801798225999276686156165"
		       "0.19866933079506121545941262711838975037020672954020540398639599139797"
		       "0.29552020666133957510532074568502737367783211174261844850153103617326"
		       "0.38941834230865049166631175679570526459306018344395889511584896585734"
		       "0.47942553860420300027328793521557138808180336794060067518861661312553"
		       "0.56464247339503535720094544565865790710988808499415177102426589426735"
		       "0.64421768723769105367261435139872018306581384457368964474396308809382"
		       "0.71735609089952276162717461058138536619278523779142282098968252068287"
		       "0.78332690962748338846138231571354862314014792572030960356048515256195"
		       "0.84147098480789650665250232163029899962256306079837106567275170999191"
		       "0.89120736006143533995180257787170353831890931945282652766035329176720"
		       "0.93203908596722634967013443549482599541507058820873073536659789445024"
		       "0.96355818541719296470134863003955481534204849131773911795564922309212"
		       "0.98544972998846018065947457880609751735626167234736563194021894560084"
		       "0.99749498660405443094172337114148732270665142592211582194997482405934"
		       "0.99957360304150516434211382554623417197949791475491995534260751586102"
		       "0.99166481045246861534613339864787565240681957116712372532710249102330"
		       "0.97384763087819518653237317884335760670293947136523395566725825917196"
		       "0.94630008768741448848970961163495776211399866559491176443047155279581"
		       "0.90929742682568169539601986591174484270225497144789026837897301153096"
		       "0.86320936664887377068075931326902458492047242489508107697183045949721"
		       "0.80849640381959018430403691041611906515855960597557707903336060873485"
		       "0.74570521217672017738540621164349953894264877802047425750762828050000"
		       "0.67546318055115092656577152534128337425336495789352584226890212866520"
		       "0.59847214410395649405185470218616227170359717157722357330262703263874"
		       "0.51550137182146423525772693520936824389387858775426312126259173008382"
		       "0.42737988023382993455605308585788064749647642266670256499017776070511"
		       "0.33498815015590491954385375271242210603030652888358671068410107309479"
		       "0.23924932921398232818425691873957537221555293029961877411621026588071"
		       "0.14112000805986722210074480280811027984693326425226558415188264123242")))
	(do ((k 2 (+ k 1)))
	    ((= k 30))
	  (let ((sin-val-2 (number->string (sin (/ k (bignum "10"))))))
	    (if (not (string=? (substring (list-ref sin-vals k) 3 60) (substring sin-val-2 2 59)))
		(format #t ";(sin (/ ~A 10)) mp: ~A does not match~%~A~%" k (substring (list-ref sin-vals k) 3 60) (substring sin-val-2 2 59))))))
      
      (let ((sin-vals (list   ;arprec mathtool table[Sin[k/10], {k, 0, 30}]
		       0.00000000000000000000000000000000000000000000000000000000000000000000
		       0.09983341664682815230681419841062202698991538801798225999276686156165
		       0.19866933079506121545941262711838975037020672954020540398639599139797
		       0.29552020666133957510532074568502737367783211174261844850153103617326
		       0.38941834230865049166631175679570526459306018344395889511584896585734
		       0.47942553860420300027328793521557138808180336794060067518861661312553
		       0.56464247339503535720094544565865790710988808499415177102426589426735
		       0.64421768723769105367261435139872018306581384457368964474396308809382
		       0.71735609089952276162717461058138536619278523779142282098968252068287
		       0.78332690962748338846138231571354862314014792572030960356048515256195
		       0.84147098480789650665250232163029899962256306079837106567275170999191
		       0.89120736006143533995180257787170353831890931945282652766035329176720
		       0.93203908596722634967013443549482599541507058820873073536659789445024
		       0.96355818541719296470134863003955481534204849131773911795564922309212
		       0.98544972998846018065947457880609751735626167234736563194021894560084
		       0.99749498660405443094172337114148732270665142592211582194997482405934
		       0.99957360304150516434211382554623417197949791475491995534260751586102
		       0.99166481045246861534613339864787565240681957116712372532710249102330
		       0.97384763087819518653237317884335760670293947136523395566725825917196
		       0.94630008768741448848970961163495776211399866559491176443047155279581
		       0.90929742682568169539601986591174484270225497144789026837897301153096
		       0.86320936664887377068075931326902458492047242489508107697183045949721
		       0.80849640381959018430403691041611906515855960597557707903336060873485
		       0.74570521217672017738540621164349953894264877802047425750762828050000
		       0.67546318055115092656577152534128337425336495789352584226890212866520
		       0.59847214410395649405185470218616227170359717157722357330262703263874
		       0.51550137182146423525772693520936824389387858775426312126259173008382
		       0.42737988023382993455605308585788064749647642266670256499017776070511
		       0.33498815015590491954385375271242210603030652888358671068410107309479
		       0.23924932921398232818425691873957537221555293029961877411621026588071
		       0.14112000805986722210074480280811027984693326425226558415188264123242))
	    (mxerr 0.0))
	(do ((x 0 (+ x 1)))
	    ((= x 20))
	  (let ((phase (* 2 pi (expt 10 x))))
	    (do ((k 0 (+ k 1)))
		((= k 30))
	      (let ((sin-val-2 (sin (+ phase (/ k (bignum "10"))))))
		(let ((err (magnitude (- sin-val-2 (list-ref sin-vals k)))))
		  (if (> err mxerr)
		      (set! mxerr err)))))))
	(if (> mxerr 1e-35)
	    (format #t ";(sin big-angle) max error: ~A" mxerr)))
      (set! (bignum-precision) old-prec)))
