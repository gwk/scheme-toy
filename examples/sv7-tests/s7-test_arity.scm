(test (arity) 'error)
(test (arity abs 1) 'error)

(for-each
 (lambda (arg)
   (if (arity arg)
       (format #t ";(arity ~A) -> ~A?~%" arg (arity arg))))
 (list :hi (integer->char 65) 1 #t 3.14 3/4 1.0+1.0i #\f #<eof> #<unspecified> #<undefined> () 'a))


#|
(let ((choices (list "a " "b " " . " ":rest " ":optional "  ":key " ":allow-other-keys ")))
  (define (next-arg expr)
    (catch #t
      (lambda ()
	;(format #t "expr: ~A~%" expr)
	(let ((func (eval-string expr)))
	  (let ((min-max (arity func)))
	    (format #t "(test (arity ~A) ~70T'~A)~%" expr min-max)
	    (if (> (cdr min-max) 6)
		(set! (cdr min-max) 6))
	    (do ((i 0 (+ i 1)))
		((= i (car min-max)))
	      (if (aritable? func i)
		  (format #t ";~A: arity: ~A, arg: ~A?~%" expr min-max i)))
	    (do ((i (car min-max) (+ i 1)))
		((> i (cdr min-max)))
	      (if (not (aritable? func i))
		  (format #t ";~A: arity: ~A, arg: ~A?~%" expr min-max i)))
	    (do ((i (+ 1 (cdr min-max)) (+ i 1)))
		((>= i 6))
	      (if (aritable? func i)
		  (format #t ";~A: arity: ~A, arg: ~A?~%" expr min-max i)))
	    )))
	(lambda args
	  ;(format #t "    ~A: ~A~%" expr (apply format #f (cadr args)))
	  'error)))

  (define (next-choice str n)
    (next-arg (string-append str ") #f)"))
    (if (< n 6)
	(for-each
	 (lambda (choice)
	   (next-choice (string-append str choice) (+ n 1)))
	 choices)))

  (for-each
   (lambda (choice)
     (next-arg (string-append "(lambda* " choice "#f)")))
   choices)

  (next-choice "(lambda* (" 0))
|#

(test (arity (lambda* a #f))                                         '(0 . 536870912))
(test (arity (lambda* () #f))                                        '(0 . 0))
(test (arity (lambda* (a ) #f))                                      '(0 . 1))
(test (arity (lambda* (a b ) #f))                                    '(0 . 2))
(test (arity (lambda* (a b :allow-other-keys ) #f))                  '(0 . 536870912))
(test (arity (lambda* (a  . b ) #f))                                 '(0 . 536870912))
(test (arity (lambda* (a :rest b ) #f))                              '(0 . 536870912))
(test (arity (lambda* (a :rest b :allow-other-keys ) #f))            '(0 . 536870912))
(test (arity (lambda* (a :optional b ) #f))                          '(0 . 2))
(test (arity (lambda* (a :optional b :allow-other-keys ) #f))        '(0 . 536870912))
(test (arity (lambda* (a :key b ) #f))                               '(0 . 2))
(test (arity (lambda* (a :key b :allow-other-keys ) #f))             '(0 . 536870912))
(test (arity (lambda* (a :allow-other-keys ) #f))                    '(0 . 536870912))
(test (arity (lambda* (:rest a ) #f))                                '(0 . 536870912))
(test (arity (lambda* (:rest a b ) #f))                              '(0 . 536870912))
(test (arity (lambda* (:rest a b :allow-other-keys ) #f))            '(0 . 536870912))
(test (arity (lambda* (:rest a  . b ) #f))                           '(0 . 536870912))
(test (arity (lambda* (:rest a :rest b ) #f))                        '(0 . 536870912))
(test (arity (lambda* (:rest a :rest b :allow-other-keys ) #f))      '(0 . 536870912))
(test (arity (lambda* (:rest a :optional b ) #f))                    '(0 . 536870912))
(test (arity (lambda* (:rest a :optional b :allow-other-keys ) #f))  '(0 . 536870912))
(test (arity (lambda* (:rest a :key b ) #f))                         '(0 . 536870912))
(test (arity (lambda* (:rest a :key b :allow-other-keys ) #f))       '(0 . 536870912))
(test (arity (lambda* (:rest a :allow-other-keys ) #f))              '(0 . 536870912))
(test (arity (lambda* (:optional a ) #f))                            '(0 . 1))
(test (arity (lambda* (:optional a b ) #f))                          '(0 . 2))
(test (arity (lambda* (:optional a b :allow-other-keys ) #f))        '(0 . 536870912))
(test (arity (lambda* (:optional a  . b ) #f))                       '(0 . 536870912))
(test (arity (lambda* (:optional a :rest b ) #f))                    '(0 . 536870912))
(test (arity (lambda* (:optional a :rest b :allow-other-keys ) #f))  '(0 . 536870912))
(test (arity (lambda* (:optional a :key b ) #f))                     '(0 . 2))
(test (arity (lambda* (:optional a :key b :allow-other-keys ) #f))   '(0 . 536870912))
(test (arity (lambda* (:optional a :allow-other-keys ) #f))          '(0 . 536870912))
(test (arity (lambda* (:key a ) #f))                                 '(0 . 1))
(test (arity (lambda* (:key a b ) #f))                               '(0 . 2))
(test (arity (lambda* (:key a b :allow-other-keys ) #f))             '(0 . 536870912))
(test (arity (lambda* (:key a  . b ) #f))                            '(0 . 536870912))
(test (arity (lambda* (:key a :rest b ) #f))                         '(0 . 536870912))
(test (arity (lambda* (:key a :rest b :allow-other-keys ) #f))       '(0 . 536870912))
(test (arity (lambda* (:key a :optional b ) #f))                     '(0 . 2))
(test (arity (lambda* (:key a :optional b :allow-other-keys ) #f))   '(0 . 536870912))
(test (arity (lambda* (:key a :allow-other-keys ) #f))               '(0 . 536870912))
(test (arity (lambda* (:allow-other-keys ) #f))                      '(0 . 536870912))

#|
(let ((st (symbol-table)))
  (do ((i 0 (+ i 1))) 
      ((= i (length st)))
    (let ((lst (st i)))
      (for-each 
       (lambda (sym)
	 (if (defined? sym)
	     (let ((func (symbol->value sym)))
	       
	       (catch #t
		 (lambda ()
		   (let ((min-max (arity func)))
		     (format #t "(test (arity ~A) ~70T'~A)~%" sym min-max)
		     (if min-max
			 (begin 
			   (if (> (cdr min-max) 6)
			       (set! (cdr min-max) 6))
			   (do ((i 0 (+ i 1)))
			       ((= i (car min-max)))
			     (if (aritable? func i)
				 (format #t ";~A: arity: ~A, arg: ~A?~%" sym min-max i)))
			   (do ((i (car min-max) (+ i 1)))
			       ((> i (cdr min-max)))
			     (if (not (aritable? func i))
				 (format #t ";~A: arity: ~A, arg: ~A?~%" sym min-max i)))
			   (do ((i (+ 1 (cdr min-max)) (+ i 1)))
			       ((>= i 6))
			     (if (aritable? func i)
				 (format #t ";~A: arity: ~A, arg: ~A?~%" sym min-max i)))
			   ))))
		     
		 (lambda args
		   (format #t "    ~A: ~A~%" sym (apply format #f (cadr args)))
		   'error)))))
	     lst))))
|#

(test (arity *)                                                      '(0 . 536870912))
(test (arity +)                                                      '(0 . 536870912))
(test (arity -)                                                      '(1 . 536870912))
(test (arity /)                                                      '(1 . 536870912))
(test (arity current-environment)                                    '(0 . 0))
(test (arity <)                                                      '(2 . 536870912))
(test (arity =)                                                      '(2 . 536870912))
(test (arity >)                                                      '(2 . 536870912))
(test (arity lambda*)                                                '(2 . 536870912))
(test (arity initial-environment)                                    '(0 . 0))
(test (arity call-with-output-file)                                  '(2 . 2))
(test (arity round)                                                  '(1 . 1))
(test (arity keyword?)                                               '(1 . 1))
(test (arity open-environment)                                       '(1 . 1))
(test (arity augment-environment!)                                   '(1 . 536870912))
(test (arity quote)                                                  '(1 . 1))
(test (arity <=)                                                     '(2 . 536870912))
(test (arity with-baffle)                                            '(0 . 536870912))
(test (arity >=)                                                     '(2 . 536870912))
(test (arity sort!)                                                  '(2 . 2))
(test (arity environment->list)                                      '(1 . 1))
(test (arity cdaddr)                                                 '(1 . 1))
(test (arity do)                                                     '(3 . 536870912))
(test (arity if)                                                     '(2 . 3))
(test (arity pi)                                                     '#f)
(test (arity or)                                                     '(0 . 536870912))
(test (arity *stdin*)                                                '#f)
(test (arity make-rectangular)                                       '(2 . 2))
(test (arity values)                                                 '(0 . 536870912))
(test (arity string->number)                                         '(1 . 2))
(test (arity most-negative-fixnum)                                   '#f)
(test (arity char-downcase)                                          '(1 . 1))
(test (arity char->integer)                                          '(1 . 1))
(test (arity vector)                                                 '(0 . 536870912))
(test (arity call/cc)                                                '(1 . 1))
(test (arity set-current-input-port)                                 '(1 . 1))
(test (arity current-input-port)                                     '(0 . 0))
(test (arity write)                                                  '(1 . 2))
(test (arity zero?)                                                  '(1 . 1))
(test (arity char<?)                                                 '(2 . 536870912))
(test (arity char-ci<?)                                              '(2 . 536870912))
(test (arity infinite?)                                              '(1 . 1))
(test (arity open-input-file)                                        '(1 . 2))
(test (arity with-environment)                                       '(1 . 536870912))
(test (arity write-char)                                             '(1 . 2))
(test (arity car)                                                    '(1 . 1))
(test (arity and)                                                    '(0 . 536870912))
(test (arity cdr)                                                    '(1 . 1))
(test (arity ash)                                                    '(2 . 2))
(test (arity define)                                                 '(2 . 536870912))
(test (arity exp)                                                    '(1 . 1))
(test (arity lcm)                                                    '(0 . 536870912))
(test (arity map)                                                    '(2 . 536870912))
(test (arity let)                                                    '(2 . 536870912))
(test (arity max)                                                    '(1 . 536870912))
(test (arity write-byte)                                             '(1 . 2))
(test (arity min)                                                    '(1 . 536870912))
(test (arity log)                                                    '(1 . 2))
(test (arity not)                                                    '(1 . 1))
(test (arity append)                                                 '(0 . 536870912))
(test (arity list-ref)                                               '(2 . 536870912))
(test (arity *stderr*)                                               '#f)
(test (arity object->string)                                         '(1 . 2))
(test (arity string)                                                 '(0 . 536870912))
(test (arity dynamic-wind)                                           '(3 . 3))
(test (arity symbol-access)                                          '(1 . 1))
(test (arity augment-environment)                                    '(1 . 536870912))
(test (arity vector-length)                                          '(1 . 1))
(test (arity char-ready?)                                            '(0 . 1))
(test (arity random-state->list)                                     '(0 . 1))
(test (arity with-output-to-file)                                    '(2 . 2))
(test (arity s7-version)                                             '(0 . 0))
(test (arity peek-char)                                              '(0 . 1))
(test (arity :rest)                                                  '#f)
(test (arity aritable?)                                              '(2 . 2))
(test (arity ceiling)                                                '(1 . 1))
(test (arity define-bacro*)                                          '(2 . 536870912))
(test (arity :allow-other-keys)                                      '#f)
(test (arity :key)                                                   '#f)
(test (arity call-with-exit)                                         '(1 . 1))
(test (arity gensym)                                                 '(0 . 1))
(test (arity make-hash-table)                                        '(0 . 1))
(test (arity multiple-value-bind)                                    '(2 . 536870912))
(test (arity procedure-setter)                                       '(1 . 1))
(test (arity define-bacro)                                           '(2 . 536870912))
(test (arity string-append)                                          '(0 . 536870912))
(test (arity port-line-number)                                       '(0 . 1))
(test (arity make-procedure-with-setter)                             '(2 . 2))
(test (arity letrec*)                                                '(1 . 536870912))
(test (arity multiple-value-set!)                                    '(2 . 536870912))
(test (arity make-hash-table-iterator)                               '(1 . 1))
(test (arity make-random-state)                                      '(1 . 2))
(test (arity format)                                                 '(1 . 536870912))
(test (arity vector-ref)                                             '(2 . 536870912))
(test (arity with-input-from-file)                                   '(2 . 2))
(test (arity cadr)                                                   '(1 . 1))
(test (arity defmacro*)                                              '(3 . 536870912))
(test (arity cond-expand)                                            '(0 . 536870912))
(test (arity case)                                                   '(2 . 536870912))
(test (arity string-set!)                                            '(3 . 3))
(test (arity rationalize)                                            '(1 . 2))
(test (arity atan)                                                   '(1 . 2))
(test (arity asin)                                                   '(1 . 1))
(test (arity assq)                                                   '(2 . 2))
(test (arity assv)                                                   '(2 . 2))
(test (arity cond)                                                   '(1 . 536870912))
(test (arity cons)                                                   '(2 . 2))
(test (arity copy)                                                   '(1 . 2))
(test (arity else)                                                   '#f)
(test (arity eqv?)                                                   '(2 . 2))
(test (arity define*)                                                '(2 . 536870912))
(test (arity eval)                                                   '(1 . 2))
(test (arity let*)                                                   '(2 . 536870912))
(test (arity define-macro)                                           '(2 . 536870912))
(test (arity nan?)                                                   '(1 . 1))
(test (arity memq)                                                   '(2 . 2))
(test (arity memv)                                                   '(2 . 2))
(test (arity list)                                                   '(0 . 536870912))
(test (arity load)                                                   '(1 . 2))
(test (arity for-each)                                               '(2 . 536870912))
(test (arity read)                                                   '(0 . 1))
(test (arity set!)                                                   '(3 . 3))
(test (arity lambda)                                                 '(2 . 536870912))
(test (arity set-car!)                                               '(2 . 2))
(test (arity set-cdr!)                                               '(2 . 2))
(test (arity *features*)                                             '(1 . 536870912))
(test (arity *load-hook*)                                            '(0 . 1))
(test (arity list-set!)                                              '(3 . 536870912))
(test (arity list-tail)                                              '(2 . 2))
(test (arity *error-hook*)                                           '(0 . 2))
(test (arity current-error-port)                                     '(0 . 0))
(test (arity define-expansion)                                       '(2 . 536870912))
(test (arity symbol->value)                                          '(1 . 2))
(test (arity letrec)                                                 '(2 . 536870912))
(test (arity symbol->string)                                         '(1 . 1))
(test (arity procedure-environment)                                  '(1 . 1))
(test (arity make-vector)                                            '(1 . 2))
(test (arity member)                                                 '(2 . 3))
(test (arity string-fill!)                                           '(2 . 2))
(test (arity hook-functions)                                         '(1 . 1))
(test (arity make-hook)                                              '(0 . 536870912))
(test (arity number->string)                                         '(1 . 2))
(test (arity make-list)                                              '(1 . 2))
(test (arity error-environment)                                      '(0 . 0))
(test (arity open-output-string)                                     '(0 . 0))
(test (arity rational?)                                              '(1 . 1))
(test (arity open-input-string)                                      '(1 . 1))
(test (arity procedure-documentation)                                '(1 . 1))
(test (arity hash-table-set!)                                        '(3 . 3))
(test (arity hash-table-ref)                                         '(2 . 536870912))
(test (arity :optional)                                              '#f)
(test (arity call-with-values)                                       '(2 . 2))
(test (arity logand)                                                 '(0 . 536870912))
(test (arity logior)                                                 '(0 . 536870912))
(test (arity lognot)                                                 '(1 . 1))
(test (arity logbit?)                                                '(2 . 2))
(test (arity make-string)                                            '(1 . 2))
(test (arity logxor)                                                 '(0 . 536870912))
(test (arity vector-set!)                                            '(3 . 536870912))
(test (arity modulo)                                                 '(2 . 2))
(test (arity begin)                                                  '(0 . 536870912))
(test (arity catch)                                                  '(3 . 3))
(test (arity apply)                                                  '(1 . 536870912))
(test (arity denominator)                                            '(1 . 1))
(test (arity arity)                                                  '(1 . 1))
(test (arity most-positive-fixnum)                                   '#f)
(test (arity with-output-to-string)                                  '(1 . 1))
(test (arity assoc)                                                  '(2 . 3))
(test (arity call-with-input-file)                                   '(2 . 2))
(test (arity quasiquote)                                             '(1 . 1))
(test (arity fill!)                                                  '(2 . 2))
(test (arity newline)                                                '(0 . 1))
(test (arity provided?)                                              '(1 . 1))
(test (arity call-with-current-continuation)                         '(1 . 1))
(test (arity char-whitespace?)                                       '(1 . 1))
(test (arity random)                                                 '(1 . 2))
(test (arity floor)                                                  '(1 . 1))
(test (arity read-char)                                              '(0 . 1))
(test (arity even?)                                                  '(1 . 1))
(test (arity error)                                                  '(0 . 536870912))
(test (arity defined?)                                               '(1 . 2))
(test (arity read-byte)                                              '(0 . 1))
(test (arity macroexpand)                                            '(1 . 1))
(test (arity output-port?)                                           '(1 . 1))
(test (arity substring)                                              '(2 . 3))
(test (arity string-ref)                                             '(2 . 2))
(test (arity defmacro)                                               '(3 . 536870912))
(test (arity *unbound-variable-hook*)                                '(0 . 1))
(test (arity display)                                                '(1 . 2))
(test (arity read-line)                                              '(0 . 2))
(test (arity define-macro*)                                          '(2 . 536870912))
(test (arity eval-string)                                            '(1 . 2))
(test (arity port-filename)                                          '(0 . 1))
(test (arity define-constant)                                        '(2 . 536870912))
(test (arity list?)                                                  '(1 . 1))
(test (arity open-output-file)                                       '(1 . 2))
(test (arity global-environment)                                     '(0 . 0))
(test (arity quotient)                                               '(2 . 2))
(test (arity pair?)                                                  '(1 . 1))
(test (arity call-with-input-string)                                 '(2 . 2))
(test (arity random-state?)                                          '(1 . 1))
(test (arity with-input-from-string)                                 '(2 . 2))
(test (arity null?)                                                  '(1 . 1))
(test (arity eof-object?)                                            '(1 . 1))
(test (arity hash-table?)                                            '(1 . 1))
(test (arity hash-table)                                             '(0 . 536870912))
(test (arity close-output-port)                                      '(1 . 1))

(test (let () (define-macro (mac1 a b c) `(+ ,a ,b)) (arity mac1))   '(3 . 3))
(test (let () (define-macro (mac1 a b . c) `(+ ,a ,b)) (arity mac1)) '(2 . 536870912))
(test (let () (define-bacro (mac1 a b c) `(+ ,a ,b)) (arity mac1))   '(3 . 3))
(test (let () (define-bacro (mac1 a b . c) `(+ ,a ,b)) (arity mac1)) '(2 . 536870912))
(test (let () (defmacro mac1 (a b c) `(+ ,a ,b)) (arity mac1))       '(3 . 3))
(test (let () (defmacro mac1 (a b . c) `(+ ,a ,b)) (arity mac1))     '(2 . 536870912))
(test (let () (define-macro (mac1 a) `(+ 1 ,a)) (arity mac1))        '(1 . 1))

(test (let () (define-macro* (mac1 . a) `(+ ,a ,b)) (arity mac1))    '(0 . 536870912))
(test (let () (define-macro* (mac1 a) `(+ 1 ,a)) (arity mac1))       '(0 . 1))

(test (let () (define-macro* (mac1 a :rest b) `(+ 1 ,a)) (arity mac1)) '(0 . 536870912))
(test (let () (define-macro* (mac1 a . b) `(,a ,@b)) (arity mac1))   '(0 . 536870912))
(test (let () (define-macro* (mac1 a b c) `(+ ,a ,b)) (arity mac1))  '(0 . 3))

(test (arity "hiho") '(1 . 1))
(test (arity "") #f) 
(test (arity ()) #f)
(test (arity #()) #f)
(test (arity #(1 2 3)) '(1 . 536870912))
(test (arity (hash-table '(a . 1))) '(1 . 536870912))
(test (arity (current-environment)) '(1 . 1))
(test (let () (call-with-exit (lambda (goto) (arity goto)))) '(0 . 536870912))
(test (arity (make-hash-table-iterator (hash-table '(a . 1)))) '(0 . 536870912)) ; we don't have any info on this
(test (arity (make-random-state 123)) #f)
