(num-test (numerator (/ 8 -6)) -4)
(num-test (numerator -1/10) -1)
(num-test (numerator -1/1234000000) -1)
(num-test (numerator -1/2) -1)
(num-test (numerator -1/362880) -1)
(num-test (numerator -10/1) -10)
(num-test (numerator -10/1234) -5)
(num-test (numerator -10/3) -10)
(num-test (numerator -10/500029) -10)
(num-test (numerator -1234/10) -617)
(num-test (numerator -1234/1234000000) -1)
(num-test (numerator -1234/2) -617)
(num-test (numerator -1234/362880) -617)
(num-test (numerator -1234000000/1) -1234000000)
(num-test (numerator -1234000000/1234) -1000000)
(num-test (numerator -1234000000/3) -1234000000)
(num-test (numerator -1234000000/500029) -1234000000)
(num-test (numerator -2/1) -2)
(num-test (numerator -2/1234) -1)
(num-test (numerator -2/3) -2)
(num-test (numerator -2/500029) -2)
(num-test (numerator -2/6) -1)
(num-test (numerator -3/10) -3)
(num-test (numerator -3/1234000000) -3)
(num-test (numerator -3/2) -3)
(num-test (numerator -3/362880) -1)
(num-test (numerator -362880/1) -362880)
(num-test (numerator -362880/1234) -181440)
(num-test (numerator -362880/3) -120960)
(num-test (numerator -362880/500029) -362880)
(num-test (numerator -500029/10) -500029)
(num-test (numerator -500029/1234000000) -500029)
(num-test (numerator -500029/2) -500029)
(num-test (numerator -500029/362880) -500029)
(num-test (numerator 0/1) 0)
(num-test (numerator 0/10) 0)
(num-test (numerator 0/1234) 0)
(num-test (numerator 0/1234000000) 0)
(num-test (numerator 0/2) 0)
(num-test (numerator 0/3) 0)
(num-test (numerator 0/362880) 0)
(num-test (numerator 0/500029) 0)
(num-test (numerator 1) 1)
(num-test (numerator 1/1) 1)
(num-test (numerator 1/1234) 1)
(num-test (numerator 1/3) 1)
(num-test (numerator 1/500029) 1)
(num-test (numerator 10/10) 1)
(num-test (numerator 10/1234000000) 1)
(num-test (numerator 10/2) 5)
(num-test (numerator 10/362880) 1)
(num-test (numerator 12/6000996) 1)
(num-test (numerator 1234/1) 1234)
(num-test (numerator 1234/1234) 1)
(num-test (numerator 1234/3) 1234)
(num-test (numerator 1234/500029) 1234)
(num-test (numerator 1234000000/10) 123400000)
(num-test (numerator 1234000000/1234000000) 1)
(num-test (numerator 1234000000/2) 617000000)
(num-test (numerator 1234000000/362880) 1928125)
(num-test (numerator 2/10) 1)
(num-test (numerator 2/1234000000) 1)
(num-test (numerator 2/2) 1)
(num-test (numerator 2/3) 2)
(num-test (numerator 2/362880) 1)
(num-test (numerator 2/4) 1)
(num-test (numerator 3/1) 3)
(num-test (numerator 3/1234) 3)
(num-test (numerator 3/3) 1)
(num-test (numerator 3/500029) 3)
(num-test (numerator 362880/10) 36288)
(num-test (numerator 362880/1234000000) 567)
(num-test (numerator 362880/2) 181440)
(num-test (numerator 362880/362880) 1)
(num-test (numerator 5/2) 5)
(num-test (numerator 500029/1) 500029)
(num-test (numerator 500029/1234) 500029)
(num-test (numerator 500029/3) 500029)
(num-test (numerator 500029/500029) 1)
(num-test (numerator -9223372036854775808) -9223372036854775808)
(num-test (numerator 9223372036854775807) 9223372036854775807)
(num-test (numerator (/ 2 -1)) -2)
(num-test (numerator (/ most-positive-fixnum 2)) most-positive-fixnum)
(num-test (numerator (/ most-negative-fixnum 3)) most-negative-fixnum)
(num-test (numerator (/ most-negative-fixnum most-positive-fixnum)) most-negative-fixnum)

(if with-bignums
    (begin
      (num-test (numerator 1195068768795265792518361315725116351898245581/48889032896862784894921) 24444516448431392447461)
      (num-test (numerator 24444516448431392447461/1195068768795265792518361315725116351898245581) 1)
      (num-test (numerator -46116860184273879035/27670116110564327424) -46116860184273879035)
      (num-test (numerator (/ 9223372036854775808 -9223372036854775807)) -9223372036854775808)
      (num-test (numerator 1234567891234567890/1234567) 1234567891234567890)
      (num-test (numerator 9223372036854775808/9223372036854775807) 9223372036854775808)
      (test (numerator 0+92233720368547758081.0i) 'error)
      ))

(test (numerator 0.0) 'error) ; guile thinks this is ok
(test (numerator 1.23 1.23) 'error)
(test (numerator 1.23+1.0i) 'error)
(test (numerator) 'error)
(test (numerator inf.0) 'error)
(test (numerator nan.0) 'error)
(test (numerator "hi") 'error)
(test (numerator 1+i) 'error)
(test (numerator 2.3+0.5i) 'error)

(for-each
 (lambda (arg)
   (test (numerator arg) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))
