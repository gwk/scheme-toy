(num-test (round (- (+ 1 -1/123400000))) -1)
(num-test (round (- 1 1/123400000)) 1)
(num-test (round (/ (- most-positive-fixnum 1) most-positive-fixnum)) 1)
(num-test (round (/ -1 most-positive-fixnum)) 0)
(num-test (round (/ 1 most-positive-fixnum)) 0)
(num-test (round (/ most-negative-fixnum most-positive-fixnum)) -1)
(num-test (round -0) 0)
(num-test (round -0.0) 0)
(num-test (round -0.1) 0)
(num-test (round -0.9) -1)
(num-test (round -1) -1)
(num-test (round -1.1) -1)
(num-test (round -1.9) -2)
(num-test (round -1/10) 0)
(num-test (round -1/123400000) 0)
(num-test (round -1/2) 0)
(num-test (round -100/3) -33)
(num-test (round -11/10) -1)
(num-test (round -17/2) -8)
(num-test (round -19/10) -2)
(num-test (round -2.225073858507201399999999999999999999996E-308) 0)
(num-test (round -2/3) -1)
(num-test (round -200/3) -67)
(num-test (round -3/2) -2)
(num-test (round -9/10) -1)
(num-test (round -9223372036854775808) -9223372036854775808)
(num-test (round 0) 0)
(num-test (round 0.0) 0)
(num-test (round 0.1) 0)
(num-test (round 0.9) 1)
(num-test (round 1) 1)
(num-test (round 1.1) 1)
(num-test (round 1.110223024625156799999999999999999999997E-16) 0)
(num-test (round 1.9) 2)
(num-test (round 1/10) 0)
(num-test (round 1/123400000) 0)
(num-test (round 1/2) 0)
(num-test (round 100/3) 33)
(num-test (round 11/10) 1)
(num-test (round 17.3) 17)
(num-test (round 19) 19)
(num-test (round 19/10) 2)
(num-test (round 2.4) 2)
(num-test (round 2.5) 2)
(num-test (round 2.5) 2)
(num-test (round 2.6) 3)
(num-test (round 2/3) 1)
(num-test (round 200/3) 67)
(num-test (round 3.5) 4)
(num-test (round 3/2) 2)
(num-test (round 9/10) 1)
(num-test (round 9223372036854775807) 9223372036854775807)
(num-test (round most-negative-fixnum) most-negative-fixnum)
(num-test (round most-positive-fixnum) most-positive-fixnum)

(num-test (round (+ 8388608 .1)) 8388608)
(num-test (round (+ 8388608 .9)) 8388609)
(num-test (round (- 8388608 .1)) 8388608)
(num-test (round (- 8388608 .9)) 8388607)

(num-test (round 9007199254740990.501) 9007199254740991)
(num-test (round 9007199254740990.499) 9007199254740990)

(if with-bignums
    (begin
      (num-test (round 9007199254740992.51) 9007199254740993)
      (num-test (round 9007199254740993.99) 9007199254740994))
    (begin
      (test (round 1e308) 'error)
      (test (round 1e19) 'error)
      (test (round -1e308) 'error)
      (test (round -1e19) 'error)))

(test (= (round (* 111738283365989051/177100989030047175 1.0)) (round 130441933147714940/206745572560704147)) #t)
(test (= (round (* 114243/80782 114243/80782 1.0)) (round (* 275807/195025 275807/195025))) #t)
(test (= (round (* 131836323/93222358 131836323/93222358 1.0)) (round (* 318281039/225058681 318281039/225058681))) #t)
(test (= (round (* 1393/985 1393/985 1.0)) (round (* 3363/2378 3363/2378))) #t)
(test (= (round (* 1607521/1136689 1607521/1136689 1.0)) (round (* 3880899/2744210 3880899/2744210))) #t)
(test (= (round (* 1855077841/1311738121 1855077841/1311738121 1.0)) (round (* 4478554083/3166815962 4478554083/3166815962))) #t)
(test (= (round (* 19601/13860 19601/13860 1.0)) (round (* 47321/33461 47321/33461))) #t)
(test (= (round (* 275807/195025 275807/195025 1.0)) (round (* 1607521/1136689 1607521/1136689))) #t)
(test (= (round (* 318281039/225058681 318281039/225058681 1.0)) (round (* 1855077841/1311738121 1855077841/1311738121))) #t)
(test (= (round (* 3363/2378 3363/2378 1.0)) (round (* 19601/13860 19601/13860))) #t)
(test (= (round (* 3880899/2744210 3880899/2744210 1.0)) (round (* 9369319/6625109 9369319/6625109))) #t)
(test (= (round (* 47321/33461 47321/33461 1.0)) (round (* 114243/80782 114243/80782))) #t)
(test (= (round (* 54608393/38613965 54608393/38613965 1.0)) (round (* 131836323/93222358 131836323/93222358))) #t)
(test (= (round (* 9369319/6625109 9369319/6625109 1.0)) (round (* 54608393/38613965 54608393/38613965))) #t)

(test (round 1.23 1.23) 'error)
(test (round 1.23+1.0i) 'error)
(test (round) 'error)

(for-each
 (lambda (arg)
   (test (round arg) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))

(num-test (round 400000000000000000/800000000000000001) 0)
(num-test (round 400000000000000000/799999999999999999) 1)

(if with-bignums
    (begin
      (num-test (round (+ (expt 2.0 62) 512)) 4611686018427388416)
      (num-test (round (+ (expt 2.0 62) 513)) 4611686018427388417)
      (num-test (round (exact->inexact most-negative-fixnum)) most-negative-fixnum)
      (test (round (exact->inexact most-positive-fixnum)) most-positive-fixnum)

      (num-test (round -1e19) -10000000000000000000)
      (num-test (round -1e32) -100000000000000000000000000000000)
      (num-test (round 100000000000000000000000000000000/3) 33333333333333333333333333333333)
      (num-test (round -100000000000000000000000000000000/3) -33333333333333333333333333333333)
      (num-test (round 200000000000000000000000000000000/3) 66666666666666666666666666666667)
      (num-test (round -200000000000000000000000000000000/3) -66666666666666666666666666666667)

      (test (= (round (* 1180872205318713601/835002744095575440 1180872205318713601/835002744095575440 1.0)) 
	       (round (* 2850877693509864481/2015874949414289041 2850877693509864481/2015874949414289041))) #t)
      (test (= (round (* 1362725501650887306817/963592443113182178088 1362725501650887306817/963592443113182178088 1.0)) 
	       (round (* 3289910387877251662993/2326317944764069484905 3289910387877251662993/2326317944764069484905))) #t)
      (test (= (round (* 14398739476117879/10181446324101389 14398739476117879/10181446324101389 1.0)) 
	       (round (* 34761632124320657/24580185800219268 34761632124320657/24580185800219268))) #t)
      (test (= (round (* 16616132878186749607/11749380235262596085 16616132878186749607/11749380235262596085 1.0)) 
	       (round (* 40114893348711941777/28365513113449345692 40114893348711941777/28365513113449345692))) #t)
      (test (= (round (* 202605639573839043/143263821649299118 202605639573839043/143263821649299118 1.0)) 
	       (round (* 489133282872437279/345869461223138161 489133282872437279/345869461223138161))) #t)
      (test (= (round (* 2850877693509864481/2015874949414289041 2850877693509864481/2015874949414289041 1.0)) 
	       (round (* 16616132878186749607/11749380235262596085 16616132878186749607/11749380235262596085))) #t)
      (test (= (round (* 34761632124320657/24580185800219268 34761632124320657/24580185800219268 1.0)) 
	       (round (* 202605639573839043/143263821649299118 202605639573839043/143263821649299118))) #t)
      (test (= (round (* 40114893348711941777/28365513113449345692 40114893348711941777/28365513113449345692 1.0)) 
	       (round (* 96845919575610633161/68480406462161287469 96845919575610633161/68480406462161287469))) #t)
      (test (= (round (* 489133282872437279/345869461223138161 489133282872437279/345869461223138161 1.0)) 
	       (round (* 1180872205318713601/835002744095575440 1180872205318713601/835002744095575440))) #t)
      (test (= (round (* 5964153172084899/4217293152016490 5964153172084899/4217293152016490 1.0)) 
	       (round (* 14398739476117879/10181446324101389 14398739476117879/10181446324101389))) #t)
      (test (= (round (* 96845919575610633161/68480406462161287469 96845919575610633161/68480406462161287469 1.0)) 
	       (round (* 564459384575477049359/399133058537705128729 564459384575477049359/399133058537705128729))) #t)
      ))

(test (equal? (let ((vals '())) 
		(do ((k 1/3 (+ k 1/3))) ((> k 2) (reverse vals)) 
		  (set! vals (cons (round k) vals)))) 
	      (list 0 1 1 1 2 2)) 
      #t)
(test (equal? (let ((vals '())) 
		(do ((k 1/3 (+ k 1/3))) ((> k 2) (reverse vals)) 
		  (set! vals (cons (round (- k)) vals)))) 
	      (list 0 -1 -1 -1 -2 -2)) 
      #t)
(test (equal? (let ((vals '())) 
		(do ((k 1/2 (+ k 1/2))) ((> k 3) (reverse vals)) 
		  (set! vals (cons (round k) vals)))) 
	      (list 0 1 2 2 2 3)) 
      #t)
(test (equal? (let ((vals '())) 
		(do ((k 1/2 (+ k 1/2))) ((> k 3) (reverse vals))
		  (set! vals (cons (round (- k)) vals))))
	      (list 0 -1 -2 -2 -2 -3)) 
      #t)

(let ((top-exp 60))
  (if with-bignums 
      (set! top-exp 150))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (/ (- (expt 2 i) 1) 2))
	     (val2 (expt 2 (- i 1)))
	     (fv (floor val1))
	     (rv (round val1))
	     (cv (ceiling val1))
	     (tv (truncate val1)))
	(if (not (= fv (- val2 1)))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv (- val2 1)))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (not (= rv val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (/ (+ (expt 2 i) 1) 2))
	     (val2 (expt 2 (- i 1)))
	     (fv (floor val1))
	     (rv (round val1))
	     (cv (ceiling val1))
	     (tv (truncate val1)))
	(if (not (= fv val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv (+ val2 1)))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (not (= rv val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (expt 2 i))
	     (val2 (- val1 1)))
	(if (= (floor val1) (floor val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = (floor ~S)?~%" val1 val2)))
	(if (= (ceiling val1) (ceiling val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = (ceiling ~S)?~%" val1 val2)))
	(if (= (truncate val1) (truncate val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = (truncate ~S)?~%" val1 val2)))
	(if (= (round val1) (round val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = (round ~S)?~%" val1 val2))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (/ (- (expt 2 i) 1) 2))
	     (val2 (/ (- (expt 2 i) 3) 2)))
	(if (= (floor val1) (floor val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = (floor ~S)?~%" val1 val2)))
	(if (= (ceiling val1) (ceiling val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = (ceiling ~S)?~%" val1 val2)))
	(if (= (truncate val1) (truncate val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = (truncate ~S)?~%" val1 val2)))
	(if (= (round val1) (round val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = (round ~S)?~%" val1 val2))))))
  
  (let ((happy #t)
	(off-by 1/3))
    (do ((i 2 (+ i 1)))
	((or (not happy) (>= i top-exp)))
      (let* ((val1 (/ (expt 2 i) 3))
	     (fv (floor val1))
	     (cv (ceiling val1))
	     (tv (truncate val1))
	     (rv (round val1)))
	(if (not (= fv (- val1 off-by)))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv (+ val1 (- 1 off-by))))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv (- val1 off-by)))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (= off-by 1/3)
	    (if (not (= rv (- val1 off-by)))
		(begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv)))
	    (if (not (= rv (+ val1 (- 1 off-by))))
		(begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))
	(if (= off-by 1/3)
	    (set! off-by 2/3)
	    (set! off-by 1/3)))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (- (/ (- (expt 2 i) 1) 2)))
	     (val2 (- (expt 2 (- i 1))))
	     (fv (floor val1))
	     (rv (round val1))
	     (cv (ceiling val1))
	     (tv (truncate val1)))
	(if (not (= fv val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv (+ val2 1)))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv (+ val2 1)))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (not (= rv val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (- (/ (+ (expt 2 i) 1) 2)))
	     (val2 (- (expt 2 (- i 1))))
	     (fv (floor val1))
	     (rv (round val1))
	     (cv (ceiling val1))
	     (tv (truncate val1)))
	(if (not (= fv (- val2 1)))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (not (= rv val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (- (expt 2 i)))
	     (val2 (+ val1 1)))
	(if (= (floor val1) (floor val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = (floor ~S)?~%" val1 val2)))
	(if (= (ceiling val1) (ceiling val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = (ceiling ~S)?~%" val1 val2)))
	(if (= (truncate val1) (truncate val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = (truncate ~S)?~%" val1 val2)))
	(if (= (round val1) (round val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = (round ~S)?~%" val1 val2))))))
  
  (let ((happy #t))
    (do ((i 2 (+ i 1)))
	((or (not happy) (> i top-exp)))
      (let* ((val1 (- (/ (- (expt 2 i) 1) 2)))
	     (val2 (- (/ (- (expt 2 i) 3) 2))))
	(if (= (floor val1) (floor val2))
	    (begin (set! happy #f) (format #t ";(floor ~S) = (floor ~S)?~%" val1 val2)))
	(if (= (ceiling val1) (ceiling val2))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = (ceiling ~S)?~%" val1 val2)))
	(if (= (truncate val1) (truncate val2))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = (truncate ~S)?~%" val1 val2)))
	(if (= (round val1) (round val2))
	    (begin (set! happy #f) (format #t ";(round ~S) = (round ~S)?~%" val1 val2))))))
  
  (let ((happy #t)
	(off-by 2/3))
    (do ((i 2 (+ i 1)))
	((or (not happy) (>= i top-exp)))
      (let* ((val1 (- (/ (expt 2 i) 3)))
	     (fv (floor val1))
	     (cv (ceiling val1))
	     (tv (truncate val1))
	     (rv (round val1)))
	(if (not (= fv (- val1 off-by)))
	    (begin (set! happy #f) (format #t ";(floor ~S) = ~S?~%" val1 fv)))
	(if (not (= cv (+ val1 (- 1 off-by))))
	    (begin (set! happy #f) (format #t ";(ceiling ~S) = ~S?~%" val1 cv)))
	(if (not (= tv (+ val1 (- 1 off-by))))
	    (begin (set! happy #f) (format #t ";(truncate ~S) = ~S?~%" val1 tv)))
	(if (= off-by 1/3)
	    (if (not (= rv (- val1 off-by)))
		(begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv)))
	    (if (not (= rv (+ val1 (- 1 off-by))))
		(begin (set! happy #f) (format #t ";(round ~S) = ~S?~%" val1 rv))))
	(if (= off-by 1/3)
	    (set! off-by 2/3)
	    (set! off-by 1/3)))))
  )
