(num-test (rationalize 0.0 1.0001) 0)
(num-test (rationalize -0.0 1.0001) 0)
(num-test (rationalize 0.0 0.50000000000000) 0)
(num-test (rationalize -0.0 0.50000000000000) 0)
(num-test (rationalize 0.0 0.1) 0)
(num-test (rationalize -0.0 0.1) 0)
(num-test (rationalize 0.0 0.001) 0)
(num-test (rationalize -0.0 0.001) 0)
(num-test (rationalize 0.0 0.00300000000000) 0)
(num-test (rationalize -0.0 0.00300000000000) 0)
(num-test (rationalize 0.0 0.00002000000000) 0)
(num-test (rationalize -0.0 0.00002000000000) 0)
(num-test (rationalize 0.0 0.00000001) 0)
(num-test (rationalize -0.0 0.00000001) 0)
(num-test (rationalize 0.00000001 1.0) 0)
(num-test (rationalize -0.00000001 1.0) 0)
(num-test (rationalize 0.00000001 0.50000000000000) 0)
(num-test (rationalize -0.00000001 0.50000000000000) 0)
(num-test (rationalize 0.00000001 0.1) 0)
(num-test (rationalize -0.00000001 0.1) 0)
(num-test (rationalize 0.00000001 0.001) 0)
(num-test (rationalize -0.00000001 0.001) 0)
(num-test (rationalize 0.00000001 0.00300000000000) 0)
(num-test (rationalize -0.00000001 0.00300000000000) 0)
(num-test (rationalize 0.00000001 0.00002000000000) 0)
(num-test (rationalize -0.00000001 0.00002000000000) 0)
(num-test (rationalize 0.00000001 0.000000011) 0)
(num-test (rationalize -0.00000001 0.000000011) 0)
(num-test (rationalize 1.0 1.0001) 0)
(num-test (rationalize -1.0 1.0001) 0)
(num-test (rationalize 1.0 0.999) 1)
(num-test (rationalize -1.0 0.999) -1)
(num-test (rationalize 1.0 0.50000000000000) 1)
(num-test (rationalize -1.0 0.50000000000000) -1)
(num-test (rationalize 1.0 0.1) 1)
(num-test (rationalize -1.0 0.1) -1)
(num-test (rationalize 1.0 0.001) 1)
(num-test (rationalize -1.0 0.001) -1)
(num-test (rationalize 1.0 0.00300000000000) 1)
(num-test (rationalize -1.0 0.00300000000000) -1)
(num-test (rationalize 1.0 0.00002000000000) 1)
(num-test (rationalize -1.0 0.00002000000000) -1)
(num-test (rationalize 1.0 0.00000001) 1)
(num-test (rationalize -1.0 0.00000001) -1)
(num-test (rationalize 3.14159265358979 1.0) 3)
(num-test (rationalize -3.14159265358979 1.0) -3)
(num-test (rationalize 3.14159265358979 0.50000000000000) 3)
(num-test (rationalize -3.14159265358979 0.50000000000000) -3)
(num-test (rationalize 3.14159265358979 0.1) 16/5)
(num-test (rationalize -3.14159265358979 0.1) -16/5)
(num-test (rationalize 3.14159265358979 0.001) 201/64)
(num-test (rationalize -3.14159265358979 0.001) -201/64)
(num-test (rationalize 3.14159265358979 0.00300000000000) 22/7)
(num-test (rationalize -3.14159265358979 0.00300000000000) -22/7)
(num-test (rationalize 3.14159265358979 0.00002000000000) 355/113)
(num-test (rationalize -3.14159265358979 0.00002000000000) -355/113)
(num-test (rationalize 3.14159265358979 0.00000001) 100798/32085)
(num-test (rationalize -3.14159265358979 0.00000001) -100798/32085)
(num-test (rationalize 2.71828182845905 1.0) 2)
(num-test (rationalize -2.71828182845905 1.0) -2)
(num-test (rationalize 2.71828182845905 0.50000000000000) 3)
(num-test (rationalize -2.71828182845905 0.50000000000000) -3)
(num-test (rationalize 2.71828182845905 0.1) 8/3)
(num-test (rationalize -2.71828182845905 0.1) -8/3)
(num-test (rationalize 2.71828182845905 0.001) 87/32)
(num-test (rationalize -2.71828182845905 0.001) -87/32)
(num-test (rationalize 2.71828182845905 0.00300000000000) 68/25)
(num-test (rationalize -2.71828182845905 0.00300000000000) -68/25)
(num-test (rationalize 2.71828182845905 0.00002000000000) 878/323)
(num-test (rationalize -2.71828182845905 0.00002000000000) -878/323)
(num-test (rationalize 2.71828182845905 0.00000001) 23225/8544)
(num-test (rationalize -2.71828182845905 0.00000001) -23225/8544)
(num-test (rationalize 1234.12339999999995 1.0) 1234)
(num-test (rationalize -1234.12339999999995 1.0) -1234)
(num-test (rationalize 1234.12339999999995 0.50000000000000) 1234)
(num-test (rationalize -1234.12339999999995 0.50000000000000) -1234)
(num-test (rationalize 1234.12339999999995 0.1) 6171/5)
(num-test (rationalize -1234.12339999999995 0.1) -6171/5)
(num-test (rationalize 1234.12339999999995 0.001) 60472/49)
(num-test (rationalize -1234.12339999999995 0.001) -60472/49)
(num-test (rationalize 1234.12339999999995 0.00300000000000) 9873/8)
(num-test (rationalize -1234.12339999999995 0.00300000000000) -9873/8)
(num-test (rationalize 1234.12339999999995 0.00002000000000) 290019/235)
(num-test (rationalize -1234.12339999999995 0.00002000000000) -290019/235)
(num-test (rationalize 1234.12339999999995 0.00000001) 6170617/5000)
(num-test (rationalize -1234.12339999999995 0.00000001) -6170617/5000)
(num-test (rationalize 1234000000.01234006881714 1.0) 1234000000/1)
(num-test (rationalize -1234000000.01234006881714 1.0) -1234000000/1)
(num-test (rationalize 1234000000.01234006881714 0.50000000000000) 1234000000/1)
(num-test (rationalize -1234000000.01234006881714 0.50000000000000) -1234000000/1)
(num-test (rationalize 1234000000.01234006881714 0.1) 1234000000/1)
(num-test (rationalize -1234000000.01234006881714 0.1) -1234000000/1)
(num-test (rationalize 1234000000.01234006881714 0.001) 92550000001/75)
(num-test (rationalize -1234000000.01234006881714 0.001) -92550000001/75)
(num-test (rationalize 1234000000.01234006881714 0.00300000000000) 81444000001/66)
(num-test (rationalize -1234000000.01234006881714 0.00300000000000) -81444000001/66)
(num-test (rationalize 1234000000.01234006881714 0.00002000000000) 99954000001/81)
(num-test (rationalize -1234000000.01234006881714 0.00002000000000) -99954000001/81)
(num-test (rationalize 1234000000.01234006881714 0.000001) 2400130000024/1945)
(num-test (rationalize -1234000000.01234006881714 0.000001) -2400130000024/1945)
(num-test (rationalize 0.33 1.0) 0)
(num-test (rationalize -0.33 1.0) 0)
(num-test (rationalize 0.33 0.50000000000000) 0)
(num-test (rationalize -0.33 0.50000000000000) 0)
(num-test (rationalize 0.33 0.1) 1/3)
(num-test (rationalize -0.33 0.1) -1/3)
(num-test (rationalize 0.33 0.001) 26/79)
(num-test (rationalize -0.33 0.001) -26/79)
(num-test (rationalize 0.33 0.00300000000000) 18/55)
(num-test (rationalize -0.33 0.00300000000000) -18/55)
(num-test (rationalize 0.33 0.00002000000000) 33/100)
(num-test (rationalize -0.33 0.00002000000000) -33/100)
(num-test (rationalize 0.33 0.00000001) 33/100)
(num-test (rationalize -0.33 0.00000001) -33/100)
(num-test (rationalize 0.99990 1.0) 0)
(num-test (rationalize -0.99990 1.0) 0)
(num-test (rationalize 0.99990 0.50000000000000) 1)
(num-test (rationalize -0.99990 0.50000000000000) -1)
(num-test (rationalize 0.99990 0.1) 1)
(num-test (rationalize -0.99990 0.1) -1)
(num-test (rationalize 0.99990 0.001) 1)
(num-test (rationalize -0.99990 0.001) -1)
(num-test (rationalize 0.99990 0.00300000000000) 1)
(num-test (rationalize -0.99990 0.00300000000000) -1)
(num-test (rationalize 0.99990 0.00002000000000) 8333/8334)
(num-test (rationalize -0.99990 0.00002000000000) -8333/8334)
(num-test (rationalize 0.99990 0.00000001) 9999/10000)
(num-test (rationalize -0.99990 0.00000001) -9999/10000)
(num-test (rationalize 0.5010 1.0) 0)
(num-test (rationalize -0.5010 1.0) 0)
(num-test (rationalize 0.5010 0.50000000000000) 1)
(num-test (rationalize -0.5010 0.50000000000000) -1)
(num-test (rationalize 0.5010 0.1) 1/2)
(num-test (rationalize -0.5010 0.1) -1/2)
(num-test (rationalize 0.5010 0.00099) 127/253)
(num-test (rationalize -0.5010 0.00099) -127/253)
(num-test (rationalize 0.5010 0.00300000000000) 1/2)
(num-test (rationalize -0.5010 0.00300000000000) -1/2)
(num-test (rationalize 0.5010 0.00002000000000) 246/491)
(num-test (rationalize -0.5010 0.00002000000000) -246/491)
(num-test (rationalize 0.5010 0.00000001) 501/1000)
(num-test (rationalize -0.5010 0.00000001) -501/1000)
(num-test (rationalize 0.499 1.0) 0)
(num-test (rationalize -0.499 1.0) 0)
(num-test (rationalize 0.499 0.50000000000000) 0)
(num-test (rationalize -0.499 0.50000000000000) 0)
(num-test (rationalize 0.499 0.1) 1/2)
(num-test (rationalize -0.499 0.1) -1/2)
(num-test (rationalize 0.499 0.00099) 126/253)
(num-test (rationalize -0.499 0.00099) -126/253)
(num-test (rationalize 0.499 0.00300000000000) 1/2)
(num-test (rationalize -0.499 0.00300000000000) -1/2)
(num-test (rationalize 0.499 0.00002000000000) 245/491)
(num-test (rationalize -0.499 0.00002000000000) -245/491)
(num-test (rationalize 0.499 0.00000001) 499/1000)
(num-test (rationalize -0.499 0.00000001) -499/1000)
(num-test (rationalize 1.501 1.0) 1)
(num-test (rationalize -1.501 1.0) -1)
(num-test (rationalize 1.501 0.50000000000000) 2)
(num-test (rationalize -1.501 0.50000000000000) -2)
(num-test (rationalize 1.501 0.1) 3/2)
(num-test (rationalize -1.501 0.1) -3/2)
(num-test (rationalize 1.501 0.01) 3/2)
(num-test (rationalize -1.501 0.01) -3/2)
(num-test (rationalize 1.501 0.00300000000000) 3/2)
(num-test (rationalize -1.501 0.00300000000000) -3/2)
(num-test (rationalize 1.501 0.00002000000000) 737/491)
(num-test (rationalize -1.501 0.00002000000000) -737/491)
(num-test (rationalize 1.501 0.00000001) 1501/1000)
(num-test (rationalize -1.501 0.00000001) -1501/1000)
(num-test (rationalize 1.499 1.0) 1)
(num-test (rationalize -1.499 1.0) -1)
(num-test (rationalize 1.499 0.50000000000000) 1)
(num-test (rationalize -1.499 0.50000000000000) -1)
(num-test (rationalize 1.499 0.1) 3/2)
(num-test (rationalize -1.499 0.1) -3/2)
(num-test (rationalize 1.499 0.001) 3/2)
(num-test (rationalize -1.499 0.001) -3/2)
(num-test (rationalize 1.499 0.00300000000000) 3/2)
(num-test (rationalize -1.499 0.00300000000000) -3/2)
(num-test (rationalize 1.499 0.00002000000000) 736/491)
(num-test (rationalize -1.499 0.00002000000000) -736/491)
(num-test (rationalize 1.499 0.00000001) 1499/1000)
(num-test (rationalize -1.499 0.00000001) -1499/1000)

(num-test (rationalize 1.16 .2) 1)
(num-test (rationalize 1.16 .1) 5/4)
(num-test (rationalize 1.16 .041) 6/5)
(num-test (rationalize 1.16 .039) 7/6)
(num-test (rationalize 1.16 .007) 7/6)
(num-test (rationalize 1.16 .006) 22/19)
(num-test (rationalize 1.16 .0022) 22/19)
(num-test (rationalize 1.16 .002) 29/25)
(num-test (rationalize 1.16 .0000001) 29/25)
(num-test (rationalize .1 .1) 0)
(num-test (rationalize .1 .0999) 1/6)
(num-test (rationalize .1 .065) 1/7)
(num-test (rationalize .1 .067) 1/6)
(num-test (rationalize .1 .04) 1/8)
(num-test (rationalize .1 .02) 1/9)
(num-test (rationalize .1 .01) 1/10)

(num-test (rationalize 23.1 22.0) 2)
(num-test (rationalize 23.1 22) 2)
(num-test (rationalize 23.1 .5) 23)
(num-test (rationalize 23.1 1/2) 23)

(num-test (rationalize 1/2 3/4) 0)
(num-test (rationalize 1/2 1/4) 1/2)
(num-test (rationalize 1 3) 0)
(num-test (rationalize 11/10 1/5) 1)
(num-test (rationalize 3/4 1/2) 1)
(num-test (rationalize 1/4 1/3) 0)
(num-test (rationalize 1/4 1/6) 1/3)
(num-test (rationalize 2/3 1/4) 1/2)
(num-test (rationalize 1/3 1/3) 0)
(num-test (rationalize 1/3 1/4) 1/2)
(num-test (rationalize 3/10 1/10) 1/3)

(num-test (rationalize 1 .1) 1)
(num-test (rationalize 1 1) 0)
(num-test (rationalize 1 1/2) 1)
(num-test (rationalize 1 0) 1)
(num-test (rationalize 0 -.1) 0)
(num-test (rationalize 0 1) 0)
(num-test (rationalize 0 0) 0)
(num-test (rationalize -1 .1) -1)
(num-test (rationalize -1 -1) 0)

(num-test (rationalize (exact->inexact 1/2) 3/4) 0)
(num-test (rationalize (exact->inexact 1/2) 1/4) 1/2)
(num-test (rationalize (exact->inexact 1) 3) 0)
(num-test (rationalize (exact->inexact 11/10) 1/5) 1)
(num-test (rationalize (exact->inexact 3/4) 1/2) 1)
(num-test (rationalize (exact->inexact 1/4) 1/3) 0)
(num-test (rationalize (exact->inexact 1/4) 1/6) 1/3)
(num-test (rationalize (exact->inexact 2/3) 1/4) 1/2)
(num-test (rationalize (exact->inexact 1/3) 1/4) 1/2)
(num-test (rationalize (exact->inexact 3/10) 1/10) 1/3)

(num-test (rationalize 1/2 (exact->inexact 3/4)) 0)
(num-test (rationalize 1/2 (exact->inexact 1/4)) 1/2)
(num-test (rationalize 1 (exact->inexact 3)) 0)
(num-test (rationalize 11/10 (exact->inexact 1/5)) 1)
(num-test (rationalize 3/4 (exact->inexact 1/2)) 1)
(num-test (rationalize 1/4 (exact->inexact 1/3)) 0)
(num-test (rationalize 1/4 (exact->inexact 1/6)) 1/3)
(num-test (rationalize 2/3 (exact->inexact 1/4)) 1/2)
(num-test (rationalize 1/3 (exact->inexact 1/4)) 1/2)
(num-test (rationalize 3/10 (exact->inexact 1/10)) 1/3)

(num-test (rationalize (exact->inexact 1/2) (exact->inexact 3/4)) 0)
(num-test (rationalize (exact->inexact 1/2) (exact->inexact 1/4)) 1/2)
(num-test (rationalize (exact->inexact 1) (exact->inexact 3)) 0)
(num-test (rationalize (exact->inexact 11/10) (exact->inexact 1/5)) 1)
(num-test (rationalize (exact->inexact 3/4) (exact->inexact 1/2)) 1)
(num-test (rationalize (exact->inexact 1/4) (exact->inexact 1/3)) 0)
(num-test (rationalize (exact->inexact 1/4) (exact->inexact 1/6)) 1/3)
(num-test (rationalize (exact->inexact 2/3) (exact->inexact 1/4)) 1/2)
(num-test (rationalize (exact->inexact 1/3) (exact->inexact 1/4)) 1/2)
(num-test (rationalize (exact->inexact 3/10) (exact->inexact 1/10)) 1/3)

(num-test (rationalize -1/2 3/4) 0)
(num-test (rationalize -1/2 1/4) -1/2)
(num-test (rationalize -1 3) 0)
(num-test (rationalize -11/10 1/5) -1)
(num-test (rationalize -3/4 1/2) -1)
(num-test (rationalize -1/4 1/3) 0)
(num-test (rationalize -1/4 1/6) -1/3)
(num-test (rationalize -2/3 1/4) -1/2)
(num-test (rationalize -1/3 1/4) -1/2)
(num-test (rationalize -1/3 1/3) 0)
(num-test (rationalize -3/10 1/10) -1/3)
(num-test (rationalize .0999 .1) 0)
(num-test (rationalize -.0999 .1) 0)
(num-test (rationalize 1.0999 .1) 1)
(num-test (rationalize -1.0999 .1) -1)

(num-test (rationalize .239 .0005) 11/46) ;baseball of course... the average .001 is the hardest to get: 1/667
(num-test (rationalize .001 .0005) 1/667)
(num-test (rationalize .334 .0005) 96/287)

(num-test (rationalize 1.0000001 0.00000001) 9090911/9090910)
(num-test (rationalize 0.000000015 0.0000000009999999) 1/62500001)
(num-test (rationalize 0.00000001 1e-16) 1/100000000)
(num-test (rationalize 0.1 0) 1/10)
(num-test (rationalize 0.1 .00000000000000001) 1/10)
(num-test (/ 0.(rationalize .1)) 0.0)

(num-test (rationalize .1 0) 1/10)
;;; but (rationalize 0.1 0) -> 1526457681181556/15264576811815559? independent of precision
;;; and (rationalize 0.1000000000000000 0) -> 1/10 so once again it's either the idiotic reader or the bignum promotion process
;;;     (rationalize 0.00000001 0) 3022314549036573/302231454903657293676544? 

(num-test (rationalize 1e-3 0) 1/1000)
(num-test (rationalize 1e-12 0) 1/1000000000000)
(num-test (rationalize 1e-15 0) 1/1000000000000000)
(num-test (rationalize (+ 1e2 1e-2) 0) 10001/100)

(num-test (rationalize -1 -1) 0) ;; spec says "differs by no more than", but that seems to imply a comparison
;; on either side, so a negative error doesn't change the result??
(num-test (rationalize 1/4 -1/6) 1/3)
(num-test (rationalize -3/10 -1/10) -1/3)
(num-test (rationalize (exact->inexact 1/3) (exact->inexact -1/4)) 1/2)
(num-test (rationalize 0.5 0.02) 1/2)
(num-test (rationalize 1073741824 1) 1073741823) ; perverse
(num-test (rationalize -2.225073858507201399999999999999999999996E-308) 0)
(num-test (rationalize -9223372036854775808) -9223372036854775808)
(num-test (rationalize 1.110223024625156799999999999999999999997E-16) 0)
(num-test (rationalize 9223372036854775807) 9223372036854775807)
(num-test (rationalize -3037000503.0 -3037000500.0) -3)

(num-test (rationalize 33309123021416.7508179322803e-25 1e-20) 1/300218050279)
(num-test (rationalize 33309123021416.7508179322803e-25 1e-12) 1/230898233499)
(num-test (rationalize 33309123021416.7508179322803e-25 1e-23) 1/300218051179)

(num-test (rationalize 9223372036854775807 0) 9223372036854775807)
(num-test (rationalize 9223372036854775807 -1) 9223372036854775806)
(num-test (rationalize 9223372036854775807 -1/2) 9223372036854775807)
(num-test (rationalize 9223372036854775807 1/2) 9223372036854775807)
(num-test (rationalize 9223372036854775807 3/2) 9223372036854775806)
(num-test (rationalize 9223372036854775807 -3/2) 9223372036854775806)
(num-test (rationalize 9223372036854775807 1) 9223372036854775806)
(num-test (rationalize 9223372036854775807 inf.0) 0)

(test (rationalize (/ pi) 1e-8) 24288/76303)
(test (rationalize (/ pi) 1e-10) 33102/103993)
(num-test (rationalize 1e8 1e9) 0)
(num-test (rationalize 1e16 most-positive-fixnum) 0)
(num-test (rationalize most-positive-fixnum 1e20) 0)
(num-test (rationalize most-positive-fixnum most-positive-fixnum) 0)
(num-test (rationalize (/ 1 most-positive-fixnum) 0) (/ 1 most-positive-fixnum))
(num-test (rationalize 1e20 -1e21) 0)
(num-test (rationalize -1e20 1e21) 0)
(num-test (rationalize 1e20 inf.0) 0)

(num-test (rationalize (/ (expt 2 60) (expt 3 20)) .01) 2314582608/7)
(num-test (rationalize (/ (expt 2 60) (expt 3 20)) .001) 8266366457/25)
(num-test (rationalize 33309123021416.7508179322803e-25 1e-23) 1/300218051179)
(num-test (rationalize 11/30 .1) 1/3)
(num-test (rationalize 11/30 .2) 1/2)
(num-test (rationalize 11/30 .365) 1/2)
(num-test (rationalize 11/30 .367) 0)

;; these differ from the ratify result
(num-test (rationalize 0.02 .01) 1/34)
(num-test (rationalize 0.05 .01) 1/17)
(num-test (rationalize 0.06 .01) 1/15)
(num-test (rationalize 0.07 .01) 1/13)
(num-test (rationalize 0.32 .01) 5/16)
(num-test (rationalize 0.35 .01) 5/14)
(num-test (rationalize 0.39 .01) 2/5)
(num-test (rationalize 0.47 .01) 6/13)
(num-test (rationalize 0.48 .01) 8/17)
(num-test (rationalize 0.52 .01) 9/17)
(num-test (rationalize 0.53 .01) 7/13)
(num-test (rationalize 0.61 .01) 3/5)
(num-test (rationalize 0.65 .01) 9/14)
(num-test (rationalize 0.68 .01) 11/16)
(num-test (rationalize 0.93 .01) 12/13)
(num-test (rationalize 0.94 .01) 14/15)
(num-test (rationalize 0.95 .01) 16/17)
(num-test (rationalize 0.96 .01) 19/20)
(num-test (rationalize 0.97 .01) 24/25)
(num-test (rationalize 0.98 .01) 33/34)

(num-test (rationalize 0.01 .001) 1/91)
(num-test (rationalize 0.02 .001) 1/48)
(num-test (rationalize 0.06 .001) 2/33)
(num-test (rationalize 0.11 .001) 6/55)
(num-test (rationalize 0.14 .001) 6/43)
(num-test (rationalize 0.17 .001) 7/41)
(num-test (rationalize 0.18 .001) 7/39)
(num-test (rationalize 0.33 .001) 26/79)
(num-test (rationalize 0.34 .001) 15/44)
(num-test (rationalize 0.43 .001) 28/65)
(num-test (rationalize 0.46 .001) 17/37)
(num-test (rationalize 0.49 .001) 23/47)
(num-test (rationalize 0.51 .001) 24/47)
(num-test (rationalize 0.57 .001) 37/65)
(num-test (rationalize 0.58 .001) 18/31)
(num-test (rationalize 0.66 .001) 29/44)
(num-test (rationalize 0.67 .001) 53/79)
(num-test (rationalize 0.83 .001) 34/41)
(num-test (rationalize 0.86 .001) 37/43)
(num-test (rationalize 0.89 .001) 49/55)
(num-test (rationalize 0.94 .001) 31/33)
(num-test (rationalize 0.98 .001) 47/48)
(num-test (rationalize 0.99 .001) 90/91)

(num-test (rationalize 0.1001 .1) 1/5)
(num-test (rationalize 0.101 .1) 1/5)
(num-test (rationalize 0.451 .0010001) 9/20)
(num-test (rationalize 0.9876 .0001) 80/81)

(num-test (rationalize (expt 2 1/3) (expt 10 -10)) 96389/76504)
(num-test (rationalize (expt 2 1/3) (expt 10 -15)) 15240955/12096754)

(for-each
 (lambda (num-and-val)
   (let ((num (car num-and-val)) (val (cadr num-and-val))) (num-test-1 'rationalize num (rationalize num) val)))
 (vector (list 0 0) (list 1 1) (list 2 2) (list 3 3) (list -1 -1) (list -2 -2) (list -3 -3) 
	 (list 9223372036854775807 9223372036854775807) (list -9223372036854775808 -9223372036854775808) 
	 (list 1/2 1/2) (list 1/3 1/3) (list -1/2 -1/2) (list -1/3 -1/3) (list 1/9223372036854775807 0) 
	 (list 0.0 0) (list 1.0 1) (list 2.0 2) (list -2.0 -2) (list 1.000000000000000000000000000000000000002E-309 0))) 
  
(if (not with-bignums)
    (begin
      (test (< (abs (- (rationalize (/ pi) 1e-17) (/ pi))) 1e-10) #t) ; make sure we don't hang!
      (test (< (abs (- (rationalize (/ pi) 1e-18) (/ pi))) 1e-10) #t)
      (test (< (abs (- (rationalize (/ pi) 1e-20) (/ pi))) 1e-10) #t)

      (num-test (rationalize 1e-19 1e-21) 0)
      (num-test (rationalize 1e-19 1e-30) 0)
      (num-test (rationalize 1e-19 1e-50) 0)
      (num-test (rationalize 1e-19 0.0) 0)
      (num-test (rationalize 1e-19 1e-19) 0)
      (num-test (rationalize 1e-30 0.0) 0)
      (num-test (rationalize (+ .1 1e-18) 1e-17) 1/10)
      (num-test (rationalize (- .1 1e-18) 1e-17) 1/10)
      )
    (begin
      (test (rationalize (/ pi) 1e-17) 78256779/245850922) 
      (test (rationalize (/ pi) 1e-18) 340262731/1068966896)
      (test (rationalize (/ pi) 1e-20) 1963319607/6167950454)
      (test (rationalize (/ pi) 1e-30) 136308121570117/428224593349304)
      (num-test (rationalize (/ 1 most-negative-fixnum) 0) (/ 1 most-negative-fixnum))

      (num-test (rationalize 1e-19 1e-21) 1/9900990099009900991)
      (num-test (rationalize 1e-19 1e-30) 1/9999999999900000001)
      (num-test (rationalize 1e-30 0.0) 1/1000000000000000000000000000000)
      (num-test (rationalize (+ .1 1e-18) 0) 100000000000000001/1000000000000000000)
      (num-test (rationalize (+ .1 1e-18) 1e-20) 9900990099009902/99009900990099019)
      (num-test (rationalize (- .1 1e-18) 1e-20) 9900990099009901/99009900990099011)
      (num-test (rationalize 1e18 1e19) 0)
      
      (num-test (rationalize 1180591620717411303424) 1180591620717411303424)
      (num-test (rationalize 1180591620717411303424 .9) 1180591620717411303424)
      (num-test (rationalize -1180591620717411303424 1.9) -1180591620717411303423)
      (test (rationalize -1180591620717411303424 nan.0) 'error)
      (num-test (rationalize -1180591620717411303424 inf.0) 0)
      (num-test (rationalize most-negative-fixnum 1) (+ most-negative-fixnum 1))

      (num-test (rationalize (/ 3.0 most-positive-fixnum) 1e-50) 3/9223372036854775807)
      (num-test (rationalize (/ 3.0 most-positive-fixnum) 1e-38) 3/9223372036854775807)

      (num-test (rationalize (expt 2 1/3) (expt 10 -20)) 11952836413/9486972548)
      (num-test (rationalize (expt 2 1/3) (expt 10 -30)) 2566462403285413/2037002559406049)
      (test (< (abs (- (expt (rationalize (expt 2 1/3) (expt 10 -30)) 3.0) 2)) 1e-29) #t)

      (test (rationalize 3796553736732654909229441/2684568892382786771291329) 1607521/1136689) ; default error?
      (test (< (abs (- (rationalize 3796553736732654909229441/2684568892382786771291329)3796553736732654909229441/2684568892382786771291329)) 1e-12) #t)
      (num-test (rationalize 3796553736732654909229441/2684568892382786771291329 1) 1)

      (let ((old-prec (bignum-precision)))
	(set! (bignum-precision) 1024)
	(num-test (rationalize (expt 2 1/3) 1e-40) 77270484057362988877/61329623839374997455)
	(num-test (rationalize 3796553736732654909229441/2684568892382786771291329 0) 3796553736732654909229441/2684568892382786771291329)
	(set! (bignum-precision) old-prec))

      ))


(let ()
  (define (check-rationalize val n)
    (call-with-exit
     (lambda (return)
       (let* ((diffs (make-vector n 0.0))
	      (ratios (make-vector n 0)))
	 (do ((i 0 (+ i 1)))
	     ((= i n))
	   (let* ((err (expt 2 (- (+ i 1))))
		  (rat (rationalize val err))
		  (diff (abs (- rat val))))
	     (vector-set! ratios i rat)
	     (vector-set! diffs i diff)
	     (if (> diff err)
		 (begin
		   (format #t "|~A - ~A| = ~A > ~A (2^~A -> 2^~A)?~%" val rat diff err (log diff 2) (log err 2))
		   (return #f)))))
	 (and (apply >= (vector->list diffs))
	      (apply <= (map denominator ratios)))))))

  (for-each
   (lambda (val)
     (test (check-rationalize val 40) #t))
   (list pi (/ pi) (- pi) (- (/ pi)) (* 10 pi) (* -1000 pi) (exp 1.0) (exp -1.0) (exp 4.0) (exp -4.0)))

  (do ((i 0 (+ i 1))) 
      ((= i 100)) 
    (let ((val (- (random 2.0) 1.0))) 
      (let ((rat (check-rationalize val 40)))
	(if (not rat) 
	    (format #t "rationalize trouble with ~A~%" val)))))

  (if with-bignums
      (let ((old-prec (bignum-precision)))
	(set! (bignum-precision) 4096)
	(test (bignum-precision) 4096)
	(test (apply bignum-precision '()) 4096)

	(test (check-rationalize pi 100) #t)
	(test (check-rationalize (/ pi) 100) #t)

	(for-each
	 (lambda (arg)
	   (test (set! (bignum-precision) arg) 'error))
	 (list "hi" #\a 'a-symbol '#(1 2 3) -1 0 1 3.14 3/4 1.0+1.0i #t abs #<eof> #<unspecified> (lambda () 1)))

	(test (bignum-precision 213) 'error)
	(test (set! (bignum-precision 213) 123) 'error)

	(set! (bignum-precision) 2)
	(test (bignum-precision) 2)
	(test (object->string pi) "3.0E0")

	(set! (bignum-precision) old-prec))))

(test (rationalize) 'error)
(test (rationalize 1.23+1.0i 1.23+1.0i) 'error)
(test (rationalize 1.23 1.23 1.23) 'error)
(test (rationalize 0 nan.0) 'error) ; ??
(test (rationalize 1 nan.0) 'error)
(test (rationalize (expt 2 60) -) 'error)

(for-each
 (lambda (arg)
   (test (rationalize arg 0.1) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))

(for-each
 (lambda (arg)
   (test (rationalize arg nan.0) 'error)
   (test (rationalize nan.0 arg) 'error)
   (test (rationalize arg inf.0) 'error)
   (test (rationalize inf.0 arg) 'error)
   (test (rationalize 0.1 arg) 'error)
   (test (rationalize 1 arg) 'error)
   (test (rationalize 1/2 arg) 'error)
   (test (rationalize 0+i arg) 'error))
 (list "hi" '() (integer->char 65) #f #t '(1 2) _ht_ 'a-symbol (cons 1 2) (make-vector 3) abs 
       #<eof> '(1 2 3) #\newline (lambda (a) (+ a 1)) #<unspecified> #<undefined>))

(if with-bignums
    (begin
      (num-test (rationalize .1e20) 10000000000000000000)
      (num-test (rationalize 1e19) 10000000000000000000)
      (num-test (rationalize 1e20) 100000000000000000000))
    (begin
      (num-test (rationalize .1e20) 'error)
      (num-test (rationalize 1e19) 'error)
      (num-test (rationalize 1e20) 'error)))

(call-with-exit
 (lambda (done)
   (do ((k -6 (- k 1)))
       ((= k -17))
     (call-with-exit
      (lambda (ok)
	(let ((fraction (rationalize (expt 10.0 k) 1e-18)))
	  (do ((i 0 (+ i 1)))
	      ((= i 100))
	    (if (not (zero? (random fraction)))
		(ok))))
	(format #t ";random of small ratios is always 0 below ca. ~A~%" (expt 10.0 k))
	(done))))))
