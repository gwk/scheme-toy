(test (eqv? 'a 3) #f)
(test (eqv? #t 't) #f)
(test (eqv? "abs" 'abc) #f)
(test (eqv? "hi" '(hi)) #f)
(test (eqv? "()" '()) #f)
(test (eqv? '(1) '(1)) #f)
(test (eqv? '(#f) '(#f)) #f)
(test (eqv? #\a #\b) #f)
(test (eqv? #\a #\a) #t)
(test (eqv? (integer->char 255) (string-ref (string #\x (integer->char 255) #\x) 1)) #t)
(test (eqv? (integer->char #xf0) (integer->char #x70)) #f)
(test (eqv? #\space #\space) #t)
(test (let ((x (string-ref "hi" 0))) (eqv? x x)) #t)
(test (eqv? #t #t) #t)
(test (eqv? #f #f) #t)
(test (eqv? #f #t) #f)
(test (eqv? (null? '()) #t) #t)
(test (eqv? (null? '(a)) #f) #t)
(test (eqv? (cdr '(a)) '()) #t)
(test (eqv? 'a 'a) #t)
(test (eqv? 'a 'b) #f)
(test (eqv? 'a (string->symbol "a")) #t)
(test (eqv? '(a) '(b)) #f)
(test (let ((x '(a . b))) (eqv? x x)) #t)
(test (let ((x (cons 'a 'b))) (eqv? x x)) #t)
(test (eqv? (cons 'a 'b) (cons 'a 'b)) #f)
(test (eqv? "abc" "cba") #f)
(test (let ((x "hi")) (eqv? x x)) #t)
(test (eqv? (string #\h #\i) (string #\h #\i)) #f)
(test (eqv? '#(a) '#(b)) #f)
(test (let ((x (vector 'a))) (eqv? x x)) #t)
(test (eqv? (vector 'a) (vector 'a)) #f)
(test (eqv? car car) #t)
(test (eqv? car cdr) #f)
(test (let ((x (lambda () 1))) (eqv? x x)) #t)
(test (eqv? (lambda () 1) (lambda () 1)) #f)
(test (let () (define (make-adder x) (lambda (y) (+ x y))) (eqv? (make-adder 1) (make-adder 1))) #f)
(test (eqv? 9/2 9/2) #t)
(test (eqv? quote quote) #t)
(test (eqv? () ()) #t)
(test (eqv? () '()) #t)
(test (eqv? "" "") #f)
(test (eqv? "hi" "hi") #f) ; unspecified 
(test (eqv? #() #()) #f)   ; unspecified, but in s7 (eqv? () ()) is #t

(let ((c1 (let ((x 32))
	    (lambda () x)))
      (c2 (let ((x 123))
	    (lambda () x))))
  (test (eqv? c1 c2) #f)
  (test (eqv? c1 c1) #t))

(test (eqv? most-positive-fixnum most-positive-fixnum) #t)
(test (eqv? most-positive-fixnum most-negative-fixnum) #f)
(test (eqv? 9223372036854775807 9223372036854775806) #f)
(test (eqv? 9223372036854775807 -9223372036854775808) #f)
(test (eqv? -9223372036854775808 -9223372036854775808) #t)
(test (eqv? 123456789/2 123456789/2) #t)
(test (eqv? 123456789/2 123456787/2) #f)
(test (eqv? -123456789/2 -123456789/2) #t)
(test (eqv? 2/123456789 2/123456789) #t)
(test (eqv? -2/123456789 -2/123456789) #t)
(test (eqv? 2147483647/2147483646 2147483647/2147483646) #t)
(test (eqv? 3/4 12/16) #t)
(test (eqv? 1/1 1) #t)
(test (eqv? 312689/99532 833719/265381) #f)
(test (let ((x 3.141)) (eqv? x x)) #t)
(test (let ((x 1+i)) (eqv? x x)) #t)
(test (let* ((x 3.141) (y x)) (eqv? x y)) #t)
(test (let* ((x 1+i) (y x)) (eqv? x y)) #t)
(test (let* ((x 3/4) (y x)) (eqv? x y)) #t)
(test (eqv? 1.0 1.0) #t)
(test (eqv? 0.6 0.6) #t)
(test (eqv? 0.6 0.60) #t)
(test (eqv? 1+i 1+i) #t)
(test (eqv? -3.14 -3.14) #t)
(test (eqv? 1e2 1e2) #t)
(test (eqv? #i3/5 #i3/5) #t)
(test (eqv? #e0.6 #e0.6) #t)
(test (eqv? 1 1.0) #f)
(test (eqv? 1/2 0.5) #f)
(test (eqv? 1 1/1) #t)
(test (eqv? 0.5 5e-1) #t)
(test (eqv? 1/0 1/0) #f)
(test (let ((+nan.0 1/0)) (eqv? +nan.0 +nan.0)) #f)

(test (eqv? (cons 'a 'b) (cons 'a 'c)) #f)
(test (eqv? eqv? eqv?) #t)
(test (eqv? '#(1) '#(1)) #f)
(test (eqv? '(1) '(1)) #f)
(test (eqv? '() '()) #t)
(test (eqv? '() (list)) #t)
(test (eqv? '(()) '(())) #f)
(test (eqv? (list 'abs 'cons) '(abs cons)) #f)

(let ((things (vector #t #f #\space '() "" 0 1 3/4 1+i 1.5 '(1 .2) '#() (vector) (vector 1) (list 1) 'f 't #\t)))
  (do ((i 0 (+ i 1)))
      ((= i (- (vector-length things) 1)))
    (do ((j (+ i 1) (+ j 1)))
	((= j (vector-length things)))
      (if (eqv? (vector-ref things i) (vector-ref things j))
	  (format #t ";(eqv? ~A ~A) -> #t?~%" (vector-ref things i) (vector-ref things j))))))

(test (eqv?) 'error)
(test (eqv? #t) 'error)
(test (eqv? #t #t #t) 'error)
(test (eqv #f #f) 'error)

(test (eqv? ''2 '2) #f)
(test (eqv? '2 '2) #t)
(test (eqv? '2 2) #t)
(test (eqv? ''2 ''2) #f)
(test (eqv? ''#\a '#\a) #f)
(test (eqv? '#\a #\a) #t)
(test (eqv? 'car car) #f)
(test (eqv? ''() '()) #f)
(test (eqv? '#f #f) #t)
(test (eqv? '#f '#f) #t)
(test (eqv? #<eof> #<eof>) #t)
(test (eqv? #<undefined> #<undefined>) #t)
(test (eqv? #<unspecified> #<unspecified>) #t)
(test (eqv? (if #f #f) #<unspecified>) #t)
(test (eqv? #<eof> #<undefined>) #f)
(test (eqv? #<eof> '()) #f)
(test (let () (define-macro (hi a) `(+ 1 ,a)) (eqv? hi hi)) #t)
(test (let () (define (hi a) (+ 1 a)) (eqv? hi hi)) #t)
(test (let ((x (lambda* (hi (a 1)) (+ 1 a)))) (eqv? x x)) #t)
(test (eqv? else else) #t)

(if with-bignums
    (begin
      (test (eqv? (bignum "1+i") (bignum "1+i")) #t)
      (test (eqv? (bignum "1+i") 1+i) #t)
      (test (eqv? 1+i (bignum "1+i")) #t)
      ))

;; from M Weaver:
(test (list (eqv? +0.0 -0.0)
	    (eqv? (make-rectangular +0.0  1.0)
		  (make-rectangular -0.0  1.0))
	    (eqv? (make-rectangular  1.0 +0.0)
		  (make-rectangular  1.0 -0.0)))
      '(#t #t #t))
(test (list (eq? +0.0 -0.0)
        (eq? (make-rectangular  +0.0  1.0)
              (make-rectangular -0.0  1.0))
        (eq? (make-rectangular   1.0 +0.0)
              (make-rectangular  1.0 -0.0)))
      '(#t #f #f))
(test (list (eq? +0 -0)
        (eq? (make-rectangular  +0  1)
              (make-rectangular -0  1))
        (eq? (make-rectangular   1 +0)
              (make-rectangular  1 -0)))
      '(#t #f #t))
