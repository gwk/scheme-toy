(test (string-ci=? "A" "B") #f)
(test (string-ci=? "a" "B") #f)
(test (string-ci=? "A" "b") #f)
(test (string-ci=? "a" "b") #f)
(test (string-ci=? "9" "0") #f)
(test (string-ci=? "A" "A") #t)
(test (string-ci=? "A" "a") #t)
(test (string-ci=? "" "") #t)
(test (string-ci=? "aaaa" "AAAA") #t)
(test (string-ci=? "aaaa" "Aaaa") #t)

(test (string-ci=? "A" "B" "a") #f)
(test (string-ci=? "A" "A" "a") #t)
(test (string-ci=? "A" "A" "a") #t)
(test (string-ci=? "foo" "foo" "foo") #t)
(test (string-ci=? "foo" "foo" "") #f)
(test (string-ci=? "foo" "Foo" "fOo") #t)

(test (string-ci=? "foo" "GOO" 1.0) 'error)
(test (let ((s1 "1234") (s2 "1245")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #f)
(test (let ((s1 "1234") (s2 "1234")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #t)
(test (let ((s1 "1234") (s2 "124")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #f)
(test (let ((s1 "abcd") (s2 "ABCD")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #t)
(test (let ((s1 "abcd") (s2 "ABCE")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #f)
(test (let ((s1 "abcd") (s2 "ABC")) (string-set! s1 1 #\null) (string-set! s2 1 #\null) (string-ci=? s1 s2)) #f)

(for-each
 (lambda (arg)
   (test (string-ci=? "hi" arg) 'error)
   (test (string-ci=? arg "hi") 'error))
 (list #\a '() (list 1) '(1 . 2) #f 'a-symbol (make-vector 3) abs _ht_ quasiquote macroexpand 1/0 (log 0) 
       3.14 3/4 1.0+1.0i #t :hi (if #f #f) (lambda (a) (+ a 1))))


#|
(let ((size 15)
      (tries 10000))
  (let ((str1 (make-string size))
	(str2 (make-string size)))
    (do ((i 0 (+ i 1)))
	((= i tries))
      (do ((k 0 (+ k 1)))
	  ((= k size))
	(set! (str1 k) (integer->char (random 128)))
	(if (> (random 10) 4)
	    (set! (str2 k) (char-upcase (str1 k)))
	    (set! (str2 k) (char-downcase (str1 k)))))
      (if (not (string-ci=? str1 str2))
	  (format #t "not =: ~S ~S~%" str1 str2))
      (if (and (string-ci<? str1 str2)
	       (string-ci>=? str1 str2))
	  (format #t "< : ~S ~S~%" str1 str2))
      (if (and (string-ci>? str1 str2)
	       (string-ci<=? str1 str2))
	  (format #t "> : ~S ~S~%" str1 str2)))))
|#
